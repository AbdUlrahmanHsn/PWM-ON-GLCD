
PWM_DRAWER_UNIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  00003e2a  00003ebe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800192  00800192  00003ff0  2**0
                  ALLOC
  3 .stab         00003408  00000000  00000000  00003ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001397  00000000  00000000  000073f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000878f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000234  00000000  00000000  0000896f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002791  00000000  00000000  00008ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000015bc  00000000  00000000  0000b334  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013e2  00000000  00000000  0000c8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000dcd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000342  00000000  00000000  0000ded4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b12  00000000  00000000  0000e216  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ed28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e2       	ldi	r30, 0x2A	; 42
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3a       	cpi	r26, 0xA0	; 160
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <main>
      8a:	0c 94 13 1f 	jmp	0x3e26	; 0x3e26 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__lshrdi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__lshrdi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__lshrdi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__lshrdi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	4d 81       	ldd	r20, Y+5	; 0x05
      e4:	5e 81       	ldd	r21, Y+6	; 0x06
      e6:	6f 81       	ldd	r22, Y+7	; 0x07
      e8:	78 85       	ldd	r23, Y+8	; 0x08
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__lshrdi3+0x7c>
      ee:	1d 86       	std	Y+13, r1	; 0x0d
      f0:	1e 86       	std	Y+14, r1	; 0x0e
      f2:	1f 86       	std	Y+15, r1	; 0x0f
      f4:	18 8a       	std	Y+16, r1	; 0x10
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__lshrdi3+0x76>
     100:	76 95       	lsr	r23
     102:	67 95       	ror	r22
     104:	57 95       	ror	r21
     106:	47 95       	ror	r20
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__lshrdi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__lshrdi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__lshrdi3+0x94>
     11e:	b6 95       	lsr	r27
     120:	a7 95       	ror	r26
     122:	97 95       	ror	r25
     124:	87 95       	ror	r24
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__lshrdi3+0x8c>
     12a:	8d 87       	std	Y+13, r24	; 0x0d
     12c:	9e 87       	std	Y+14, r25	; 0x0e
     12e:	af 87       	std	Y+15, r26	; 0x0f
     130:	b8 8b       	std	Y+16, r27	; 0x10
     132:	04 c0       	rjmp	.+8      	; 0x13c <__lshrdi3+0xaa>
     134:	44 0f       	add	r20, r20
     136:	55 1f       	adc	r21, r21
     138:	66 1f       	adc	r22, r22
     13a:	77 1f       	adc	r23, r23
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__lshrdi3+0xa2>
     140:	89 81       	ldd	r24, Y+1	; 0x01
     142:	9a 81       	ldd	r25, Y+2	; 0x02
     144:	ab 81       	ldd	r26, Y+3	; 0x03
     146:	bc 81       	ldd	r27, Y+4	; 0x04
     148:	04 c0       	rjmp	.+8      	; 0x152 <__lshrdi3+0xc0>
     14a:	b6 95       	lsr	r27
     14c:	a7 95       	ror	r26
     14e:	97 95       	ror	r25
     150:	87 95       	ror	r24
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__lshrdi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	49 87       	std	Y+9, r20	; 0x09
     160:	5a 87       	std	Y+10, r21	; 0x0a
     162:	6b 87       	std	Y+11, r22	; 0x0b
     164:	7c 87       	std	Y+12, r23	; 0x0c
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
     1bc:	0e 94 32 05 	call	0xa64	; 0xa64 <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 32 05 	call	0xa64	; 0xa64 <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <_fpadd_parts>:
     1e8:	a0 e0       	ldi	r26, 0x00	; 0
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <__prologue_saves__>
     1f4:	dc 01       	movw	r26, r24
     1f6:	2b 01       	movw	r4, r22
     1f8:	fa 01       	movw	r30, r20
     1fa:	9c 91       	ld	r25, X
     1fc:	92 30       	cpi	r25, 0x02	; 2
     1fe:	08 f4       	brcc	.+2      	; 0x202 <_fpadd_parts+0x1a>
     200:	39 c1       	rjmp	.+626    	; 0x474 <_fpadd_parts+0x28c>
     202:	eb 01       	movw	r28, r22
     204:	88 81       	ld	r24, Y
     206:	82 30       	cpi	r24, 0x02	; 2
     208:	08 f4       	brcc	.+2      	; 0x20c <_fpadd_parts+0x24>
     20a:	33 c1       	rjmp	.+614    	; 0x472 <_fpadd_parts+0x28a>
     20c:	94 30       	cpi	r25, 0x04	; 4
     20e:	69 f4       	brne	.+26     	; 0x22a <_fpadd_parts+0x42>
     210:	84 30       	cpi	r24, 0x04	; 4
     212:	09 f0       	breq	.+2      	; 0x216 <_fpadd_parts+0x2e>
     214:	2f c1       	rjmp	.+606    	; 0x474 <_fpadd_parts+0x28c>
     216:	11 96       	adiw	r26, 0x01	; 1
     218:	9c 91       	ld	r25, X
     21a:	11 97       	sbiw	r26, 0x01	; 1
     21c:	89 81       	ldd	r24, Y+1	; 0x01
     21e:	98 17       	cp	r25, r24
     220:	09 f4       	brne	.+2      	; 0x224 <_fpadd_parts+0x3c>
     222:	28 c1       	rjmp	.+592    	; 0x474 <_fpadd_parts+0x28c>
     224:	aa e7       	ldi	r26, 0x7A	; 122
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	25 c1       	rjmp	.+586    	; 0x474 <_fpadd_parts+0x28c>
     22a:	84 30       	cpi	r24, 0x04	; 4
     22c:	09 f4       	brne	.+2      	; 0x230 <_fpadd_parts+0x48>
     22e:	21 c1       	rjmp	.+578    	; 0x472 <_fpadd_parts+0x28a>
     230:	82 30       	cpi	r24, 0x02	; 2
     232:	a9 f4       	brne	.+42     	; 0x25e <_fpadd_parts+0x76>
     234:	92 30       	cpi	r25, 0x02	; 2
     236:	09 f0       	breq	.+2      	; 0x23a <_fpadd_parts+0x52>
     238:	1d c1       	rjmp	.+570    	; 0x474 <_fpadd_parts+0x28c>
     23a:	9a 01       	movw	r18, r20
     23c:	ad 01       	movw	r20, r26
     23e:	88 e0       	ldi	r24, 0x08	; 8
     240:	ea 01       	movw	r28, r20
     242:	09 90       	ld	r0, Y+
     244:	ae 01       	movw	r20, r28
     246:	e9 01       	movw	r28, r18
     248:	09 92       	st	Y+, r0
     24a:	9e 01       	movw	r18, r28
     24c:	81 50       	subi	r24, 0x01	; 1
     24e:	c1 f7       	brne	.-16     	; 0x240 <_fpadd_parts+0x58>
     250:	e2 01       	movw	r28, r4
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	11 96       	adiw	r26, 0x01	; 1
     256:	9c 91       	ld	r25, X
     258:	89 23       	and	r24, r25
     25a:	81 83       	std	Z+1, r24	; 0x01
     25c:	08 c1       	rjmp	.+528    	; 0x46e <_fpadd_parts+0x286>
     25e:	92 30       	cpi	r25, 0x02	; 2
     260:	09 f4       	brne	.+2      	; 0x264 <_fpadd_parts+0x7c>
     262:	07 c1       	rjmp	.+526    	; 0x472 <_fpadd_parts+0x28a>
     264:	12 96       	adiw	r26, 0x02	; 2
     266:	2d 90       	ld	r2, X+
     268:	3c 90       	ld	r3, X
     26a:	13 97       	sbiw	r26, 0x03	; 3
     26c:	eb 01       	movw	r28, r22
     26e:	8a 81       	ldd	r24, Y+2	; 0x02
     270:	9b 81       	ldd	r25, Y+3	; 0x03
     272:	14 96       	adiw	r26, 0x04	; 4
     274:	ad 90       	ld	r10, X+
     276:	bd 90       	ld	r11, X+
     278:	cd 90       	ld	r12, X+
     27a:	dc 90       	ld	r13, X
     27c:	17 97       	sbiw	r26, 0x07	; 7
     27e:	ec 80       	ldd	r14, Y+4	; 0x04
     280:	fd 80       	ldd	r15, Y+5	; 0x05
     282:	0e 81       	ldd	r16, Y+6	; 0x06
     284:	1f 81       	ldd	r17, Y+7	; 0x07
     286:	91 01       	movw	r18, r2
     288:	28 1b       	sub	r18, r24
     28a:	39 0b       	sbc	r19, r25
     28c:	b9 01       	movw	r22, r18
     28e:	37 ff       	sbrs	r19, 7
     290:	04 c0       	rjmp	.+8      	; 0x29a <_fpadd_parts+0xb2>
     292:	66 27       	eor	r22, r22
     294:	77 27       	eor	r23, r23
     296:	62 1b       	sub	r22, r18
     298:	73 0b       	sbc	r23, r19
     29a:	60 32       	cpi	r22, 0x20	; 32
     29c:	71 05       	cpc	r23, r1
     29e:	0c f0       	brlt	.+2      	; 0x2a2 <_fpadd_parts+0xba>
     2a0:	61 c0       	rjmp	.+194    	; 0x364 <_fpadd_parts+0x17c>
     2a2:	12 16       	cp	r1, r18
     2a4:	13 06       	cpc	r1, r19
     2a6:	6c f5       	brge	.+90     	; 0x302 <_fpadd_parts+0x11a>
     2a8:	37 01       	movw	r6, r14
     2aa:	48 01       	movw	r8, r16
     2ac:	06 2e       	mov	r0, r22
     2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <_fpadd_parts+0xd0>
     2b0:	96 94       	lsr	r9
     2b2:	87 94       	ror	r8
     2b4:	77 94       	ror	r7
     2b6:	67 94       	ror	r6
     2b8:	0a 94       	dec	r0
     2ba:	d2 f7       	brpl	.-12     	; 0x2b0 <_fpadd_parts+0xc8>
     2bc:	21 e0       	ldi	r18, 0x01	; 1
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	40 e0       	ldi	r20, 0x00	; 0
     2c2:	50 e0       	ldi	r21, 0x00	; 0
     2c4:	04 c0       	rjmp	.+8      	; 0x2ce <_fpadd_parts+0xe6>
     2c6:	22 0f       	add	r18, r18
     2c8:	33 1f       	adc	r19, r19
     2ca:	44 1f       	adc	r20, r20
     2cc:	55 1f       	adc	r21, r21
     2ce:	6a 95       	dec	r22
     2d0:	d2 f7       	brpl	.-12     	; 0x2c6 <_fpadd_parts+0xde>
     2d2:	21 50       	subi	r18, 0x01	; 1
     2d4:	30 40       	sbci	r19, 0x00	; 0
     2d6:	40 40       	sbci	r20, 0x00	; 0
     2d8:	50 40       	sbci	r21, 0x00	; 0
     2da:	2e 21       	and	r18, r14
     2dc:	3f 21       	and	r19, r15
     2de:	40 23       	and	r20, r16
     2e0:	51 23       	and	r21, r17
     2e2:	21 15       	cp	r18, r1
     2e4:	31 05       	cpc	r19, r1
     2e6:	41 05       	cpc	r20, r1
     2e8:	51 05       	cpc	r21, r1
     2ea:	21 f0       	breq	.+8      	; 0x2f4 <_fpadd_parts+0x10c>
     2ec:	21 e0       	ldi	r18, 0x01	; 1
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 e0       	ldi	r20, 0x00	; 0
     2f2:	50 e0       	ldi	r21, 0x00	; 0
     2f4:	79 01       	movw	r14, r18
     2f6:	8a 01       	movw	r16, r20
     2f8:	e6 28       	or	r14, r6
     2fa:	f7 28       	or	r15, r7
     2fc:	08 29       	or	r16, r8
     2fe:	19 29       	or	r17, r9
     300:	3c c0       	rjmp	.+120    	; 0x37a <_fpadd_parts+0x192>
     302:	23 2b       	or	r18, r19
     304:	d1 f1       	breq	.+116    	; 0x37a <_fpadd_parts+0x192>
     306:	26 0e       	add	r2, r22
     308:	37 1e       	adc	r3, r23
     30a:	35 01       	movw	r6, r10
     30c:	46 01       	movw	r8, r12
     30e:	06 2e       	mov	r0, r22
     310:	04 c0       	rjmp	.+8      	; 0x31a <_fpadd_parts+0x132>
     312:	96 94       	lsr	r9
     314:	87 94       	ror	r8
     316:	77 94       	ror	r7
     318:	67 94       	ror	r6
     31a:	0a 94       	dec	r0
     31c:	d2 f7       	brpl	.-12     	; 0x312 <_fpadd_parts+0x12a>
     31e:	21 e0       	ldi	r18, 0x01	; 1
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	40 e0       	ldi	r20, 0x00	; 0
     324:	50 e0       	ldi	r21, 0x00	; 0
     326:	04 c0       	rjmp	.+8      	; 0x330 <_fpadd_parts+0x148>
     328:	22 0f       	add	r18, r18
     32a:	33 1f       	adc	r19, r19
     32c:	44 1f       	adc	r20, r20
     32e:	55 1f       	adc	r21, r21
     330:	6a 95       	dec	r22
     332:	d2 f7       	brpl	.-12     	; 0x328 <_fpadd_parts+0x140>
     334:	21 50       	subi	r18, 0x01	; 1
     336:	30 40       	sbci	r19, 0x00	; 0
     338:	40 40       	sbci	r20, 0x00	; 0
     33a:	50 40       	sbci	r21, 0x00	; 0
     33c:	2a 21       	and	r18, r10
     33e:	3b 21       	and	r19, r11
     340:	4c 21       	and	r20, r12
     342:	5d 21       	and	r21, r13
     344:	21 15       	cp	r18, r1
     346:	31 05       	cpc	r19, r1
     348:	41 05       	cpc	r20, r1
     34a:	51 05       	cpc	r21, r1
     34c:	21 f0       	breq	.+8      	; 0x356 <_fpadd_parts+0x16e>
     34e:	21 e0       	ldi	r18, 0x01	; 1
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	40 e0       	ldi	r20, 0x00	; 0
     354:	50 e0       	ldi	r21, 0x00	; 0
     356:	59 01       	movw	r10, r18
     358:	6a 01       	movw	r12, r20
     35a:	a6 28       	or	r10, r6
     35c:	b7 28       	or	r11, r7
     35e:	c8 28       	or	r12, r8
     360:	d9 28       	or	r13, r9
     362:	0b c0       	rjmp	.+22     	; 0x37a <_fpadd_parts+0x192>
     364:	82 15       	cp	r24, r2
     366:	93 05       	cpc	r25, r3
     368:	2c f0       	brlt	.+10     	; 0x374 <_fpadd_parts+0x18c>
     36a:	1c 01       	movw	r2, r24
     36c:	aa 24       	eor	r10, r10
     36e:	bb 24       	eor	r11, r11
     370:	65 01       	movw	r12, r10
     372:	03 c0       	rjmp	.+6      	; 0x37a <_fpadd_parts+0x192>
     374:	ee 24       	eor	r14, r14
     376:	ff 24       	eor	r15, r15
     378:	87 01       	movw	r16, r14
     37a:	11 96       	adiw	r26, 0x01	; 1
     37c:	9c 91       	ld	r25, X
     37e:	d2 01       	movw	r26, r4
     380:	11 96       	adiw	r26, 0x01	; 1
     382:	8c 91       	ld	r24, X
     384:	98 17       	cp	r25, r24
     386:	09 f4       	brne	.+2      	; 0x38a <_fpadd_parts+0x1a2>
     388:	45 c0       	rjmp	.+138    	; 0x414 <_fpadd_parts+0x22c>
     38a:	99 23       	and	r25, r25
     38c:	39 f0       	breq	.+14     	; 0x39c <_fpadd_parts+0x1b4>
     38e:	a8 01       	movw	r20, r16
     390:	97 01       	movw	r18, r14
     392:	2a 19       	sub	r18, r10
     394:	3b 09       	sbc	r19, r11
     396:	4c 09       	sbc	r20, r12
     398:	5d 09       	sbc	r21, r13
     39a:	06 c0       	rjmp	.+12     	; 0x3a8 <_fpadd_parts+0x1c0>
     39c:	a6 01       	movw	r20, r12
     39e:	95 01       	movw	r18, r10
     3a0:	2e 19       	sub	r18, r14
     3a2:	3f 09       	sbc	r19, r15
     3a4:	40 0b       	sbc	r20, r16
     3a6:	51 0b       	sbc	r21, r17
     3a8:	57 fd       	sbrc	r21, 7
     3aa:	08 c0       	rjmp	.+16     	; 0x3bc <_fpadd_parts+0x1d4>
     3ac:	11 82       	std	Z+1, r1	; 0x01
     3ae:	33 82       	std	Z+3, r3	; 0x03
     3b0:	22 82       	std	Z+2, r2	; 0x02
     3b2:	24 83       	std	Z+4, r18	; 0x04
     3b4:	35 83       	std	Z+5, r19	; 0x05
     3b6:	46 83       	std	Z+6, r20	; 0x06
     3b8:	57 83       	std	Z+7, r21	; 0x07
     3ba:	1d c0       	rjmp	.+58     	; 0x3f6 <_fpadd_parts+0x20e>
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	81 83       	std	Z+1, r24	; 0x01
     3c0:	33 82       	std	Z+3, r3	; 0x03
     3c2:	22 82       	std	Z+2, r2	; 0x02
     3c4:	88 27       	eor	r24, r24
     3c6:	99 27       	eor	r25, r25
     3c8:	dc 01       	movw	r26, r24
     3ca:	82 1b       	sub	r24, r18
     3cc:	93 0b       	sbc	r25, r19
     3ce:	a4 0b       	sbc	r26, r20
     3d0:	b5 0b       	sbc	r27, r21
     3d2:	84 83       	std	Z+4, r24	; 0x04
     3d4:	95 83       	std	Z+5, r25	; 0x05
     3d6:	a6 83       	std	Z+6, r26	; 0x06
     3d8:	b7 83       	std	Z+7, r27	; 0x07
     3da:	0d c0       	rjmp	.+26     	; 0x3f6 <_fpadd_parts+0x20e>
     3dc:	22 0f       	add	r18, r18
     3de:	33 1f       	adc	r19, r19
     3e0:	44 1f       	adc	r20, r20
     3e2:	55 1f       	adc	r21, r21
     3e4:	24 83       	std	Z+4, r18	; 0x04
     3e6:	35 83       	std	Z+5, r19	; 0x05
     3e8:	46 83       	std	Z+6, r20	; 0x06
     3ea:	57 83       	std	Z+7, r21	; 0x07
     3ec:	82 81       	ldd	r24, Z+2	; 0x02
     3ee:	93 81       	ldd	r25, Z+3	; 0x03
     3f0:	01 97       	sbiw	r24, 0x01	; 1
     3f2:	93 83       	std	Z+3, r25	; 0x03
     3f4:	82 83       	std	Z+2, r24	; 0x02
     3f6:	24 81       	ldd	r18, Z+4	; 0x04
     3f8:	35 81       	ldd	r19, Z+5	; 0x05
     3fa:	46 81       	ldd	r20, Z+6	; 0x06
     3fc:	57 81       	ldd	r21, Z+7	; 0x07
     3fe:	da 01       	movw	r26, r20
     400:	c9 01       	movw	r24, r18
     402:	01 97       	sbiw	r24, 0x01	; 1
     404:	a1 09       	sbc	r26, r1
     406:	b1 09       	sbc	r27, r1
     408:	8f 5f       	subi	r24, 0xFF	; 255
     40a:	9f 4f       	sbci	r25, 0xFF	; 255
     40c:	af 4f       	sbci	r26, 0xFF	; 255
     40e:	bf 43       	sbci	r27, 0x3F	; 63
     410:	28 f3       	brcs	.-54     	; 0x3dc <_fpadd_parts+0x1f4>
     412:	0b c0       	rjmp	.+22     	; 0x42a <_fpadd_parts+0x242>
     414:	91 83       	std	Z+1, r25	; 0x01
     416:	33 82       	std	Z+3, r3	; 0x03
     418:	22 82       	std	Z+2, r2	; 0x02
     41a:	ea 0c       	add	r14, r10
     41c:	fb 1c       	adc	r15, r11
     41e:	0c 1d       	adc	r16, r12
     420:	1d 1d       	adc	r17, r13
     422:	e4 82       	std	Z+4, r14	; 0x04
     424:	f5 82       	std	Z+5, r15	; 0x05
     426:	06 83       	std	Z+6, r16	; 0x06
     428:	17 83       	std	Z+7, r17	; 0x07
     42a:	83 e0       	ldi	r24, 0x03	; 3
     42c:	80 83       	st	Z, r24
     42e:	24 81       	ldd	r18, Z+4	; 0x04
     430:	35 81       	ldd	r19, Z+5	; 0x05
     432:	46 81       	ldd	r20, Z+6	; 0x06
     434:	57 81       	ldd	r21, Z+7	; 0x07
     436:	57 ff       	sbrs	r21, 7
     438:	1a c0       	rjmp	.+52     	; 0x46e <_fpadd_parts+0x286>
     43a:	c9 01       	movw	r24, r18
     43c:	aa 27       	eor	r26, r26
     43e:	97 fd       	sbrc	r25, 7
     440:	a0 95       	com	r26
     442:	ba 2f       	mov	r27, r26
     444:	81 70       	andi	r24, 0x01	; 1
     446:	90 70       	andi	r25, 0x00	; 0
     448:	a0 70       	andi	r26, 0x00	; 0
     44a:	b0 70       	andi	r27, 0x00	; 0
     44c:	56 95       	lsr	r21
     44e:	47 95       	ror	r20
     450:	37 95       	ror	r19
     452:	27 95       	ror	r18
     454:	82 2b       	or	r24, r18
     456:	93 2b       	or	r25, r19
     458:	a4 2b       	or	r26, r20
     45a:	b5 2b       	or	r27, r21
     45c:	84 83       	std	Z+4, r24	; 0x04
     45e:	95 83       	std	Z+5, r25	; 0x05
     460:	a6 83       	std	Z+6, r26	; 0x06
     462:	b7 83       	std	Z+7, r27	; 0x07
     464:	82 81       	ldd	r24, Z+2	; 0x02
     466:	93 81       	ldd	r25, Z+3	; 0x03
     468:	01 96       	adiw	r24, 0x01	; 1
     46a:	93 83       	std	Z+3, r25	; 0x03
     46c:	82 83       	std	Z+2, r24	; 0x02
     46e:	df 01       	movw	r26, r30
     470:	01 c0       	rjmp	.+2      	; 0x474 <_fpadd_parts+0x28c>
     472:	d2 01       	movw	r26, r4
     474:	cd 01       	movw	r24, r26
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	e2 e1       	ldi	r30, 0x12	; 18
     47c:	0c 94 f8 1e 	jmp	0x3df0	; 0x3df0 <__epilogue_restores__>

00000480 <__subsf3>:
     480:	a0 e2       	ldi	r26, 0x20	; 32
     482:	b0 e0       	ldi	r27, 0x00	; 0
     484:	e6 e4       	ldi	r30, 0x46	; 70
     486:	f2 e0       	ldi	r31, 0x02	; 2
     488:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <__prologue_saves__+0x18>
     48c:	69 83       	std	Y+1, r22	; 0x01
     48e:	7a 83       	std	Y+2, r23	; 0x02
     490:	8b 83       	std	Y+3, r24	; 0x03
     492:	9c 83       	std	Y+4, r25	; 0x04
     494:	2d 83       	std	Y+5, r18	; 0x05
     496:	3e 83       	std	Y+6, r19	; 0x06
     498:	4f 83       	std	Y+7, r20	; 0x07
     49a:	58 87       	std	Y+8, r21	; 0x08
     49c:	e9 e0       	ldi	r30, 0x09	; 9
     49e:	ee 2e       	mov	r14, r30
     4a0:	f1 2c       	mov	r15, r1
     4a2:	ec 0e       	add	r14, r28
     4a4:	fd 1e       	adc	r15, r29
     4a6:	ce 01       	movw	r24, r28
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	b7 01       	movw	r22, r14
     4ac:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     4b0:	8e 01       	movw	r16, r28
     4b2:	0f 5e       	subi	r16, 0xEF	; 239
     4b4:	1f 4f       	sbci	r17, 0xFF	; 255
     4b6:	ce 01       	movw	r24, r28
     4b8:	05 96       	adiw	r24, 0x05	; 5
     4ba:	b8 01       	movw	r22, r16
     4bc:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     4c0:	8a 89       	ldd	r24, Y+18	; 0x12
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	89 27       	eor	r24, r25
     4c6:	8a 8b       	std	Y+18, r24	; 0x12
     4c8:	c7 01       	movw	r24, r14
     4ca:	b8 01       	movw	r22, r16
     4cc:	ae 01       	movw	r20, r28
     4ce:	47 5e       	subi	r20, 0xE7	; 231
     4d0:	5f 4f       	sbci	r21, 0xFF	; 255
     4d2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_fpadd_parts>
     4d6:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__pack_f>
     4da:	a0 96       	adiw	r28, 0x20	; 32
     4dc:	e6 e0       	ldi	r30, 0x06	; 6
     4de:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <__epilogue_restores__+0x18>

000004e2 <__addsf3>:
     4e2:	a0 e2       	ldi	r26, 0x20	; 32
     4e4:	b0 e0       	ldi	r27, 0x00	; 0
     4e6:	e7 e7       	ldi	r30, 0x77	; 119
     4e8:	f2 e0       	ldi	r31, 0x02	; 2
     4ea:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <__prologue_saves__+0x18>
     4ee:	69 83       	std	Y+1, r22	; 0x01
     4f0:	7a 83       	std	Y+2, r23	; 0x02
     4f2:	8b 83       	std	Y+3, r24	; 0x03
     4f4:	9c 83       	std	Y+4, r25	; 0x04
     4f6:	2d 83       	std	Y+5, r18	; 0x05
     4f8:	3e 83       	std	Y+6, r19	; 0x06
     4fa:	4f 83       	std	Y+7, r20	; 0x07
     4fc:	58 87       	std	Y+8, r21	; 0x08
     4fe:	f9 e0       	ldi	r31, 0x09	; 9
     500:	ef 2e       	mov	r14, r31
     502:	f1 2c       	mov	r15, r1
     504:	ec 0e       	add	r14, r28
     506:	fd 1e       	adc	r15, r29
     508:	ce 01       	movw	r24, r28
     50a:	01 96       	adiw	r24, 0x01	; 1
     50c:	b7 01       	movw	r22, r14
     50e:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     512:	8e 01       	movw	r16, r28
     514:	0f 5e       	subi	r16, 0xEF	; 239
     516:	1f 4f       	sbci	r17, 0xFF	; 255
     518:	ce 01       	movw	r24, r28
     51a:	05 96       	adiw	r24, 0x05	; 5
     51c:	b8 01       	movw	r22, r16
     51e:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     522:	c7 01       	movw	r24, r14
     524:	b8 01       	movw	r22, r16
     526:	ae 01       	movw	r20, r28
     528:	47 5e       	subi	r20, 0xE7	; 231
     52a:	5f 4f       	sbci	r21, 0xFF	; 255
     52c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_fpadd_parts>
     530:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__pack_f>
     534:	a0 96       	adiw	r28, 0x20	; 32
     536:	e6 e0       	ldi	r30, 0x06	; 6
     538:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <__epilogue_restores__+0x18>

0000053c <__mulsf3>:
     53c:	a0 e2       	ldi	r26, 0x20	; 32
     53e:	b0 e0       	ldi	r27, 0x00	; 0
     540:	e4 ea       	ldi	r30, 0xA4	; 164
     542:	f2 e0       	ldi	r31, 0x02	; 2
     544:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <__prologue_saves__>
     548:	69 83       	std	Y+1, r22	; 0x01
     54a:	7a 83       	std	Y+2, r23	; 0x02
     54c:	8b 83       	std	Y+3, r24	; 0x03
     54e:	9c 83       	std	Y+4, r25	; 0x04
     550:	2d 83       	std	Y+5, r18	; 0x05
     552:	3e 83       	std	Y+6, r19	; 0x06
     554:	4f 83       	std	Y+7, r20	; 0x07
     556:	58 87       	std	Y+8, r21	; 0x08
     558:	ce 01       	movw	r24, r28
     55a:	01 96       	adiw	r24, 0x01	; 1
     55c:	be 01       	movw	r22, r28
     55e:	67 5f       	subi	r22, 0xF7	; 247
     560:	7f 4f       	sbci	r23, 0xFF	; 255
     562:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     566:	ce 01       	movw	r24, r28
     568:	05 96       	adiw	r24, 0x05	; 5
     56a:	be 01       	movw	r22, r28
     56c:	6f 5e       	subi	r22, 0xEF	; 239
     56e:	7f 4f       	sbci	r23, 0xFF	; 255
     570:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     574:	99 85       	ldd	r25, Y+9	; 0x09
     576:	92 30       	cpi	r25, 0x02	; 2
     578:	88 f0       	brcs	.+34     	; 0x59c <__mulsf3+0x60>
     57a:	89 89       	ldd	r24, Y+17	; 0x11
     57c:	82 30       	cpi	r24, 0x02	; 2
     57e:	c8 f0       	brcs	.+50     	; 0x5b2 <__mulsf3+0x76>
     580:	94 30       	cpi	r25, 0x04	; 4
     582:	19 f4       	brne	.+6      	; 0x58a <__mulsf3+0x4e>
     584:	82 30       	cpi	r24, 0x02	; 2
     586:	51 f4       	brne	.+20     	; 0x59c <__mulsf3+0x60>
     588:	04 c0       	rjmp	.+8      	; 0x592 <__mulsf3+0x56>
     58a:	84 30       	cpi	r24, 0x04	; 4
     58c:	29 f4       	brne	.+10     	; 0x598 <__mulsf3+0x5c>
     58e:	92 30       	cpi	r25, 0x02	; 2
     590:	81 f4       	brne	.+32     	; 0x5b2 <__mulsf3+0x76>
     592:	8a e7       	ldi	r24, 0x7A	; 122
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	c6 c0       	rjmp	.+396    	; 0x724 <__mulsf3+0x1e8>
     598:	92 30       	cpi	r25, 0x02	; 2
     59a:	49 f4       	brne	.+18     	; 0x5ae <__mulsf3+0x72>
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	9a 85       	ldd	r25, Y+10	; 0x0a
     5a0:	8a 89       	ldd	r24, Y+18	; 0x12
     5a2:	98 13       	cpse	r25, r24
     5a4:	21 e0       	ldi	r18, 0x01	; 1
     5a6:	2a 87       	std	Y+10, r18	; 0x0a
     5a8:	ce 01       	movw	r24, r28
     5aa:	09 96       	adiw	r24, 0x09	; 9
     5ac:	bb c0       	rjmp	.+374    	; 0x724 <__mulsf3+0x1e8>
     5ae:	82 30       	cpi	r24, 0x02	; 2
     5b0:	49 f4       	brne	.+18     	; 0x5c4 <__mulsf3+0x88>
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b6:	8a 89       	ldd	r24, Y+18	; 0x12
     5b8:	98 13       	cpse	r25, r24
     5ba:	21 e0       	ldi	r18, 0x01	; 1
     5bc:	2a 8b       	std	Y+18, r18	; 0x12
     5be:	ce 01       	movw	r24, r28
     5c0:	41 96       	adiw	r24, 0x11	; 17
     5c2:	b0 c0       	rjmp	.+352    	; 0x724 <__mulsf3+0x1e8>
     5c4:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c6:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c8:	4f 84       	ldd	r4, Y+15	; 0x0f
     5ca:	58 88       	ldd	r5, Y+16	; 0x10
     5cc:	6d 88       	ldd	r6, Y+21	; 0x15
     5ce:	7e 88       	ldd	r7, Y+22	; 0x16
     5d0:	8f 88       	ldd	r8, Y+23	; 0x17
     5d2:	98 8c       	ldd	r9, Y+24	; 0x18
     5d4:	ee 24       	eor	r14, r14
     5d6:	ff 24       	eor	r15, r15
     5d8:	87 01       	movw	r16, r14
     5da:	aa 24       	eor	r10, r10
     5dc:	bb 24       	eor	r11, r11
     5de:	65 01       	movw	r12, r10
     5e0:	40 e0       	ldi	r20, 0x00	; 0
     5e2:	50 e0       	ldi	r21, 0x00	; 0
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	e0 e0       	ldi	r30, 0x00	; 0
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	c1 01       	movw	r24, r2
     5ee:	81 70       	andi	r24, 0x01	; 1
     5f0:	90 70       	andi	r25, 0x00	; 0
     5f2:	89 2b       	or	r24, r25
     5f4:	e9 f0       	breq	.+58     	; 0x630 <__mulsf3+0xf4>
     5f6:	e6 0c       	add	r14, r6
     5f8:	f7 1c       	adc	r15, r7
     5fa:	08 1d       	adc	r16, r8
     5fc:	19 1d       	adc	r17, r9
     5fe:	9a 01       	movw	r18, r20
     600:	ab 01       	movw	r20, r22
     602:	2a 0d       	add	r18, r10
     604:	3b 1d       	adc	r19, r11
     606:	4c 1d       	adc	r20, r12
     608:	5d 1d       	adc	r21, r13
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	a0 e0       	ldi	r26, 0x00	; 0
     610:	b0 e0       	ldi	r27, 0x00	; 0
     612:	e6 14       	cp	r14, r6
     614:	f7 04       	cpc	r15, r7
     616:	08 05       	cpc	r16, r8
     618:	19 05       	cpc	r17, r9
     61a:	20 f4       	brcc	.+8      	; 0x624 <__mulsf3+0xe8>
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	a0 e0       	ldi	r26, 0x00	; 0
     622:	b0 e0       	ldi	r27, 0x00	; 0
     624:	ba 01       	movw	r22, r20
     626:	a9 01       	movw	r20, r18
     628:	48 0f       	add	r20, r24
     62a:	59 1f       	adc	r21, r25
     62c:	6a 1f       	adc	r22, r26
     62e:	7b 1f       	adc	r23, r27
     630:	aa 0c       	add	r10, r10
     632:	bb 1c       	adc	r11, r11
     634:	cc 1c       	adc	r12, r12
     636:	dd 1c       	adc	r13, r13
     638:	97 fe       	sbrs	r9, 7
     63a:	08 c0       	rjmp	.+16     	; 0x64c <__mulsf3+0x110>
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	a0 e0       	ldi	r26, 0x00	; 0
     642:	b0 e0       	ldi	r27, 0x00	; 0
     644:	a8 2a       	or	r10, r24
     646:	b9 2a       	or	r11, r25
     648:	ca 2a       	or	r12, r26
     64a:	db 2a       	or	r13, r27
     64c:	31 96       	adiw	r30, 0x01	; 1
     64e:	e0 32       	cpi	r30, 0x20	; 32
     650:	f1 05       	cpc	r31, r1
     652:	49 f0       	breq	.+18     	; 0x666 <__mulsf3+0x12a>
     654:	66 0c       	add	r6, r6
     656:	77 1c       	adc	r7, r7
     658:	88 1c       	adc	r8, r8
     65a:	99 1c       	adc	r9, r9
     65c:	56 94       	lsr	r5
     65e:	47 94       	ror	r4
     660:	37 94       	ror	r3
     662:	27 94       	ror	r2
     664:	c3 cf       	rjmp	.-122    	; 0x5ec <__mulsf3+0xb0>
     666:	fa 85       	ldd	r31, Y+10	; 0x0a
     668:	ea 89       	ldd	r30, Y+18	; 0x12
     66a:	2b 89       	ldd	r18, Y+19	; 0x13
     66c:	3c 89       	ldd	r19, Y+20	; 0x14
     66e:	8b 85       	ldd	r24, Y+11	; 0x0b
     670:	9c 85       	ldd	r25, Y+12	; 0x0c
     672:	28 0f       	add	r18, r24
     674:	39 1f       	adc	r19, r25
     676:	2e 5f       	subi	r18, 0xFE	; 254
     678:	3f 4f       	sbci	r19, 0xFF	; 255
     67a:	17 c0       	rjmp	.+46     	; 0x6aa <__mulsf3+0x16e>
     67c:	ca 01       	movw	r24, r20
     67e:	81 70       	andi	r24, 0x01	; 1
     680:	90 70       	andi	r25, 0x00	; 0
     682:	89 2b       	or	r24, r25
     684:	61 f0       	breq	.+24     	; 0x69e <__mulsf3+0x162>
     686:	16 95       	lsr	r17
     688:	07 95       	ror	r16
     68a:	f7 94       	ror	r15
     68c:	e7 94       	ror	r14
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	a0 e0       	ldi	r26, 0x00	; 0
     694:	b0 e8       	ldi	r27, 0x80	; 128
     696:	e8 2a       	or	r14, r24
     698:	f9 2a       	or	r15, r25
     69a:	0a 2b       	or	r16, r26
     69c:	1b 2b       	or	r17, r27
     69e:	76 95       	lsr	r23
     6a0:	67 95       	ror	r22
     6a2:	57 95       	ror	r21
     6a4:	47 95       	ror	r20
     6a6:	2f 5f       	subi	r18, 0xFF	; 255
     6a8:	3f 4f       	sbci	r19, 0xFF	; 255
     6aa:	77 fd       	sbrc	r23, 7
     6ac:	e7 cf       	rjmp	.-50     	; 0x67c <__mulsf3+0x140>
     6ae:	0c c0       	rjmp	.+24     	; 0x6c8 <__mulsf3+0x18c>
     6b0:	44 0f       	add	r20, r20
     6b2:	55 1f       	adc	r21, r21
     6b4:	66 1f       	adc	r22, r22
     6b6:	77 1f       	adc	r23, r23
     6b8:	17 fd       	sbrc	r17, 7
     6ba:	41 60       	ori	r20, 0x01	; 1
     6bc:	ee 0c       	add	r14, r14
     6be:	ff 1c       	adc	r15, r15
     6c0:	00 1f       	adc	r16, r16
     6c2:	11 1f       	adc	r17, r17
     6c4:	21 50       	subi	r18, 0x01	; 1
     6c6:	30 40       	sbci	r19, 0x00	; 0
     6c8:	40 30       	cpi	r20, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	59 07       	cpc	r21, r25
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	69 07       	cpc	r22, r25
     6d2:	90 e4       	ldi	r25, 0x40	; 64
     6d4:	79 07       	cpc	r23, r25
     6d6:	60 f3       	brcs	.-40     	; 0x6b0 <__mulsf3+0x174>
     6d8:	2b 8f       	std	Y+27, r18	; 0x1b
     6da:	3c 8f       	std	Y+28, r19	; 0x1c
     6dc:	db 01       	movw	r26, r22
     6de:	ca 01       	movw	r24, r20
     6e0:	8f 77       	andi	r24, 0x7F	; 127
     6e2:	90 70       	andi	r25, 0x00	; 0
     6e4:	a0 70       	andi	r26, 0x00	; 0
     6e6:	b0 70       	andi	r27, 0x00	; 0
     6e8:	80 34       	cpi	r24, 0x40	; 64
     6ea:	91 05       	cpc	r25, r1
     6ec:	a1 05       	cpc	r26, r1
     6ee:	b1 05       	cpc	r27, r1
     6f0:	61 f4       	brne	.+24     	; 0x70a <__mulsf3+0x1ce>
     6f2:	47 fd       	sbrc	r20, 7
     6f4:	0a c0       	rjmp	.+20     	; 0x70a <__mulsf3+0x1ce>
     6f6:	e1 14       	cp	r14, r1
     6f8:	f1 04       	cpc	r15, r1
     6fa:	01 05       	cpc	r16, r1
     6fc:	11 05       	cpc	r17, r1
     6fe:	29 f0       	breq	.+10     	; 0x70a <__mulsf3+0x1ce>
     700:	40 5c       	subi	r20, 0xC0	; 192
     702:	5f 4f       	sbci	r21, 0xFF	; 255
     704:	6f 4f       	sbci	r22, 0xFF	; 255
     706:	7f 4f       	sbci	r23, 0xFF	; 255
     708:	40 78       	andi	r20, 0x80	; 128
     70a:	1a 8e       	std	Y+26, r1	; 0x1a
     70c:	fe 17       	cp	r31, r30
     70e:	11 f0       	breq	.+4      	; 0x714 <__mulsf3+0x1d8>
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	8a 8f       	std	Y+26, r24	; 0x1a
     714:	4d 8f       	std	Y+29, r20	; 0x1d
     716:	5e 8f       	std	Y+30, r21	; 0x1e
     718:	6f 8f       	std	Y+31, r22	; 0x1f
     71a:	78 a3       	std	Y+32, r23	; 0x20
     71c:	83 e0       	ldi	r24, 0x03	; 3
     71e:	89 8f       	std	Y+25, r24	; 0x19
     720:	ce 01       	movw	r24, r28
     722:	49 96       	adiw	r24, 0x19	; 25
     724:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__pack_f>
     728:	a0 96       	adiw	r28, 0x20	; 32
     72a:	e2 e1       	ldi	r30, 0x12	; 18
     72c:	0c 94 f8 1e 	jmp	0x3df0	; 0x3df0 <__epilogue_restores__>

00000730 <__divsf3>:
     730:	a8 e1       	ldi	r26, 0x18	; 24
     732:	b0 e0       	ldi	r27, 0x00	; 0
     734:	ee e9       	ldi	r30, 0x9E	; 158
     736:	f3 e0       	ldi	r31, 0x03	; 3
     738:	0c 94 e4 1e 	jmp	0x3dc8	; 0x3dc8 <__prologue_saves__+0x10>
     73c:	69 83       	std	Y+1, r22	; 0x01
     73e:	7a 83       	std	Y+2, r23	; 0x02
     740:	8b 83       	std	Y+3, r24	; 0x03
     742:	9c 83       	std	Y+4, r25	; 0x04
     744:	2d 83       	std	Y+5, r18	; 0x05
     746:	3e 83       	std	Y+6, r19	; 0x06
     748:	4f 83       	std	Y+7, r20	; 0x07
     74a:	58 87       	std	Y+8, r21	; 0x08
     74c:	b9 e0       	ldi	r27, 0x09	; 9
     74e:	eb 2e       	mov	r14, r27
     750:	f1 2c       	mov	r15, r1
     752:	ec 0e       	add	r14, r28
     754:	fd 1e       	adc	r15, r29
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	b7 01       	movw	r22, r14
     75c:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     760:	8e 01       	movw	r16, r28
     762:	0f 5e       	subi	r16, 0xEF	; 239
     764:	1f 4f       	sbci	r17, 0xFF	; 255
     766:	ce 01       	movw	r24, r28
     768:	05 96       	adiw	r24, 0x05	; 5
     76a:	b8 01       	movw	r22, r16
     76c:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     770:	29 85       	ldd	r18, Y+9	; 0x09
     772:	22 30       	cpi	r18, 0x02	; 2
     774:	08 f4       	brcc	.+2      	; 0x778 <__divsf3+0x48>
     776:	7e c0       	rjmp	.+252    	; 0x874 <__stack+0x15>
     778:	39 89       	ldd	r19, Y+17	; 0x11
     77a:	32 30       	cpi	r19, 0x02	; 2
     77c:	10 f4       	brcc	.+4      	; 0x782 <__divsf3+0x52>
     77e:	b8 01       	movw	r22, r16
     780:	7c c0       	rjmp	.+248    	; 0x87a <__stack+0x1b>
     782:	8a 85       	ldd	r24, Y+10	; 0x0a
     784:	9a 89       	ldd	r25, Y+18	; 0x12
     786:	89 27       	eor	r24, r25
     788:	8a 87       	std	Y+10, r24	; 0x0a
     78a:	24 30       	cpi	r18, 0x04	; 4
     78c:	11 f0       	breq	.+4      	; 0x792 <__divsf3+0x62>
     78e:	22 30       	cpi	r18, 0x02	; 2
     790:	31 f4       	brne	.+12     	; 0x79e <__divsf3+0x6e>
     792:	23 17       	cp	r18, r19
     794:	09 f0       	breq	.+2      	; 0x798 <__divsf3+0x68>
     796:	6e c0       	rjmp	.+220    	; 0x874 <__stack+0x15>
     798:	6a e7       	ldi	r22, 0x7A	; 122
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	6e c0       	rjmp	.+220    	; 0x87a <__stack+0x1b>
     79e:	34 30       	cpi	r19, 0x04	; 4
     7a0:	39 f4       	brne	.+14     	; 0x7b0 <__divsf3+0x80>
     7a2:	1d 86       	std	Y+13, r1	; 0x0d
     7a4:	1e 86       	std	Y+14, r1	; 0x0e
     7a6:	1f 86       	std	Y+15, r1	; 0x0f
     7a8:	18 8a       	std	Y+16, r1	; 0x10
     7aa:	1c 86       	std	Y+12, r1	; 0x0c
     7ac:	1b 86       	std	Y+11, r1	; 0x0b
     7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <__divsf3+0x88>
     7b0:	32 30       	cpi	r19, 0x02	; 2
     7b2:	21 f4       	brne	.+8      	; 0x7bc <__divsf3+0x8c>
     7b4:	84 e0       	ldi	r24, 0x04	; 4
     7b6:	89 87       	std	Y+9, r24	; 0x09
     7b8:	b7 01       	movw	r22, r14
     7ba:	5f c0       	rjmp	.+190    	; 0x87a <__stack+0x1b>
     7bc:	2b 85       	ldd	r18, Y+11	; 0x0b
     7be:	3c 85       	ldd	r19, Y+12	; 0x0c
     7c0:	8b 89       	ldd	r24, Y+19	; 0x13
     7c2:	9c 89       	ldd	r25, Y+20	; 0x14
     7c4:	28 1b       	sub	r18, r24
     7c6:	39 0b       	sbc	r19, r25
     7c8:	3c 87       	std	Y+12, r19	; 0x0c
     7ca:	2b 87       	std	Y+11, r18	; 0x0b
     7cc:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ce:	fe 84       	ldd	r15, Y+14	; 0x0e
     7d0:	0f 85       	ldd	r16, Y+15	; 0x0f
     7d2:	18 89       	ldd	r17, Y+16	; 0x10
     7d4:	ad 88       	ldd	r10, Y+21	; 0x15
     7d6:	be 88       	ldd	r11, Y+22	; 0x16
     7d8:	cf 88       	ldd	r12, Y+23	; 0x17
     7da:	d8 8c       	ldd	r13, Y+24	; 0x18
     7dc:	ea 14       	cp	r14, r10
     7de:	fb 04       	cpc	r15, r11
     7e0:	0c 05       	cpc	r16, r12
     7e2:	1d 05       	cpc	r17, r13
     7e4:	40 f4       	brcc	.+16     	; 0x7f6 <__divsf3+0xc6>
     7e6:	ee 0c       	add	r14, r14
     7e8:	ff 1c       	adc	r15, r15
     7ea:	00 1f       	adc	r16, r16
     7ec:	11 1f       	adc	r17, r17
     7ee:	21 50       	subi	r18, 0x01	; 1
     7f0:	30 40       	sbci	r19, 0x00	; 0
     7f2:	3c 87       	std	Y+12, r19	; 0x0c
     7f4:	2b 87       	std	Y+11, r18	; 0x0b
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	40 e0       	ldi	r20, 0x00	; 0
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	a0 e0       	ldi	r26, 0x00	; 0
     804:	b0 e4       	ldi	r27, 0x40	; 64
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	ea 14       	cp	r14, r10
     80c:	fb 04       	cpc	r15, r11
     80e:	0c 05       	cpc	r16, r12
     810:	1d 05       	cpc	r17, r13
     812:	40 f0       	brcs	.+16     	; 0x824 <__divsf3+0xf4>
     814:	28 2b       	or	r18, r24
     816:	39 2b       	or	r19, r25
     818:	4a 2b       	or	r20, r26
     81a:	5b 2b       	or	r21, r27
     81c:	ea 18       	sub	r14, r10
     81e:	fb 08       	sbc	r15, r11
     820:	0c 09       	sbc	r16, r12
     822:	1d 09       	sbc	r17, r13
     824:	b6 95       	lsr	r27
     826:	a7 95       	ror	r26
     828:	97 95       	ror	r25
     82a:	87 95       	ror	r24
     82c:	ee 0c       	add	r14, r14
     82e:	ff 1c       	adc	r15, r15
     830:	00 1f       	adc	r16, r16
     832:	11 1f       	adc	r17, r17
     834:	6f 5f       	subi	r22, 0xFF	; 255
     836:	7f 4f       	sbci	r23, 0xFF	; 255
     838:	6f 31       	cpi	r22, 0x1F	; 31
     83a:	71 05       	cpc	r23, r1
     83c:	31 f7       	brne	.-52     	; 0x80a <__divsf3+0xda>
     83e:	da 01       	movw	r26, r20
     840:	c9 01       	movw	r24, r18
     842:	8f 77       	andi	r24, 0x7F	; 127
     844:	90 70       	andi	r25, 0x00	; 0
     846:	a0 70       	andi	r26, 0x00	; 0
     848:	b0 70       	andi	r27, 0x00	; 0
     84a:	80 34       	cpi	r24, 0x40	; 64
     84c:	91 05       	cpc	r25, r1
     84e:	a1 05       	cpc	r26, r1
     850:	b1 05       	cpc	r27, r1
     852:	61 f4       	brne	.+24     	; 0x86c <__stack+0xd>
     854:	27 fd       	sbrc	r18, 7
     856:	0a c0       	rjmp	.+20     	; 0x86c <__stack+0xd>
     858:	e1 14       	cp	r14, r1
     85a:	f1 04       	cpc	r15, r1
     85c:	01 05       	cpc	r16, r1
     85e:	11 05       	cpc	r17, r1
     860:	29 f0       	breq	.+10     	; 0x86c <__stack+0xd>
     862:	20 5c       	subi	r18, 0xC0	; 192
     864:	3f 4f       	sbci	r19, 0xFF	; 255
     866:	4f 4f       	sbci	r20, 0xFF	; 255
     868:	5f 4f       	sbci	r21, 0xFF	; 255
     86a:	20 78       	andi	r18, 0x80	; 128
     86c:	2d 87       	std	Y+13, r18	; 0x0d
     86e:	3e 87       	std	Y+14, r19	; 0x0e
     870:	4f 87       	std	Y+15, r20	; 0x0f
     872:	58 8b       	std	Y+16, r21	; 0x10
     874:	be 01       	movw	r22, r28
     876:	67 5f       	subi	r22, 0xF7	; 247
     878:	7f 4f       	sbci	r23, 0xFF	; 255
     87a:	cb 01       	movw	r24, r22
     87c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__pack_f>
     880:	68 96       	adiw	r28, 0x18	; 24
     882:	ea e0       	ldi	r30, 0x0A	; 10
     884:	0c 94 00 1f 	jmp	0x3e00	; 0x3e00 <__epilogue_restores__+0x10>

00000888 <__gtsf2>:
     888:	a8 e1       	ldi	r26, 0x18	; 24
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	ea e4       	ldi	r30, 0x4A	; 74
     88e:	f4 e0       	ldi	r31, 0x04	; 4
     890:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <__prologue_saves__+0x18>
     894:	69 83       	std	Y+1, r22	; 0x01
     896:	7a 83       	std	Y+2, r23	; 0x02
     898:	8b 83       	std	Y+3, r24	; 0x03
     89a:	9c 83       	std	Y+4, r25	; 0x04
     89c:	2d 83       	std	Y+5, r18	; 0x05
     89e:	3e 83       	std	Y+6, r19	; 0x06
     8a0:	4f 83       	std	Y+7, r20	; 0x07
     8a2:	58 87       	std	Y+8, r21	; 0x08
     8a4:	89 e0       	ldi	r24, 0x09	; 9
     8a6:	e8 2e       	mov	r14, r24
     8a8:	f1 2c       	mov	r15, r1
     8aa:	ec 0e       	add	r14, r28
     8ac:	fd 1e       	adc	r15, r29
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	b7 01       	movw	r22, r14
     8b4:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     8b8:	8e 01       	movw	r16, r28
     8ba:	0f 5e       	subi	r16, 0xEF	; 239
     8bc:	1f 4f       	sbci	r17, 0xFF	; 255
     8be:	ce 01       	movw	r24, r28
     8c0:	05 96       	adiw	r24, 0x05	; 5
     8c2:	b8 01       	movw	r22, r16
     8c4:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     8c8:	89 85       	ldd	r24, Y+9	; 0x09
     8ca:	82 30       	cpi	r24, 0x02	; 2
     8cc:	40 f0       	brcs	.+16     	; 0x8de <__gtsf2+0x56>
     8ce:	89 89       	ldd	r24, Y+17	; 0x11
     8d0:	82 30       	cpi	r24, 0x02	; 2
     8d2:	28 f0       	brcs	.+10     	; 0x8de <__gtsf2+0x56>
     8d4:	c7 01       	movw	r24, r14
     8d6:	b8 01       	movw	r22, r16
     8d8:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fpcmp_parts_f>
     8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <__gtsf2+0x58>
     8de:	8f ef       	ldi	r24, 0xFF	; 255
     8e0:	68 96       	adiw	r28, 0x18	; 24
     8e2:	e6 e0       	ldi	r30, 0x06	; 6
     8e4:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <__epilogue_restores__+0x18>

000008e8 <__gesf2>:
     8e8:	a8 e1       	ldi	r26, 0x18	; 24
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	ea e7       	ldi	r30, 0x7A	; 122
     8ee:	f4 e0       	ldi	r31, 0x04	; 4
     8f0:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <__prologue_saves__+0x18>
     8f4:	69 83       	std	Y+1, r22	; 0x01
     8f6:	7a 83       	std	Y+2, r23	; 0x02
     8f8:	8b 83       	std	Y+3, r24	; 0x03
     8fa:	9c 83       	std	Y+4, r25	; 0x04
     8fc:	2d 83       	std	Y+5, r18	; 0x05
     8fe:	3e 83       	std	Y+6, r19	; 0x06
     900:	4f 83       	std	Y+7, r20	; 0x07
     902:	58 87       	std	Y+8, r21	; 0x08
     904:	89 e0       	ldi	r24, 0x09	; 9
     906:	e8 2e       	mov	r14, r24
     908:	f1 2c       	mov	r15, r1
     90a:	ec 0e       	add	r14, r28
     90c:	fd 1e       	adc	r15, r29
     90e:	ce 01       	movw	r24, r28
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	b7 01       	movw	r22, r14
     914:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     918:	8e 01       	movw	r16, r28
     91a:	0f 5e       	subi	r16, 0xEF	; 239
     91c:	1f 4f       	sbci	r17, 0xFF	; 255
     91e:	ce 01       	movw	r24, r28
     920:	05 96       	adiw	r24, 0x05	; 5
     922:	b8 01       	movw	r22, r16
     924:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     928:	89 85       	ldd	r24, Y+9	; 0x09
     92a:	82 30       	cpi	r24, 0x02	; 2
     92c:	40 f0       	brcs	.+16     	; 0x93e <__gesf2+0x56>
     92e:	89 89       	ldd	r24, Y+17	; 0x11
     930:	82 30       	cpi	r24, 0x02	; 2
     932:	28 f0       	brcs	.+10     	; 0x93e <__gesf2+0x56>
     934:	c7 01       	movw	r24, r14
     936:	b8 01       	movw	r22, r16
     938:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fpcmp_parts_f>
     93c:	01 c0       	rjmp	.+2      	; 0x940 <__gesf2+0x58>
     93e:	8f ef       	ldi	r24, 0xFF	; 255
     940:	68 96       	adiw	r28, 0x18	; 24
     942:	e6 e0       	ldi	r30, 0x06	; 6
     944:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <__epilogue_restores__+0x18>

00000948 <__ltsf2>:
     948:	a8 e1       	ldi	r26, 0x18	; 24
     94a:	b0 e0       	ldi	r27, 0x00	; 0
     94c:	ea ea       	ldi	r30, 0xAA	; 170
     94e:	f4 e0       	ldi	r31, 0x04	; 4
     950:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <__prologue_saves__+0x18>
     954:	69 83       	std	Y+1, r22	; 0x01
     956:	7a 83       	std	Y+2, r23	; 0x02
     958:	8b 83       	std	Y+3, r24	; 0x03
     95a:	9c 83       	std	Y+4, r25	; 0x04
     95c:	2d 83       	std	Y+5, r18	; 0x05
     95e:	3e 83       	std	Y+6, r19	; 0x06
     960:	4f 83       	std	Y+7, r20	; 0x07
     962:	58 87       	std	Y+8, r21	; 0x08
     964:	89 e0       	ldi	r24, 0x09	; 9
     966:	e8 2e       	mov	r14, r24
     968:	f1 2c       	mov	r15, r1
     96a:	ec 0e       	add	r14, r28
     96c:	fd 1e       	adc	r15, r29
     96e:	ce 01       	movw	r24, r28
     970:	01 96       	adiw	r24, 0x01	; 1
     972:	b7 01       	movw	r22, r14
     974:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     978:	8e 01       	movw	r16, r28
     97a:	0f 5e       	subi	r16, 0xEF	; 239
     97c:	1f 4f       	sbci	r17, 0xFF	; 255
     97e:	ce 01       	movw	r24, r28
     980:	05 96       	adiw	r24, 0x05	; 5
     982:	b8 01       	movw	r22, r16
     984:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     988:	89 85       	ldd	r24, Y+9	; 0x09
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	40 f0       	brcs	.+16     	; 0x99e <__ltsf2+0x56>
     98e:	89 89       	ldd	r24, Y+17	; 0x11
     990:	82 30       	cpi	r24, 0x02	; 2
     992:	28 f0       	brcs	.+10     	; 0x99e <__ltsf2+0x56>
     994:	c7 01       	movw	r24, r14
     996:	b8 01       	movw	r22, r16
     998:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fpcmp_parts_f>
     99c:	01 c0       	rjmp	.+2      	; 0x9a0 <__ltsf2+0x58>
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	68 96       	adiw	r28, 0x18	; 24
     9a2:	e6 e0       	ldi	r30, 0x06	; 6
     9a4:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <__epilogue_restores__+0x18>

000009a8 <__floatsisf>:
     9a8:	a8 e0       	ldi	r26, 0x08	; 8
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	ea ed       	ldi	r30, 0xDA	; 218
     9ae:	f4 e0       	ldi	r31, 0x04	; 4
     9b0:	0c 94 e5 1e 	jmp	0x3dca	; 0x3dca <__prologue_saves__+0x12>
     9b4:	9b 01       	movw	r18, r22
     9b6:	ac 01       	movw	r20, r24
     9b8:	83 e0       	ldi	r24, 0x03	; 3
     9ba:	89 83       	std	Y+1, r24	; 0x01
     9bc:	da 01       	movw	r26, r20
     9be:	c9 01       	movw	r24, r18
     9c0:	88 27       	eor	r24, r24
     9c2:	b7 fd       	sbrc	r27, 7
     9c4:	83 95       	inc	r24
     9c6:	99 27       	eor	r25, r25
     9c8:	aa 27       	eor	r26, r26
     9ca:	bb 27       	eor	r27, r27
     9cc:	b8 2e       	mov	r11, r24
     9ce:	21 15       	cp	r18, r1
     9d0:	31 05       	cpc	r19, r1
     9d2:	41 05       	cpc	r20, r1
     9d4:	51 05       	cpc	r21, r1
     9d6:	19 f4       	brne	.+6      	; 0x9de <__floatsisf+0x36>
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	89 83       	std	Y+1, r24	; 0x01
     9dc:	3a c0       	rjmp	.+116    	; 0xa52 <__floatsisf+0xaa>
     9de:	88 23       	and	r24, r24
     9e0:	a9 f0       	breq	.+42     	; 0xa0c <__floatsisf+0x64>
     9e2:	20 30       	cpi	r18, 0x00	; 0
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	38 07       	cpc	r19, r24
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	48 07       	cpc	r20, r24
     9ec:	80 e8       	ldi	r24, 0x80	; 128
     9ee:	58 07       	cpc	r21, r24
     9f0:	29 f4       	brne	.+10     	; 0x9fc <__floatsisf+0x54>
     9f2:	60 e0       	ldi	r22, 0x00	; 0
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	9f ec       	ldi	r25, 0xCF	; 207
     9fa:	30 c0       	rjmp	.+96     	; 0xa5c <__floatsisf+0xb4>
     9fc:	ee 24       	eor	r14, r14
     9fe:	ff 24       	eor	r15, r15
     a00:	87 01       	movw	r16, r14
     a02:	e2 1a       	sub	r14, r18
     a04:	f3 0a       	sbc	r15, r19
     a06:	04 0b       	sbc	r16, r20
     a08:	15 0b       	sbc	r17, r21
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <__floatsisf+0x68>
     a0c:	79 01       	movw	r14, r18
     a0e:	8a 01       	movw	r16, r20
     a10:	8e e1       	ldi	r24, 0x1E	; 30
     a12:	c8 2e       	mov	r12, r24
     a14:	d1 2c       	mov	r13, r1
     a16:	dc 82       	std	Y+4, r13	; 0x04
     a18:	cb 82       	std	Y+3, r12	; 0x03
     a1a:	ed 82       	std	Y+5, r14	; 0x05
     a1c:	fe 82       	std	Y+6, r15	; 0x06
     a1e:	0f 83       	std	Y+7, r16	; 0x07
     a20:	18 87       	std	Y+8, r17	; 0x08
     a22:	c8 01       	movw	r24, r16
     a24:	b7 01       	movw	r22, r14
     a26:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__clzsi2>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	18 16       	cp	r1, r24
     a2e:	19 06       	cpc	r1, r25
     a30:	84 f4       	brge	.+32     	; 0xa52 <__floatsisf+0xaa>
     a32:	08 2e       	mov	r0, r24
     a34:	04 c0       	rjmp	.+8      	; 0xa3e <__floatsisf+0x96>
     a36:	ee 0c       	add	r14, r14
     a38:	ff 1c       	adc	r15, r15
     a3a:	00 1f       	adc	r16, r16
     a3c:	11 1f       	adc	r17, r17
     a3e:	0a 94       	dec	r0
     a40:	d2 f7       	brpl	.-12     	; 0xa36 <__floatsisf+0x8e>
     a42:	ed 82       	std	Y+5, r14	; 0x05
     a44:	fe 82       	std	Y+6, r15	; 0x06
     a46:	0f 83       	std	Y+7, r16	; 0x07
     a48:	18 87       	std	Y+8, r17	; 0x08
     a4a:	c8 1a       	sub	r12, r24
     a4c:	d9 0a       	sbc	r13, r25
     a4e:	dc 82       	std	Y+4, r13	; 0x04
     a50:	cb 82       	std	Y+3, r12	; 0x03
     a52:	ba 82       	std	Y+2, r11	; 0x02
     a54:	ce 01       	movw	r24, r28
     a56:	01 96       	adiw	r24, 0x01	; 1
     a58:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__pack_f>
     a5c:	28 96       	adiw	r28, 0x08	; 8
     a5e:	e9 e0       	ldi	r30, 0x09	; 9
     a60:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <__epilogue_restores__+0x12>

00000a64 <__fixsfsi>:
     a64:	ac e0       	ldi	r26, 0x0C	; 12
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	e8 e3       	ldi	r30, 0x38	; 56
     a6a:	f5 e0       	ldi	r31, 0x05	; 5
     a6c:	0c 94 ec 1e 	jmp	0x3dd8	; 0x3dd8 <__prologue_saves__+0x20>
     a70:	69 83       	std	Y+1, r22	; 0x01
     a72:	7a 83       	std	Y+2, r23	; 0x02
     a74:	8b 83       	std	Y+3, r24	; 0x03
     a76:	9c 83       	std	Y+4, r25	; 0x04
     a78:	ce 01       	movw	r24, r28
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	be 01       	movw	r22, r28
     a7e:	6b 5f       	subi	r22, 0xFB	; 251
     a80:	7f 4f       	sbci	r23, 0xFF	; 255
     a82:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     a86:	8d 81       	ldd	r24, Y+5	; 0x05
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	61 f1       	breq	.+88     	; 0xae4 <__fixsfsi+0x80>
     a8c:	82 30       	cpi	r24, 0x02	; 2
     a8e:	50 f1       	brcs	.+84     	; 0xae4 <__fixsfsi+0x80>
     a90:	84 30       	cpi	r24, 0x04	; 4
     a92:	21 f4       	brne	.+8      	; 0xa9c <__fixsfsi+0x38>
     a94:	8e 81       	ldd	r24, Y+6	; 0x06
     a96:	88 23       	and	r24, r24
     a98:	51 f1       	breq	.+84     	; 0xaee <__fixsfsi+0x8a>
     a9a:	2e c0       	rjmp	.+92     	; 0xaf8 <__fixsfsi+0x94>
     a9c:	2f 81       	ldd	r18, Y+7	; 0x07
     a9e:	38 85       	ldd	r19, Y+8	; 0x08
     aa0:	37 fd       	sbrc	r19, 7
     aa2:	20 c0       	rjmp	.+64     	; 0xae4 <__fixsfsi+0x80>
     aa4:	6e 81       	ldd	r22, Y+6	; 0x06
     aa6:	2f 31       	cpi	r18, 0x1F	; 31
     aa8:	31 05       	cpc	r19, r1
     aaa:	1c f0       	brlt	.+6      	; 0xab2 <__fixsfsi+0x4e>
     aac:	66 23       	and	r22, r22
     aae:	f9 f0       	breq	.+62     	; 0xaee <__fixsfsi+0x8a>
     ab0:	23 c0       	rjmp	.+70     	; 0xaf8 <__fixsfsi+0x94>
     ab2:	8e e1       	ldi	r24, 0x1E	; 30
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	82 1b       	sub	r24, r18
     ab8:	93 0b       	sbc	r25, r19
     aba:	29 85       	ldd	r18, Y+9	; 0x09
     abc:	3a 85       	ldd	r19, Y+10	; 0x0a
     abe:	4b 85       	ldd	r20, Y+11	; 0x0b
     ac0:	5c 85       	ldd	r21, Y+12	; 0x0c
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__fixsfsi+0x68>
     ac4:	56 95       	lsr	r21
     ac6:	47 95       	ror	r20
     ac8:	37 95       	ror	r19
     aca:	27 95       	ror	r18
     acc:	8a 95       	dec	r24
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__fixsfsi+0x60>
     ad0:	66 23       	and	r22, r22
     ad2:	b1 f0       	breq	.+44     	; 0xb00 <__fixsfsi+0x9c>
     ad4:	50 95       	com	r21
     ad6:	40 95       	com	r20
     ad8:	30 95       	com	r19
     ada:	21 95       	neg	r18
     adc:	3f 4f       	sbci	r19, 0xFF	; 255
     ade:	4f 4f       	sbci	r20, 0xFF	; 255
     ae0:	5f 4f       	sbci	r21, 0xFF	; 255
     ae2:	0e c0       	rjmp	.+28     	; 0xb00 <__fixsfsi+0x9c>
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	09 c0       	rjmp	.+18     	; 0xb00 <__fixsfsi+0x9c>
     aee:	2f ef       	ldi	r18, 0xFF	; 255
     af0:	3f ef       	ldi	r19, 0xFF	; 255
     af2:	4f ef       	ldi	r20, 0xFF	; 255
     af4:	5f e7       	ldi	r21, 0x7F	; 127
     af6:	04 c0       	rjmp	.+8      	; 0xb00 <__fixsfsi+0x9c>
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	50 e8       	ldi	r21, 0x80	; 128
     b00:	b9 01       	movw	r22, r18
     b02:	ca 01       	movw	r24, r20
     b04:	2c 96       	adiw	r28, 0x0c	; 12
     b06:	e2 e0       	ldi	r30, 0x02	; 2
     b08:	0c 94 08 1f 	jmp	0x3e10	; 0x3e10 <__epilogue_restores__+0x20>

00000b0c <__floatunsisf>:
     b0c:	a8 e0       	ldi	r26, 0x08	; 8
     b0e:	b0 e0       	ldi	r27, 0x00	; 0
     b10:	ec e8       	ldi	r30, 0x8C	; 140
     b12:	f5 e0       	ldi	r31, 0x05	; 5
     b14:	0c 94 e4 1e 	jmp	0x3dc8	; 0x3dc8 <__prologue_saves__+0x10>
     b18:	7b 01       	movw	r14, r22
     b1a:	8c 01       	movw	r16, r24
     b1c:	61 15       	cp	r22, r1
     b1e:	71 05       	cpc	r23, r1
     b20:	81 05       	cpc	r24, r1
     b22:	91 05       	cpc	r25, r1
     b24:	19 f4       	brne	.+6      	; 0xb2c <__floatunsisf+0x20>
     b26:	82 e0       	ldi	r24, 0x02	; 2
     b28:	89 83       	std	Y+1, r24	; 0x01
     b2a:	60 c0       	rjmp	.+192    	; 0xbec <__floatunsisf+0xe0>
     b2c:	83 e0       	ldi	r24, 0x03	; 3
     b2e:	89 83       	std	Y+1, r24	; 0x01
     b30:	8e e1       	ldi	r24, 0x1E	; 30
     b32:	c8 2e       	mov	r12, r24
     b34:	d1 2c       	mov	r13, r1
     b36:	dc 82       	std	Y+4, r13	; 0x04
     b38:	cb 82       	std	Y+3, r12	; 0x03
     b3a:	ed 82       	std	Y+5, r14	; 0x05
     b3c:	fe 82       	std	Y+6, r15	; 0x06
     b3e:	0f 83       	std	Y+7, r16	; 0x07
     b40:	18 87       	std	Y+8, r17	; 0x08
     b42:	c8 01       	movw	r24, r16
     b44:	b7 01       	movw	r22, r14
     b46:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__clzsi2>
     b4a:	fc 01       	movw	r30, r24
     b4c:	31 97       	sbiw	r30, 0x01	; 1
     b4e:	f7 ff       	sbrs	r31, 7
     b50:	3b c0       	rjmp	.+118    	; 0xbc8 <__floatunsisf+0xbc>
     b52:	22 27       	eor	r18, r18
     b54:	33 27       	eor	r19, r19
     b56:	2e 1b       	sub	r18, r30
     b58:	3f 0b       	sbc	r19, r31
     b5a:	57 01       	movw	r10, r14
     b5c:	68 01       	movw	r12, r16
     b5e:	02 2e       	mov	r0, r18
     b60:	04 c0       	rjmp	.+8      	; 0xb6a <__floatunsisf+0x5e>
     b62:	d6 94       	lsr	r13
     b64:	c7 94       	ror	r12
     b66:	b7 94       	ror	r11
     b68:	a7 94       	ror	r10
     b6a:	0a 94       	dec	r0
     b6c:	d2 f7       	brpl	.-12     	; 0xb62 <__floatunsisf+0x56>
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	a0 e0       	ldi	r26, 0x00	; 0
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	04 c0       	rjmp	.+8      	; 0xb88 <__floatunsisf+0x7c>
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	aa 1f       	adc	r26, r26
     b86:	bb 1f       	adc	r27, r27
     b88:	2a 95       	dec	r18
     b8a:	d2 f7       	brpl	.-12     	; 0xb80 <__floatunsisf+0x74>
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	a1 09       	sbc	r26, r1
     b90:	b1 09       	sbc	r27, r1
     b92:	8e 21       	and	r24, r14
     b94:	9f 21       	and	r25, r15
     b96:	a0 23       	and	r26, r16
     b98:	b1 23       	and	r27, r17
     b9a:	00 97       	sbiw	r24, 0x00	; 0
     b9c:	a1 05       	cpc	r26, r1
     b9e:	b1 05       	cpc	r27, r1
     ba0:	21 f0       	breq	.+8      	; 0xbaa <__floatunsisf+0x9e>
     ba2:	41 e0       	ldi	r20, 0x01	; 1
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	4a 29       	or	r20, r10
     bac:	5b 29       	or	r21, r11
     bae:	6c 29       	or	r22, r12
     bb0:	7d 29       	or	r23, r13
     bb2:	4d 83       	std	Y+5, r20	; 0x05
     bb4:	5e 83       	std	Y+6, r21	; 0x06
     bb6:	6f 83       	std	Y+7, r22	; 0x07
     bb8:	78 87       	std	Y+8, r23	; 0x08
     bba:	8e e1       	ldi	r24, 0x1E	; 30
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	8e 1b       	sub	r24, r30
     bc0:	9f 0b       	sbc	r25, r31
     bc2:	9c 83       	std	Y+4, r25	; 0x04
     bc4:	8b 83       	std	Y+3, r24	; 0x03
     bc6:	12 c0       	rjmp	.+36     	; 0xbec <__floatunsisf+0xe0>
     bc8:	30 97       	sbiw	r30, 0x00	; 0
     bca:	81 f0       	breq	.+32     	; 0xbec <__floatunsisf+0xe0>
     bcc:	0e 2e       	mov	r0, r30
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__floatunsisf+0xcc>
     bd0:	ee 0c       	add	r14, r14
     bd2:	ff 1c       	adc	r15, r15
     bd4:	00 1f       	adc	r16, r16
     bd6:	11 1f       	adc	r17, r17
     bd8:	0a 94       	dec	r0
     bda:	d2 f7       	brpl	.-12     	; 0xbd0 <__floatunsisf+0xc4>
     bdc:	ed 82       	std	Y+5, r14	; 0x05
     bde:	fe 82       	std	Y+6, r15	; 0x06
     be0:	0f 83       	std	Y+7, r16	; 0x07
     be2:	18 87       	std	Y+8, r17	; 0x08
     be4:	ce 1a       	sub	r12, r30
     be6:	df 0a       	sbc	r13, r31
     be8:	dc 82       	std	Y+4, r13	; 0x04
     bea:	cb 82       	std	Y+3, r12	; 0x03
     bec:	1a 82       	std	Y+2, r1	; 0x02
     bee:	ce 01       	movw	r24, r28
     bf0:	01 96       	adiw	r24, 0x01	; 1
     bf2:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__pack_f>
     bf6:	28 96       	adiw	r28, 0x08	; 8
     bf8:	ea e0       	ldi	r30, 0x0A	; 10
     bfa:	0c 94 00 1f 	jmp	0x3e00	; 0x3e00 <__epilogue_restores__+0x10>

00000bfe <__clzsi2>:
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	7b 01       	movw	r14, r22
     c08:	8c 01       	movw	r16, r24
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	e8 16       	cp	r14, r24
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	f8 06       	cpc	r15, r24
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	08 07       	cpc	r16, r24
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	18 07       	cpc	r17, r24
     c1a:	88 f4       	brcc	.+34     	; 0xc3e <__clzsi2+0x40>
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	e8 16       	cp	r14, r24
     c20:	f1 04       	cpc	r15, r1
     c22:	01 05       	cpc	r16, r1
     c24:	11 05       	cpc	r17, r1
     c26:	31 f0       	breq	.+12     	; 0xc34 <__clzsi2+0x36>
     c28:	28 f0       	brcs	.+10     	; 0xc34 <__clzsi2+0x36>
     c2a:	88 e0       	ldi	r24, 0x08	; 8
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	a0 e0       	ldi	r26, 0x00	; 0
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	17 c0       	rjmp	.+46     	; 0xc62 <__clzsi2+0x64>
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	a0 e0       	ldi	r26, 0x00	; 0
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	12 c0       	rjmp	.+36     	; 0xc62 <__clzsi2+0x64>
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	e8 16       	cp	r14, r24
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	f8 06       	cpc	r15, r24
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	08 07       	cpc	r16, r24
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	18 07       	cpc	r17, r24
     c4e:	28 f0       	brcs	.+10     	; 0xc5a <__clzsi2+0x5c>
     c50:	88 e1       	ldi	r24, 0x18	; 24
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	a0 e0       	ldi	r26, 0x00	; 0
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <__clzsi2+0x64>
     c5a:	80 e1       	ldi	r24, 0x10	; 16
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	a0 e0       	ldi	r26, 0x00	; 0
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	20 e2       	ldi	r18, 0x20	; 32
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	40 e0       	ldi	r20, 0x00	; 0
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	28 1b       	sub	r18, r24
     c6c:	39 0b       	sbc	r19, r25
     c6e:	4a 0b       	sbc	r20, r26
     c70:	5b 0b       	sbc	r21, r27
     c72:	04 c0       	rjmp	.+8      	; 0xc7c <__clzsi2+0x7e>
     c74:	16 95       	lsr	r17
     c76:	07 95       	ror	r16
     c78:	f7 94       	ror	r15
     c7a:	e7 94       	ror	r14
     c7c:	8a 95       	dec	r24
     c7e:	d2 f7       	brpl	.-12     	; 0xc74 <__clzsi2+0x76>
     c80:	f7 01       	movw	r30, r14
     c82:	ee 57       	subi	r30, 0x7E	; 126
     c84:	ff 4f       	sbci	r31, 0xFF	; 255
     c86:	80 81       	ld	r24, Z
     c88:	28 1b       	sub	r18, r24
     c8a:	31 09       	sbc	r19, r1
     c8c:	41 09       	sbc	r20, r1
     c8e:	51 09       	sbc	r21, r1
     c90:	c9 01       	movw	r24, r18
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	ff 90       	pop	r15
     c98:	ef 90       	pop	r14
     c9a:	08 95       	ret

00000c9c <__pack_f>:
     c9c:	df 92       	push	r13
     c9e:	ef 92       	push	r14
     ca0:	ff 92       	push	r15
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	fc 01       	movw	r30, r24
     ca8:	e4 80       	ldd	r14, Z+4	; 0x04
     caa:	f5 80       	ldd	r15, Z+5	; 0x05
     cac:	06 81       	ldd	r16, Z+6	; 0x06
     cae:	17 81       	ldd	r17, Z+7	; 0x07
     cb0:	d1 80       	ldd	r13, Z+1	; 0x01
     cb2:	80 81       	ld	r24, Z
     cb4:	82 30       	cpi	r24, 0x02	; 2
     cb6:	48 f4       	brcc	.+18     	; 0xcca <__pack_f+0x2e>
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a0 e1       	ldi	r26, 0x10	; 16
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e8 2a       	or	r14, r24
     cc2:	f9 2a       	or	r15, r25
     cc4:	0a 2b       	or	r16, r26
     cc6:	1b 2b       	or	r17, r27
     cc8:	a5 c0       	rjmp	.+330    	; 0xe14 <__pack_f+0x178>
     cca:	84 30       	cpi	r24, 0x04	; 4
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <__pack_f+0x34>
     cce:	9f c0       	rjmp	.+318    	; 0xe0e <__pack_f+0x172>
     cd0:	82 30       	cpi	r24, 0x02	; 2
     cd2:	21 f4       	brne	.+8      	; 0xcdc <__pack_f+0x40>
     cd4:	ee 24       	eor	r14, r14
     cd6:	ff 24       	eor	r15, r15
     cd8:	87 01       	movw	r16, r14
     cda:	05 c0       	rjmp	.+10     	; 0xce6 <__pack_f+0x4a>
     cdc:	e1 14       	cp	r14, r1
     cde:	f1 04       	cpc	r15, r1
     ce0:	01 05       	cpc	r16, r1
     ce2:	11 05       	cpc	r17, r1
     ce4:	19 f4       	brne	.+6      	; 0xcec <__pack_f+0x50>
     ce6:	e0 e0       	ldi	r30, 0x00	; 0
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	96 c0       	rjmp	.+300    	; 0xe18 <__pack_f+0x17c>
     cec:	62 81       	ldd	r22, Z+2	; 0x02
     cee:	73 81       	ldd	r23, Z+3	; 0x03
     cf0:	9f ef       	ldi	r25, 0xFF	; 255
     cf2:	62 38       	cpi	r22, 0x82	; 130
     cf4:	79 07       	cpc	r23, r25
     cf6:	0c f0       	brlt	.+2      	; 0xcfa <__pack_f+0x5e>
     cf8:	5b c0       	rjmp	.+182    	; 0xdb0 <__pack_f+0x114>
     cfa:	22 e8       	ldi	r18, 0x82	; 130
     cfc:	3f ef       	ldi	r19, 0xFF	; 255
     cfe:	26 1b       	sub	r18, r22
     d00:	37 0b       	sbc	r19, r23
     d02:	2a 31       	cpi	r18, 0x1A	; 26
     d04:	31 05       	cpc	r19, r1
     d06:	2c f0       	brlt	.+10     	; 0xd12 <__pack_f+0x76>
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	40 e0       	ldi	r20, 0x00	; 0
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	2a c0       	rjmp	.+84     	; 0xd66 <__pack_f+0xca>
     d12:	b8 01       	movw	r22, r16
     d14:	a7 01       	movw	r20, r14
     d16:	02 2e       	mov	r0, r18
     d18:	04 c0       	rjmp	.+8      	; 0xd22 <__pack_f+0x86>
     d1a:	76 95       	lsr	r23
     d1c:	67 95       	ror	r22
     d1e:	57 95       	ror	r21
     d20:	47 95       	ror	r20
     d22:	0a 94       	dec	r0
     d24:	d2 f7       	brpl	.-12     	; 0xd1a <__pack_f+0x7e>
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	a0 e0       	ldi	r26, 0x00	; 0
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	04 c0       	rjmp	.+8      	; 0xd38 <__pack_f+0x9c>
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	aa 1f       	adc	r26, r26
     d36:	bb 1f       	adc	r27, r27
     d38:	2a 95       	dec	r18
     d3a:	d2 f7       	brpl	.-12     	; 0xd30 <__pack_f+0x94>
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	a1 09       	sbc	r26, r1
     d40:	b1 09       	sbc	r27, r1
     d42:	8e 21       	and	r24, r14
     d44:	9f 21       	and	r25, r15
     d46:	a0 23       	and	r26, r16
     d48:	b1 23       	and	r27, r17
     d4a:	00 97       	sbiw	r24, 0x00	; 0
     d4c:	a1 05       	cpc	r26, r1
     d4e:	b1 05       	cpc	r27, r1
     d50:	21 f0       	breq	.+8      	; 0xd5a <__pack_f+0xbe>
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	a0 e0       	ldi	r26, 0x00	; 0
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	9a 01       	movw	r18, r20
     d5c:	ab 01       	movw	r20, r22
     d5e:	28 2b       	or	r18, r24
     d60:	39 2b       	or	r19, r25
     d62:	4a 2b       	or	r20, r26
     d64:	5b 2b       	or	r21, r27
     d66:	da 01       	movw	r26, r20
     d68:	c9 01       	movw	r24, r18
     d6a:	8f 77       	andi	r24, 0x7F	; 127
     d6c:	90 70       	andi	r25, 0x00	; 0
     d6e:	a0 70       	andi	r26, 0x00	; 0
     d70:	b0 70       	andi	r27, 0x00	; 0
     d72:	80 34       	cpi	r24, 0x40	; 64
     d74:	91 05       	cpc	r25, r1
     d76:	a1 05       	cpc	r26, r1
     d78:	b1 05       	cpc	r27, r1
     d7a:	39 f4       	brne	.+14     	; 0xd8a <__pack_f+0xee>
     d7c:	27 ff       	sbrs	r18, 7
     d7e:	09 c0       	rjmp	.+18     	; 0xd92 <__pack_f+0xf6>
     d80:	20 5c       	subi	r18, 0xC0	; 192
     d82:	3f 4f       	sbci	r19, 0xFF	; 255
     d84:	4f 4f       	sbci	r20, 0xFF	; 255
     d86:	5f 4f       	sbci	r21, 0xFF	; 255
     d88:	04 c0       	rjmp	.+8      	; 0xd92 <__pack_f+0xf6>
     d8a:	21 5c       	subi	r18, 0xC1	; 193
     d8c:	3f 4f       	sbci	r19, 0xFF	; 255
     d8e:	4f 4f       	sbci	r20, 0xFF	; 255
     d90:	5f 4f       	sbci	r21, 0xFF	; 255
     d92:	e0 e0       	ldi	r30, 0x00	; 0
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	20 30       	cpi	r18, 0x00	; 0
     d98:	a0 e0       	ldi	r26, 0x00	; 0
     d9a:	3a 07       	cpc	r19, r26
     d9c:	a0 e0       	ldi	r26, 0x00	; 0
     d9e:	4a 07       	cpc	r20, r26
     da0:	a0 e4       	ldi	r26, 0x40	; 64
     da2:	5a 07       	cpc	r21, r26
     da4:	10 f0       	brcs	.+4      	; 0xdaa <__pack_f+0x10e>
     da6:	e1 e0       	ldi	r30, 0x01	; 1
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	79 01       	movw	r14, r18
     dac:	8a 01       	movw	r16, r20
     dae:	27 c0       	rjmp	.+78     	; 0xdfe <__pack_f+0x162>
     db0:	60 38       	cpi	r22, 0x80	; 128
     db2:	71 05       	cpc	r23, r1
     db4:	64 f5       	brge	.+88     	; 0xe0e <__pack_f+0x172>
     db6:	fb 01       	movw	r30, r22
     db8:	e1 58       	subi	r30, 0x81	; 129
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	d8 01       	movw	r26, r16
     dbe:	c7 01       	movw	r24, r14
     dc0:	8f 77       	andi	r24, 0x7F	; 127
     dc2:	90 70       	andi	r25, 0x00	; 0
     dc4:	a0 70       	andi	r26, 0x00	; 0
     dc6:	b0 70       	andi	r27, 0x00	; 0
     dc8:	80 34       	cpi	r24, 0x40	; 64
     dca:	91 05       	cpc	r25, r1
     dcc:	a1 05       	cpc	r26, r1
     dce:	b1 05       	cpc	r27, r1
     dd0:	39 f4       	brne	.+14     	; 0xde0 <__pack_f+0x144>
     dd2:	e7 fe       	sbrs	r14, 7
     dd4:	0d c0       	rjmp	.+26     	; 0xdf0 <__pack_f+0x154>
     dd6:	80 e4       	ldi	r24, 0x40	; 64
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	a0 e0       	ldi	r26, 0x00	; 0
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	04 c0       	rjmp	.+8      	; 0xde8 <__pack_f+0x14c>
     de0:	8f e3       	ldi	r24, 0x3F	; 63
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	a0 e0       	ldi	r26, 0x00	; 0
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e8 0e       	add	r14, r24
     dea:	f9 1e       	adc	r15, r25
     dec:	0a 1f       	adc	r16, r26
     dee:	1b 1f       	adc	r17, r27
     df0:	17 ff       	sbrs	r17, 7
     df2:	05 c0       	rjmp	.+10     	; 0xdfe <__pack_f+0x162>
     df4:	16 95       	lsr	r17
     df6:	07 95       	ror	r16
     df8:	f7 94       	ror	r15
     dfa:	e7 94       	ror	r14
     dfc:	31 96       	adiw	r30, 0x01	; 1
     dfe:	87 e0       	ldi	r24, 0x07	; 7
     e00:	16 95       	lsr	r17
     e02:	07 95       	ror	r16
     e04:	f7 94       	ror	r15
     e06:	e7 94       	ror	r14
     e08:	8a 95       	dec	r24
     e0a:	d1 f7       	brne	.-12     	; 0xe00 <__pack_f+0x164>
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__pack_f+0x17c>
     e0e:	ee 24       	eor	r14, r14
     e10:	ff 24       	eor	r15, r15
     e12:	87 01       	movw	r16, r14
     e14:	ef ef       	ldi	r30, 0xFF	; 255
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	6e 2f       	mov	r22, r30
     e1a:	67 95       	ror	r22
     e1c:	66 27       	eor	r22, r22
     e1e:	67 95       	ror	r22
     e20:	90 2f       	mov	r25, r16
     e22:	9f 77       	andi	r25, 0x7F	; 127
     e24:	d7 94       	ror	r13
     e26:	dd 24       	eor	r13, r13
     e28:	d7 94       	ror	r13
     e2a:	8e 2f       	mov	r24, r30
     e2c:	86 95       	lsr	r24
     e2e:	49 2f       	mov	r20, r25
     e30:	46 2b       	or	r20, r22
     e32:	58 2f       	mov	r21, r24
     e34:	5d 29       	or	r21, r13
     e36:	b7 01       	movw	r22, r14
     e38:	ca 01       	movw	r24, r20
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	df 90       	pop	r13
     e44:	08 95       	ret

00000e46 <__unpack_f>:
     e46:	fc 01       	movw	r30, r24
     e48:	db 01       	movw	r26, r22
     e4a:	40 81       	ld	r20, Z
     e4c:	51 81       	ldd	r21, Z+1	; 0x01
     e4e:	22 81       	ldd	r18, Z+2	; 0x02
     e50:	62 2f       	mov	r22, r18
     e52:	6f 77       	andi	r22, 0x7F	; 127
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	22 1f       	adc	r18, r18
     e58:	22 27       	eor	r18, r18
     e5a:	22 1f       	adc	r18, r18
     e5c:	93 81       	ldd	r25, Z+3	; 0x03
     e5e:	89 2f       	mov	r24, r25
     e60:	88 0f       	add	r24, r24
     e62:	82 2b       	or	r24, r18
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	99 1f       	adc	r25, r25
     e6a:	99 27       	eor	r25, r25
     e6c:	99 1f       	adc	r25, r25
     e6e:	11 96       	adiw	r26, 0x01	; 1
     e70:	9c 93       	st	X, r25
     e72:	11 97       	sbiw	r26, 0x01	; 1
     e74:	21 15       	cp	r18, r1
     e76:	31 05       	cpc	r19, r1
     e78:	a9 f5       	brne	.+106    	; 0xee4 <__unpack_f+0x9e>
     e7a:	41 15       	cp	r20, r1
     e7c:	51 05       	cpc	r21, r1
     e7e:	61 05       	cpc	r22, r1
     e80:	71 05       	cpc	r23, r1
     e82:	11 f4       	brne	.+4      	; 0xe88 <__unpack_f+0x42>
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	37 c0       	rjmp	.+110    	; 0xef6 <__unpack_f+0xb0>
     e88:	82 e8       	ldi	r24, 0x82	; 130
     e8a:	9f ef       	ldi	r25, 0xFF	; 255
     e8c:	13 96       	adiw	r26, 0x03	; 3
     e8e:	9c 93       	st	X, r25
     e90:	8e 93       	st	-X, r24
     e92:	12 97       	sbiw	r26, 0x02	; 2
     e94:	9a 01       	movw	r18, r20
     e96:	ab 01       	movw	r20, r22
     e98:	67 e0       	ldi	r22, 0x07	; 7
     e9a:	22 0f       	add	r18, r18
     e9c:	33 1f       	adc	r19, r19
     e9e:	44 1f       	adc	r20, r20
     ea0:	55 1f       	adc	r21, r21
     ea2:	6a 95       	dec	r22
     ea4:	d1 f7       	brne	.-12     	; 0xe9a <__unpack_f+0x54>
     ea6:	83 e0       	ldi	r24, 0x03	; 3
     ea8:	8c 93       	st	X, r24
     eaa:	0d c0       	rjmp	.+26     	; 0xec6 <__unpack_f+0x80>
     eac:	22 0f       	add	r18, r18
     eae:	33 1f       	adc	r19, r19
     eb0:	44 1f       	adc	r20, r20
     eb2:	55 1f       	adc	r21, r21
     eb4:	12 96       	adiw	r26, 0x02	; 2
     eb6:	8d 91       	ld	r24, X+
     eb8:	9c 91       	ld	r25, X
     eba:	13 97       	sbiw	r26, 0x03	; 3
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	13 96       	adiw	r26, 0x03	; 3
     ec0:	9c 93       	st	X, r25
     ec2:	8e 93       	st	-X, r24
     ec4:	12 97       	sbiw	r26, 0x02	; 2
     ec6:	20 30       	cpi	r18, 0x00	; 0
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	38 07       	cpc	r19, r24
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	48 07       	cpc	r20, r24
     ed0:	80 e4       	ldi	r24, 0x40	; 64
     ed2:	58 07       	cpc	r21, r24
     ed4:	58 f3       	brcs	.-42     	; 0xeac <__unpack_f+0x66>
     ed6:	14 96       	adiw	r26, 0x04	; 4
     ed8:	2d 93       	st	X+, r18
     eda:	3d 93       	st	X+, r19
     edc:	4d 93       	st	X+, r20
     ede:	5c 93       	st	X, r21
     ee0:	17 97       	sbiw	r26, 0x07	; 7
     ee2:	08 95       	ret
     ee4:	2f 3f       	cpi	r18, 0xFF	; 255
     ee6:	31 05       	cpc	r19, r1
     ee8:	79 f4       	brne	.+30     	; 0xf08 <__unpack_f+0xc2>
     eea:	41 15       	cp	r20, r1
     eec:	51 05       	cpc	r21, r1
     eee:	61 05       	cpc	r22, r1
     ef0:	71 05       	cpc	r23, r1
     ef2:	19 f4       	brne	.+6      	; 0xefa <__unpack_f+0xb4>
     ef4:	84 e0       	ldi	r24, 0x04	; 4
     ef6:	8c 93       	st	X, r24
     ef8:	08 95       	ret
     efa:	64 ff       	sbrs	r22, 4
     efc:	03 c0       	rjmp	.+6      	; 0xf04 <__unpack_f+0xbe>
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	8c 93       	st	X, r24
     f02:	12 c0       	rjmp	.+36     	; 0xf28 <__unpack_f+0xe2>
     f04:	1c 92       	st	X, r1
     f06:	10 c0       	rjmp	.+32     	; 0xf28 <__unpack_f+0xe2>
     f08:	2f 57       	subi	r18, 0x7F	; 127
     f0a:	30 40       	sbci	r19, 0x00	; 0
     f0c:	13 96       	adiw	r26, 0x03	; 3
     f0e:	3c 93       	st	X, r19
     f10:	2e 93       	st	-X, r18
     f12:	12 97       	sbiw	r26, 0x02	; 2
     f14:	83 e0       	ldi	r24, 0x03	; 3
     f16:	8c 93       	st	X, r24
     f18:	87 e0       	ldi	r24, 0x07	; 7
     f1a:	44 0f       	add	r20, r20
     f1c:	55 1f       	adc	r21, r21
     f1e:	66 1f       	adc	r22, r22
     f20:	77 1f       	adc	r23, r23
     f22:	8a 95       	dec	r24
     f24:	d1 f7       	brne	.-12     	; 0xf1a <__unpack_f+0xd4>
     f26:	70 64       	ori	r23, 0x40	; 64
     f28:	14 96       	adiw	r26, 0x04	; 4
     f2a:	4d 93       	st	X+, r20
     f2c:	5d 93       	st	X+, r21
     f2e:	6d 93       	st	X+, r22
     f30:	7c 93       	st	X, r23
     f32:	17 97       	sbiw	r26, 0x07	; 7
     f34:	08 95       	ret

00000f36 <__fpcmp_parts_f>:
     f36:	1f 93       	push	r17
     f38:	dc 01       	movw	r26, r24
     f3a:	fb 01       	movw	r30, r22
     f3c:	9c 91       	ld	r25, X
     f3e:	92 30       	cpi	r25, 0x02	; 2
     f40:	08 f4       	brcc	.+2      	; 0xf44 <__fpcmp_parts_f+0xe>
     f42:	47 c0       	rjmp	.+142    	; 0xfd2 <__fpcmp_parts_f+0x9c>
     f44:	80 81       	ld	r24, Z
     f46:	82 30       	cpi	r24, 0x02	; 2
     f48:	08 f4       	brcc	.+2      	; 0xf4c <__fpcmp_parts_f+0x16>
     f4a:	43 c0       	rjmp	.+134    	; 0xfd2 <__fpcmp_parts_f+0x9c>
     f4c:	94 30       	cpi	r25, 0x04	; 4
     f4e:	51 f4       	brne	.+20     	; 0xf64 <__fpcmp_parts_f+0x2e>
     f50:	11 96       	adiw	r26, 0x01	; 1
     f52:	1c 91       	ld	r17, X
     f54:	84 30       	cpi	r24, 0x04	; 4
     f56:	99 f5       	brne	.+102    	; 0xfbe <__fpcmp_parts_f+0x88>
     f58:	81 81       	ldd	r24, Z+1	; 0x01
     f5a:	68 2f       	mov	r22, r24
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	61 1b       	sub	r22, r17
     f60:	71 09       	sbc	r23, r1
     f62:	3f c0       	rjmp	.+126    	; 0xfe2 <__fpcmp_parts_f+0xac>
     f64:	84 30       	cpi	r24, 0x04	; 4
     f66:	21 f0       	breq	.+8      	; 0xf70 <__fpcmp_parts_f+0x3a>
     f68:	92 30       	cpi	r25, 0x02	; 2
     f6a:	31 f4       	brne	.+12     	; 0xf78 <__fpcmp_parts_f+0x42>
     f6c:	82 30       	cpi	r24, 0x02	; 2
     f6e:	b9 f1       	breq	.+110    	; 0xfde <__fpcmp_parts_f+0xa8>
     f70:	81 81       	ldd	r24, Z+1	; 0x01
     f72:	88 23       	and	r24, r24
     f74:	89 f1       	breq	.+98     	; 0xfd8 <__fpcmp_parts_f+0xa2>
     f76:	2d c0       	rjmp	.+90     	; 0xfd2 <__fpcmp_parts_f+0x9c>
     f78:	11 96       	adiw	r26, 0x01	; 1
     f7a:	1c 91       	ld	r17, X
     f7c:	11 97       	sbiw	r26, 0x01	; 1
     f7e:	82 30       	cpi	r24, 0x02	; 2
     f80:	f1 f0       	breq	.+60     	; 0xfbe <__fpcmp_parts_f+0x88>
     f82:	81 81       	ldd	r24, Z+1	; 0x01
     f84:	18 17       	cp	r17, r24
     f86:	d9 f4       	brne	.+54     	; 0xfbe <__fpcmp_parts_f+0x88>
     f88:	12 96       	adiw	r26, 0x02	; 2
     f8a:	2d 91       	ld	r18, X+
     f8c:	3c 91       	ld	r19, X
     f8e:	13 97       	sbiw	r26, 0x03	; 3
     f90:	82 81       	ldd	r24, Z+2	; 0x02
     f92:	93 81       	ldd	r25, Z+3	; 0x03
     f94:	82 17       	cp	r24, r18
     f96:	93 07       	cpc	r25, r19
     f98:	94 f0       	brlt	.+36     	; 0xfbe <__fpcmp_parts_f+0x88>
     f9a:	28 17       	cp	r18, r24
     f9c:	39 07       	cpc	r19, r25
     f9e:	bc f0       	brlt	.+46     	; 0xfce <__fpcmp_parts_f+0x98>
     fa0:	14 96       	adiw	r26, 0x04	; 4
     fa2:	8d 91       	ld	r24, X+
     fa4:	9d 91       	ld	r25, X+
     fa6:	0d 90       	ld	r0, X+
     fa8:	bc 91       	ld	r27, X
     faa:	a0 2d       	mov	r26, r0
     fac:	24 81       	ldd	r18, Z+4	; 0x04
     fae:	35 81       	ldd	r19, Z+5	; 0x05
     fb0:	46 81       	ldd	r20, Z+6	; 0x06
     fb2:	57 81       	ldd	r21, Z+7	; 0x07
     fb4:	28 17       	cp	r18, r24
     fb6:	39 07       	cpc	r19, r25
     fb8:	4a 07       	cpc	r20, r26
     fba:	5b 07       	cpc	r21, r27
     fbc:	18 f4       	brcc	.+6      	; 0xfc4 <__fpcmp_parts_f+0x8e>
     fbe:	11 23       	and	r17, r17
     fc0:	41 f0       	breq	.+16     	; 0xfd2 <__fpcmp_parts_f+0x9c>
     fc2:	0a c0       	rjmp	.+20     	; 0xfd8 <__fpcmp_parts_f+0xa2>
     fc4:	82 17       	cp	r24, r18
     fc6:	93 07       	cpc	r25, r19
     fc8:	a4 07       	cpc	r26, r20
     fca:	b5 07       	cpc	r27, r21
     fcc:	40 f4       	brcc	.+16     	; 0xfde <__fpcmp_parts_f+0xa8>
     fce:	11 23       	and	r17, r17
     fd0:	19 f0       	breq	.+6      	; 0xfd8 <__fpcmp_parts_f+0xa2>
     fd2:	61 e0       	ldi	r22, 0x01	; 1
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	05 c0       	rjmp	.+10     	; 0xfe2 <__fpcmp_parts_f+0xac>
     fd8:	6f ef       	ldi	r22, 0xFF	; 255
     fda:	7f ef       	ldi	r23, 0xFF	; 255
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <__fpcmp_parts_f+0xac>
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	cb 01       	movw	r24, r22
     fe4:	1f 91       	pop	r17
     fe6:	08 95       	ret

00000fe8 <TIMER1_voidInit>:

static void (*TIMER1_Callback_NM)() = NULL;
static void (*TIMER1_Callback_ICI)() = NULL;

void TIMER1_voidInit(void)
{
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
	/*Set Configurable Modes*/

	#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_NORMAL_MODE

		/*Set Waveform generation mode as Normal mode */
			CLR_BIT(TIMER1_TCCR1A_REG,TCCR1A_WGM10);
     ff0:	af e4       	ldi	r26, 0x4F	; 79
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	ef e4       	ldi	r30, 0x4F	; 79
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	8e 7f       	andi	r24, 0xFE	; 254
     ffc:	8c 93       	st	X, r24
			CLR_BIT(TIMER1_TCCR1A_REG,TCCR1A_WGM11);
     ffe:	af e4       	ldi	r26, 0x4F	; 79
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	ef e4       	ldi	r30, 0x4F	; 79
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	8d 7f       	andi	r24, 0xFD	; 253
    100a:	8c 93       	st	X, r24
			CLR_BIT(TIMER1_TCCR1B_REG,TCCR1B_WGM12);
    100c:	ae e4       	ldi	r26, 0x4E	; 78
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	ee e4       	ldi	r30, 0x4E	; 78
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	87 7f       	andi	r24, 0xF7	; 247
    1018:	8c 93       	st	X, r24
			CLR_BIT(TIMER1_TCCR1B_REG,TCCR1B_WGM13);
    101a:	ae e4       	ldi	r26, 0x4E	; 78
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	ee e4       	ldi	r30, 0x4E	; 78
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	8f 7e       	andi	r24, 0xEF	; 239
    1026:	8c 93       	st	X, r24

		/*Set the require Preload Value*/
			TIMER1_TCNT1_REG = TIMER1_PRELOAD_VAL ;
    1028:	ec e4       	ldi	r30, 0x4C	; 76
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	11 82       	std	Z+1, r1	; 0x01
    102e:	10 82       	st	Z, r1

		/*Timer1 Overflow Interrupt Enable*/
			SET_BIT(TIMER1_TIMSK_REG , TIMSK_TOIE1) ;
    1030:	a9 e5       	ldi	r26, 0x59	; 89
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e9 e5       	ldi	r30, 0x59	; 89
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	84 60       	ori	r24, 0x04	; 4
    103c:	8c 93       	st	X, r24

		/*Set the Required Prescaler	*/
			TIMER1_TCCR1B_REG &= TIMER_PRESCALER_MASK ;
    103e:	ae e4       	ldi	r26, 0x4E	; 78
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	ee e4       	ldi	r30, 0x4E	; 78
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	88 7f       	andi	r24, 0xF8	; 248
    104a:	8c 93       	st	X, r24
			TIMER1_TCCR1B_REG |= TIMER1_PRESCALER ;
    104c:	ae e4       	ldi	r26, 0x4E	; 78
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	ee e4       	ldi	r30, 0x4E	; 78
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	81 60       	ori	r24, 0x01	; 1
    1058:	8c 93       	st	X, r24
	#else
	#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
	#endif

}
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	08 95       	ret

00001060 <TIMER1_voidSetPreload>:

void TIMER1_voidSetPreload (u16 Copy_u16Preload)
{
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	00 d0       	rcall	.+0      	; 0x1066 <TIMER1_voidSetPreload+0x6>
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	9a 83       	std	Y+2, r25	; 0x02
    106c:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_TCNT1_REG = Copy_u16Preload ;
    106e:	ec e4       	ldi	r30, 0x4C	; 76
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	9a 81       	ldd	r25, Y+2	; 0x02
    1076:	91 83       	std	Z+1, r25	; 0x01
    1078:	80 83       	st	Z, r24
}
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <TIMER1_voidSetICR1>:

void TIMER1_voidSetICR1 (u16 Copy_u16ICR1)
{
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	00 d0       	rcall	.+0      	; 0x108a <TIMER1_voidSetICR1+0x6>
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	9a 83       	std	Y+2, r25	; 0x02
    1090:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_ICR1_REG = Copy_u16ICR1 ;
    1092:	e6 e4       	ldi	r30, 0x46	; 70
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	9a 81       	ldd	r25, Y+2	; 0x02
    109a:	91 83       	std	Z+1, r25	; 0x01
    109c:	80 83       	st	Z, r24
}
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
	return TIMER1_TCNT1_REG ;
    10b0:	ec e4       	ldi	r30, 0x4C	; 76
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	91 81       	ldd	r25, Z+1	; 0x01
}
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <TIMER_voidICUInitEnable>:

void TIMER_voidICUInitEnable(void)
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
	TIMER1_voidInit();
    10c6:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <TIMER1_voidInit>
	/* Set trigger source as rising edge Initially  */
	#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
		SET_BIT(TIMER1_TCCR1B_REG,TCCR1B_ICES1);
    10ca:	ae e4       	ldi	r26, 0x4E	; 78
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	ee e4       	ldi	r30, 0x4E	; 78
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	80 64       	ori	r24, 0x40	; 64
    10d6:	8c 93       	st	X, r24
	#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
		CLR_BIT(TIMER1_TCCR1B_REG,TCCR1B_ICES1);
	#endif

	/* Enable Interrupt of ICU */
	SET_BIT(TIMER1_TIMSK_REG,TIMSK_TICIE1);
    10d8:	a9 e5       	ldi	r26, 0x59	; 89
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e9 e5       	ldi	r30, 0x59	; 89
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	80 62       	ori	r24, 0x20	; 32
    10e4:	8c 93       	st	X, r24
}
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <TIMER_voidICUSetTriggerEdge>:

void TIMER_voidICUSetTriggerEdge(u8 Copy_u8Edge) //u8 with boolean massage
{
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	0f 92       	push	r0
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	89 83       	std	Y+1, r24	; 0x01
//	BOOL Local_u8ErrorStatus = true ;

	/* Change The trigger source as Rising edge or Falling edge */
if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	41 f4       	brne	.+16     	; 0x110e <TIMER_voidICUSetTriggerEdge+0x22>
{
		SET_BIT(TIMER1_TCCR1B_REG,TCCR1B_ICES1);
    10fe:	ae e4       	ldi	r26, 0x4E	; 78
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	ee e4       	ldi	r30, 0x4E	; 78
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	80 64       	ori	r24, 0x40	; 64
    110a:	8c 93       	st	X, r24
    110c:	0a c0       	rjmp	.+20     	; 0x1122 <TIMER_voidICUSetTriggerEdge+0x36>
}
		else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	88 23       	and	r24, r24
    1112:	39 f4       	brne	.+14     	; 0x1122 <TIMER_voidICUSetTriggerEdge+0x36>
		{

		CLR_BIT(TIMER1_TCCR1B_REG,TCCR1B_ICES1);
    1114:	ae e4       	ldi	r26, 0x4E	; 78
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	ee e4       	ldi	r30, 0x4E	; 78
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	8f 7b       	andi	r24, 0xBF	; 191
    1120:	8c 93       	st	X, r24
		}

//		Local_u8ErrorStatus = false ;
//	return Local_u8ErrorStatus;

}
    1122:	0f 90       	pop	r0
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <TIMER_voidICUDisableInterrupt>:
//{
//	SET_BIT(TIMSK,TIMSK_TICIE1);
//}

void TIMER_voidICUDisableInterrupt(void)
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMER1_TIMSK_REG,TIMSK_TICIE1);
    1132:	a9 e5       	ldi	r26, 0x59	; 89
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e9 e5       	ldi	r30, 0x59	; 89
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	8f 7d       	andi	r24, 0xDF	; 223
    113e:	8c 93       	st	X, r24
}
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <TIMER_u16GetICR>:

u16 TIMER_u16GetICR(void)
{
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
	return TIMER1_ICR1_REG;
    114e:	e6 e4       	ldi	r30, 0x46	; 70
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	91 81       	ldd	r25, Z+1	; 0x01
}
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <ICU_ClearTimerValue>:

void ICU_ClearTimerValue(void)
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
	TIMER1_TCNT1_REG =0;
    1164:	ec e4       	ldi	r30, 0x4C	; 76
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	11 82       	std	Z+1, r1	; 0x01
    116a:	10 82       	st	Z, r1
}
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <TIMER1_voidSetCallBack_NM>:

void TIMER1_voidSetCallBack_NM(void (*pf)(void)){
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	00 d0       	rcall	.+0      	; 0x1178 <TIMER1_voidSetCallBack_NM+0x6>
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	9a 83       	std	Y+2, r25	; 0x02
    117e:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_Callback_NM = pf ;
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	90 93 93 01 	sts	0x0193, r25
    1188:	80 93 92 01 	sts	0x0192, r24
}
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <TIMER1_voidSetCallBack_ICI>:

void TIMER1_voidSetCallBack_ICI(void (*pf)(void)){
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	00 d0       	rcall	.+0      	; 0x119c <TIMER1_voidSetCallBack_ICI+0x6>
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	9a 83       	std	Y+2, r25	; 0x02
    11a2:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_Callback_ICI = pf ;
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	90 93 95 01 	sts	0x0195, r25
    11ac:	80 93 94 01 	sts	0x0194, r24
}
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
    11ba:	1f 92       	push	r1
    11bc:	0f 92       	push	r0
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	0f 92       	push	r0
    11c2:	11 24       	eor	r1, r1
    11c4:	2f 93       	push	r18
    11c6:	3f 93       	push	r19
    11c8:	4f 93       	push	r20
    11ca:	5f 93       	push	r21
    11cc:	6f 93       	push	r22
    11ce:	7f 93       	push	r23
    11d0:	8f 93       	push	r24
    11d2:	9f 93       	push	r25
    11d4:	af 93       	push	r26
    11d6:	bf 93       	push	r27
    11d8:	ef 93       	push	r30
    11da:	ff 93       	push	r31
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
	if (TIMER1_Callback_NM != NULL)
    11e4:	80 91 92 01 	lds	r24, 0x0192
    11e8:	90 91 93 01 	lds	r25, 0x0193
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	29 f0       	breq	.+10     	; 0x11fa <__vector_9+0x40>
	{
		TIMER1_Callback_NM() ;
    11f0:	e0 91 92 01 	lds	r30, 0x0192
    11f4:	f0 91 93 01 	lds	r31, 0x0193
    11f8:	09 95       	icall
	}
}
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	ff 91       	pop	r31
    1200:	ef 91       	pop	r30
    1202:	bf 91       	pop	r27
    1204:	af 91       	pop	r26
    1206:	9f 91       	pop	r25
    1208:	8f 91       	pop	r24
    120a:	7f 91       	pop	r23
    120c:	6f 91       	pop	r22
    120e:	5f 91       	pop	r21
    1210:	4f 91       	pop	r20
    1212:	3f 91       	pop	r19
    1214:	2f 91       	pop	r18
    1216:	0f 90       	pop	r0
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	0f 90       	pop	r0
    121c:	1f 90       	pop	r1
    121e:	18 95       	reti

00001220 <__vector_6>:


/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void){
    1220:	1f 92       	push	r1
    1222:	0f 92       	push	r0
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	0f 92       	push	r0
    1228:	11 24       	eor	r1, r1
    122a:	2f 93       	push	r18
    122c:	3f 93       	push	r19
    122e:	4f 93       	push	r20
    1230:	5f 93       	push	r21
    1232:	6f 93       	push	r22
    1234:	7f 93       	push	r23
    1236:	8f 93       	push	r24
    1238:	9f 93       	push	r25
    123a:	af 93       	push	r26
    123c:	bf 93       	push	r27
    123e:	ef 93       	push	r30
    1240:	ff 93       	push	r31
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62

	if (TIMER1_Callback_ICI != NULL)
    124a:	80 91 94 01 	lds	r24, 0x0194
    124e:	90 91 95 01 	lds	r25, 0x0195
    1252:	00 97       	sbiw	r24, 0x00	; 0
    1254:	29 f0       	breq	.+10     	; 0x1260 <__vector_6+0x40>
		{
			TIMER1_Callback_ICI() ;
    1256:	e0 91 94 01 	lds	r30, 0x0194
    125a:	f0 91 95 01 	lds	r31, 0x0195
    125e:	09 95       	icall
		}
}
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	ff 91       	pop	r31
    1266:	ef 91       	pop	r30
    1268:	bf 91       	pop	r27
    126a:	af 91       	pop	r26
    126c:	9f 91       	pop	r25
    126e:	8f 91       	pop	r24
    1270:	7f 91       	pop	r23
    1272:	6f 91       	pop	r22
    1274:	5f 91       	pop	r21
    1276:	4f 91       	pop	r20
    1278:	3f 91       	pop	r19
    127a:	2f 91       	pop	r18
    127c:	0f 90       	pop	r0
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	0f 90       	pop	r0
    1282:	1f 90       	pop	r1
    1284:	18 95       	reti

00001286 <PORT_voidInit>:
#include "PORT_int.h"
#include "PORT_priv.h"


void PORT_voidInit(void)
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
	*(DIO_DDRA_REG) = PORTA_DIR;
    128e:	ea e3       	ldi	r30, 0x3A	; 58
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	85 e0       	ldi	r24, 0x05	; 5
    1294:	80 83       	st	Z, r24
	*(DIO_DDRB_REG) = PORTB_DIR;
    1296:	e7 e3       	ldi	r30, 0x37	; 55
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	87 e0       	ldi	r24, 0x07	; 7
    129c:	80 83       	st	Z, r24
	*(DIO_DDRC_REG) = PORTC_DIR;
    129e:	e4 e3       	ldi	r30, 0x34	; 52
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	8f ef       	ldi	r24, 0xFF	; 255
    12a4:	80 83       	st	Z, r24
	*(DIO_DDRD_REG) = PORTD_DIR;
    12a6:	e1 e3       	ldi	r30, 0x31	; 49
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	8f e3       	ldi	r24, 0x3F	; 63
    12ac:	80 83       	st	Z, r24


	*(DIO_PORTA_REG) = PORTA_INITIAL_VAL;
    12ae:	eb e3       	ldi	r30, 0x3B	; 59
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	82 e0       	ldi	r24, 0x02	; 2
    12b4:	80 83       	st	Z, r24
	*(DIO_PORTB_REG) = PORTB_INITIAL_VAL;
    12b6:	e8 e3       	ldi	r30, 0x38	; 56
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	10 82       	st	Z, r1
	*(DIO_PORTC_REG) = PORTC_INITIAL_VAL;
    12bc:	e5 e3       	ldi	r30, 0x35	; 53
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	10 82       	st	Z, r1
	*(DIO_PORTD_REG) = PORTD_INITIAL_VAL;
    12c2:	e2 e3       	ldi	r30, 0x32	; 50
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	10 82       	st	Z, r1
}
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	08 95       	ret

000012ce <GIE_voidEnableGlobalInterrupt>:
#include "../../Service/bit_math.h"
#include "GIE_int.h"



void GIE_voidEnableGlobalInterrupt(){
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
	__asm__("SEI");
    12d6:	78 94       	sei


//	SET_BIT(SREG_REG,GIE_BIT);
}
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <GIE_voidDisableGlobalInterrupt>:
void GIE_voidDisableGlobalInterrupt(){
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
	__asm__("CLI");
    12e6:	f8 94       	cli

//	CLR_BIT(SREG_REG,GIE_BIT);
}
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <DIO_voidSetPinVlaue>:
#include "DIO_priv.h"

u8 * Global_u8PORT_arr[] = {DIO_PORTA_REG , DIO_PORTB_REG ,  DIO_PORTC_REG,DIO_PORTD_REG};
u8 * Global_u8Pin_arr[] = {DIO_PINA_REG , DIO_PINB_REG ,  DIO_PINC_REG,DIO_PIND_REG};

void DIO_voidSetPinVlaue    (u8 Copy_u8PortID, u8 Copy_u8PinID , u8 Copy_u8Val){
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <DIO_voidSetPinVlaue+0x6>
    12f4:	0f 92       	push	r0
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	89 83       	std	Y+1, r24	; 0x01
    12fc:	6a 83       	std	Y+2, r22	; 0x02
    12fe:	4b 83       	std	Y+3, r20	; 0x03

		if(Copy_u8PinID <= DIO_PIN7 && Copy_u8PortID < 5)
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	88 30       	cpi	r24, 0x08	; 8
    1304:	08 f0       	brcs	.+2      	; 0x1308 <DIO_voidSetPinVlaue+0x1a>
    1306:	54 c0       	rjmp	.+168    	; 0x13b0 <DIO_voidSetPinVlaue+0xc2>
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	85 30       	cpi	r24, 0x05	; 5
    130c:	08 f0       	brcs	.+2      	; 0x1310 <DIO_voidSetPinVlaue+0x22>
    130e:	50 c0       	rjmp	.+160    	; 0x13b0 <DIO_voidSetPinVlaue+0xc2>
		{

			if(Copy_u8Val == DIO_PIN_HIGH)
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	29 f5       	brne	.+74     	; 0x1360 <DIO_voidSetPinVlaue+0x72>
			{
				SET_BIT(*(Global_u8PORT_arr[Copy_u8PortID]) ,Copy_u8PinID );
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	88 2f       	mov	r24, r24
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	fc 01       	movw	r30, r24
    1322:	ee 57       	subi	r30, 0x7E	; 126
    1324:	fe 4f       	sbci	r31, 0xFE	; 254
    1326:	a0 81       	ld	r26, Z
    1328:	b1 81       	ldd	r27, Z+1	; 0x01
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	88 2f       	mov	r24, r24
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	fc 01       	movw	r30, r24
    1336:	ee 57       	subi	r30, 0x7E	; 126
    1338:	fe 4f       	sbci	r31, 0xFE	; 254
    133a:	01 90       	ld	r0, Z+
    133c:	f0 81       	ld	r31, Z
    133e:	e0 2d       	mov	r30, r0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <DIO_voidSetPinVlaue+0x68>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <DIO_voidSetPinVlaue+0x64>
    135a:	84 2b       	or	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	28 c0       	rjmp	.+80     	; 0x13b0 <DIO_voidSetPinVlaue+0xc2>

			}else if(Copy_u8Val == DIO_PIN_LOW)
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	88 23       	and	r24, r24
    1364:	29 f5       	brne	.+74     	; 0x13b0 <DIO_voidSetPinVlaue+0xc2>
			{
				CLR_BIT(*(Global_u8PORT_arr[Copy_u8PortID]) ,Copy_u8PinID );
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	88 2f       	mov	r24, r24
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	fc 01       	movw	r30, r24
    1372:	ee 57       	subi	r30, 0x7E	; 126
    1374:	fe 4f       	sbci	r31, 0xFE	; 254
    1376:	a0 81       	ld	r26, Z
    1378:	b1 81       	ldd	r27, Z+1	; 0x01
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	88 2f       	mov	r24, r24
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	fc 01       	movw	r30, r24
    1386:	ee 57       	subi	r30, 0x7E	; 126
    1388:	fe 4f       	sbci	r31, 0xFE	; 254
    138a:	01 90       	ld	r0, Z+
    138c:	f0 81       	ld	r31, Z
    138e:	e0 2d       	mov	r30, r0
    1390:	80 81       	ld	r24, Z
    1392:	48 2f       	mov	r20, r24
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	02 2e       	mov	r0, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <DIO_voidSetPinVlaue+0xb8>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <DIO_voidSetPinVlaue+0xb4>
    13aa:	80 95       	com	r24
    13ac:	84 23       	and	r24, r20
    13ae:	8c 93       	st	X, r24
			}
			else{
			}
		}
}
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <DIO_u8GetPinValue>:

u8   DIO_u8GetPinValue      (u8 Copy_u8PortID, u8 Copy_u8PinID ){
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <DIO_u8GetPinValue+0x6>
    13c2:	0f 92       	push	r0
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	8a 83       	std	Y+2, r24	; 0x02
    13ca:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8State = 0xff ;
    13cc:	8f ef       	ldi	r24, 0xFF	; 255
    13ce:	89 83       	std	Y+1, r24	; 0x01
		if(Copy_u8PinID <= DIO_PIN7 && Copy_u8PortID < 5)
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	88 30       	cpi	r24, 0x08	; 8
    13d4:	e8 f4       	brcc	.+58     	; 0x1410 <DIO_u8GetPinValue+0x54>
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	85 30       	cpi	r24, 0x05	; 5
    13da:	d0 f4       	brcc	.+52     	; 0x1410 <DIO_u8GetPinValue+0x54>
		{
			Local_u8State = GET_BIT(*(Global_u8Pin_arr[Copy_u8PortID]),Copy_u8PinID);
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	fc 01       	movw	r30, r24
    13e8:	e6 57       	subi	r30, 0x76	; 118
    13ea:	fe 4f       	sbci	r31, 0xFE	; 254
    13ec:	01 90       	ld	r0, Z+
    13ee:	f0 81       	ld	r31, Z
    13f0:	e0 2d       	mov	r30, r0
    13f2:	80 81       	ld	r24, Z
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	88 2f       	mov	r24, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a9 01       	movw	r20, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <DIO_u8GetPinValue+0x4a>
    1402:	55 95       	asr	r21
    1404:	47 95       	ror	r20
    1406:	8a 95       	dec	r24
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <DIO_u8GetPinValue+0x46>
    140a:	ca 01       	movw	r24, r20
    140c:	81 70       	andi	r24, 0x01	; 1
    140e:	89 83       	std	Y+1, r24	; 0x01
		}else{

		}

	return Local_u8State ;
    1410:	89 81       	ldd	r24, Y+1	; 0x01
}
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	08 95       	ret

0000141e <DIO_voidSetPortVlaue>:
void DIO_voidSetPortVlaue    (u8 Copy_u8PortID, u8 Copy_u8Val){
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	00 d0       	rcall	.+0      	; 0x1424 <DIO_voidSetPortVlaue+0x6>
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	6a 83       	std	Y+2, r22	; 0x02
	if( Copy_u8PortID < 5)
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	85 30       	cpi	r24, 0x05	; 5
    1430:	68 f4       	brcc	.+26     	; 0x144c <DIO_voidSetPortVlaue+0x2e>
	{
		*(Global_u8PORT_arr[Copy_u8PortID]) = Copy_u8Val;
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	88 2f       	mov	r24, r24
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	fc 01       	movw	r30, r24
    143e:	ee 57       	subi	r30, 0x7E	; 126
    1440:	fe 4f       	sbci	r31, 0xFE	; 254
    1442:	01 90       	ld	r0, Z+
    1444:	f0 81       	ld	r31, Z
    1446:	e0 2d       	mov	r30, r0
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	80 83       	st	Z, r24
	}else{

	}

}
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <DIO_u8GetPortValue>:
u8   DIO_u8GetPortValue (u8 Copy_u8PortID)
{
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	0f 92       	push	r0
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	89 83       	std	Y+1, r24	; 0x01
	return * Global_u8Pin_arr[Copy_u8PortID];
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	88 2f       	mov	r24, r24
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	fc 01       	movw	r30, r24
    146e:	e6 57       	subi	r30, 0x76	; 118
    1470:	fe 4f       	sbci	r31, 0xFE	; 254
    1472:	01 90       	ld	r0, Z+
    1474:	f0 81       	ld	r31, Z
    1476:	e0 2d       	mov	r30, r0
    1478:	80 81       	ld	r24, Z
}
    147a:	0f 90       	pop	r0
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <GLCD_SendInstruction>:
u8 Current_Y_Position = 0;
u8 Current_Half = 0;


void GLCD_SendInstruction(u8 Instruction)
{
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	c9 54       	subi	r28, 0x49	; 73
    1490:	d0 40       	sbci	r29, 0x00	; 0
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	de bf       	out	0x3e, r29	; 62
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	cd bf       	out	0x3d, r28	; 61
    149c:	fe 01       	movw	r30, r28
    149e:	e7 5b       	subi	r30, 0xB7	; 183
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	80 83       	st	Z, r24
		DIO_voidSetPinVlaue(PORT_COMMAND_BUS,RS_PIN,DIO_PIN_LOW); //COMMAND
    14a4:	83 e0       	ldi	r24, 0x03	; 3
    14a6:	62 e0       	ldi	r22, 0x02	; 2
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
		DIO_voidSetPinVlaue(PORT_COMMAND_BUS,RW_PIN,DIO_PIN_LOW); //write operation
    14ae:	83 e0       	ldi	r24, 0x03	; 3
    14b0:	61 e0       	ldi	r22, 0x01	; 1
    14b2:	40 e0       	ldi	r20, 0x00	; 0
    14b4:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
		DIO_voidSetPortVlaue(PORT_DATA_BUS, Instruction); //send COMMAND
    14b8:	fe 01       	movw	r30, r28
    14ba:	e7 5b       	subi	r30, 0xB7	; 183
    14bc:	ff 4f       	sbci	r31, 0xFF	; 255
    14be:	82 e0       	ldi	r24, 0x02	; 2
    14c0:	60 81       	ld	r22, Z
    14c2:	0e 94 0f 0a 	call	0x141e	; 0x141e <DIO_voidSetPortVlaue>
    14c6:	fe 01       	movw	r30, r28
    14c8:	eb 5b       	subi	r30, 0xBB	; 187
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	a0 ea       	ldi	r26, 0xA0	; 160
    14d2:	b0 e4       	ldi	r27, 0x40	; 64
    14d4:	80 83       	st	Z, r24
    14d6:	91 83       	std	Z+1, r25	; 0x01
    14d8:	a2 83       	std	Z+2, r26	; 0x02
    14da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    14dc:	8e 01       	movw	r16, r28
    14de:	0f 5b       	subi	r16, 0xBF	; 191
    14e0:	1f 4f       	sbci	r17, 0xFF	; 255
    14e2:	fe 01       	movw	r30, r28
    14e4:	eb 5b       	subi	r30, 0xBB	; 187
    14e6:	ff 4f       	sbci	r31, 0xFF	; 255
    14e8:	60 81       	ld	r22, Z
    14ea:	71 81       	ldd	r23, Z+1	; 0x01
    14ec:	82 81       	ldd	r24, Z+2	; 0x02
    14ee:	93 81       	ldd	r25, Z+3	; 0x03
    14f0:	2b ea       	ldi	r18, 0xAB	; 171
    14f2:	3a ea       	ldi	r19, 0xAA	; 170
    14f4:	4a ea       	ldi	r20, 0xAA	; 170
    14f6:	50 e4       	ldi	r21, 0x40	; 64
    14f8:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	f8 01       	movw	r30, r16
    1502:	80 83       	st	Z, r24
    1504:	91 83       	std	Z+1, r25	; 0x01
    1506:	a2 83       	std	Z+2, r26	; 0x02
    1508:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    150a:	fe 01       	movw	r30, r28
    150c:	ef 5b       	subi	r30, 0xBF	; 191
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	60 81       	ld	r22, Z
    1512:	71 81       	ldd	r23, Z+1	; 0x01
    1514:	82 81       	ldd	r24, Z+2	; 0x02
    1516:	93 81       	ldd	r25, Z+3	; 0x03
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	40 e8       	ldi	r20, 0x80	; 128
    151e:	5f e3       	ldi	r21, 0x3F	; 63
    1520:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    1524:	88 23       	and	r24, r24
    1526:	34 f4       	brge	.+12     	; 0x1534 <GLCD_SendInstruction+0xb2>
		__ticks = 1;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	fe 01       	movw	r30, r28
    152c:	e0 5c       	subi	r30, 0xC0	; 192
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	80 83       	st	Z, r24
    1532:	9d c0       	rjmp	.+314    	; 0x166e <GLCD_SendInstruction+0x1ec>
	else if (__tmp > 255)
    1534:	fe 01       	movw	r30, r28
    1536:	ef 5b       	subi	r30, 0xBF	; 191
    1538:	ff 4f       	sbci	r31, 0xFF	; 255
    153a:	60 81       	ld	r22, Z
    153c:	71 81       	ldd	r23, Z+1	; 0x01
    153e:	82 81       	ldd	r24, Z+2	; 0x02
    1540:	93 81       	ldd	r25, Z+3	; 0x03
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	4f e7       	ldi	r20, 0x7F	; 127
    1548:	53 e4       	ldi	r21, 0x43	; 67
    154a:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    154e:	18 16       	cp	r1, r24
    1550:	0c f0       	brlt	.+2      	; 0x1554 <GLCD_SendInstruction+0xd2>
    1552:	7e c0       	rjmp	.+252    	; 0x1650 <GLCD_SendInstruction+0x1ce>
	{
		_delay_ms(__us / 1000.0);
    1554:	fe 01       	movw	r30, r28
    1556:	eb 5b       	subi	r30, 0xBB	; 187
    1558:	ff 4f       	sbci	r31, 0xFF	; 255
    155a:	60 81       	ld	r22, Z
    155c:	71 81       	ldd	r23, Z+1	; 0x01
    155e:	82 81       	ldd	r24, Z+2	; 0x02
    1560:	93 81       	ldd	r25, Z+3	; 0x03
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	4a e7       	ldi	r20, 0x7A	; 122
    1568:	54 e4       	ldi	r21, 0x44	; 68
    156a:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	8c af       	std	Y+60, r24	; 0x3c
    1574:	9d af       	std	Y+61, r25	; 0x3d
    1576:	ae af       	std	Y+62, r26	; 0x3e
    1578:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157a:	6c ad       	ldd	r22, Y+60	; 0x3c
    157c:	7d ad       	ldd	r23, Y+61	; 0x3d
    157e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1580:	9f ad       	ldd	r25, Y+63	; 0x3f
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	4a e7       	ldi	r20, 0x7A	; 122
    1588:	55 e4       	ldi	r21, 0x45	; 69
    158a:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	88 af       	std	Y+56, r24	; 0x38
    1594:	99 af       	std	Y+57, r25	; 0x39
    1596:	aa af       	std	Y+58, r26	; 0x3a
    1598:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    159a:	68 ad       	ldd	r22, Y+56	; 0x38
    159c:	79 ad       	ldd	r23, Y+57	; 0x39
    159e:	8a ad       	ldd	r24, Y+58	; 0x3a
    15a0:	9b ad       	ldd	r25, Y+59	; 0x3b
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e8       	ldi	r20, 0x80	; 128
    15a8:	5f e3       	ldi	r21, 0x3F	; 63
    15aa:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    15ae:	88 23       	and	r24, r24
    15b0:	2c f4       	brge	.+10     	; 0x15bc <GLCD_SendInstruction+0x13a>
		__ticks = 1;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	9f ab       	std	Y+55, r25	; 0x37
    15b8:	8e ab       	std	Y+54, r24	; 0x36
    15ba:	3f c0       	rjmp	.+126    	; 0x163a <GLCD_SendInstruction+0x1b8>
	else if (__tmp > 65535)
    15bc:	68 ad       	ldd	r22, Y+56	; 0x38
    15be:	79 ad       	ldd	r23, Y+57	; 0x39
    15c0:	8a ad       	ldd	r24, Y+58	; 0x3a
    15c2:	9b ad       	ldd	r25, Y+59	; 0x3b
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	3f ef       	ldi	r19, 0xFF	; 255
    15c8:	4f e7       	ldi	r20, 0x7F	; 127
    15ca:	57 e4       	ldi	r21, 0x47	; 71
    15cc:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    15d0:	18 16       	cp	r1, r24
    15d2:	4c f5       	brge	.+82     	; 0x1626 <GLCD_SendInstruction+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d4:	6c ad       	ldd	r22, Y+60	; 0x3c
    15d6:	7d ad       	ldd	r23, Y+61	; 0x3d
    15d8:	8e ad       	ldd	r24, Y+62	; 0x3e
    15da:	9f ad       	ldd	r25, Y+63	; 0x3f
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e2       	ldi	r20, 0x20	; 32
    15e2:	51 e4       	ldi	r21, 0x41	; 65
    15e4:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	bc 01       	movw	r22, r24
    15ee:	cd 01       	movw	r24, r26
    15f0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	9f ab       	std	Y+55, r25	; 0x37
    15fa:	8e ab       	std	Y+54, r24	; 0x36
    15fc:	0f c0       	rjmp	.+30     	; 0x161c <GLCD_SendInstruction+0x19a>
    15fe:	80 e9       	ldi	r24, 0x90	; 144
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	9d ab       	std	Y+53, r25	; 0x35
    1604:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1606:	8c a9       	ldd	r24, Y+52	; 0x34
    1608:	9d a9       	ldd	r25, Y+53	; 0x35
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <GLCD_SendInstruction+0x188>
    160e:	9d ab       	std	Y+53, r25	; 0x35
    1610:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1612:	8e a9       	ldd	r24, Y+54	; 0x36
    1614:	9f a9       	ldd	r25, Y+55	; 0x37
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	9f ab       	std	Y+55, r25	; 0x37
    161a:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161c:	8e a9       	ldd	r24, Y+54	; 0x36
    161e:	9f a9       	ldd	r25, Y+55	; 0x37
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	69 f7       	brne	.-38     	; 0x15fe <GLCD_SendInstruction+0x17c>
    1624:	2d c0       	rjmp	.+90     	; 0x1680 <GLCD_SendInstruction+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1626:	68 ad       	ldd	r22, Y+56	; 0x38
    1628:	79 ad       	ldd	r23, Y+57	; 0x39
    162a:	8a ad       	ldd	r24, Y+58	; 0x3a
    162c:	9b ad       	ldd	r25, Y+59	; 0x3b
    162e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	9f ab       	std	Y+55, r25	; 0x37
    1638:	8e ab       	std	Y+54, r24	; 0x36
    163a:	8e a9       	ldd	r24, Y+54	; 0x36
    163c:	9f a9       	ldd	r25, Y+55	; 0x37
    163e:	9b ab       	std	Y+51, r25	; 0x33
    1640:	8a ab       	std	Y+50, r24	; 0x32
    1642:	8a a9       	ldd	r24, Y+50	; 0x32
    1644:	9b a9       	ldd	r25, Y+51	; 0x33
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	f1 f7       	brne	.-4      	; 0x1646 <GLCD_SendInstruction+0x1c4>
    164a:	9b ab       	std	Y+51, r25	; 0x33
    164c:	8a ab       	std	Y+50, r24	; 0x32
    164e:	18 c0       	rjmp	.+48     	; 0x1680 <GLCD_SendInstruction+0x1fe>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1650:	fe 01       	movw	r30, r28
    1652:	ef 5b       	subi	r30, 0xBF	; 191
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	60 81       	ld	r22, Z
    1658:	71 81       	ldd	r23, Z+1	; 0x01
    165a:	82 81       	ldd	r24, Z+2	; 0x02
    165c:	93 81       	ldd	r25, Z+3	; 0x03
    165e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	fe 01       	movw	r30, r28
    1668:	e0 5c       	subi	r30, 0xC0	; 192
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
    166c:	80 83       	st	Z, r24
    166e:	fe 01       	movw	r30, r28
    1670:	e0 5c       	subi	r30, 0xC0	; 192
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	80 81       	ld	r24, Z
    1676:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1678:	89 a9       	ldd	r24, Y+49	; 0x31
    167a:	8a 95       	dec	r24
    167c:	f1 f7       	brne	.-4      	; 0x167a <GLCD_SendInstruction+0x1f8>
    167e:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(5);
		DIO_voidSetPinVlaue(PORT_COMMAND_BUS,EN_PIN,DIO_PIN_HIGH); //EN pulse
    1680:	83 e0       	ldi	r24, 0x03	; 3
    1682:	60 e0       	ldi	r22, 0x00	; 0
    1684:	41 e0       	ldi	r20, 0x01	; 1
    1686:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	a0 ea       	ldi	r26, 0xA0	; 160
    1690:	b0 e4       	ldi	r27, 0x40	; 64
    1692:	8d a7       	std	Y+45, r24	; 0x2d
    1694:	9e a7       	std	Y+46, r25	; 0x2e
    1696:	af a7       	std	Y+47, r26	; 0x2f
    1698:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    169a:	6d a5       	ldd	r22, Y+45	; 0x2d
    169c:	7e a5       	ldd	r23, Y+46	; 0x2e
    169e:	8f a5       	ldd	r24, Y+47	; 0x2f
    16a0:	98 a9       	ldd	r25, Y+48	; 0x30
    16a2:	2b ea       	ldi	r18, 0xAB	; 171
    16a4:	3a ea       	ldi	r19, 0xAA	; 170
    16a6:	4a ea       	ldi	r20, 0xAA	; 170
    16a8:	50 e4       	ldi	r21, 0x40	; 64
    16aa:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	89 a7       	std	Y+41, r24	; 0x29
    16b4:	9a a7       	std	Y+42, r25	; 0x2a
    16b6:	ab a7       	std	Y+43, r26	; 0x2b
    16b8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    16ba:	69 a5       	ldd	r22, Y+41	; 0x29
    16bc:	7a a5       	ldd	r23, Y+42	; 0x2a
    16be:	8b a5       	ldd	r24, Y+43	; 0x2b
    16c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 e8       	ldi	r20, 0x80	; 128
    16c8:	5f e3       	ldi	r21, 0x3F	; 63
    16ca:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    16ce:	88 23       	and	r24, r24
    16d0:	1c f4       	brge	.+6      	; 0x16d8 <GLCD_SendInstruction+0x256>
		__ticks = 1;
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	88 a7       	std	Y+40, r24	; 0x28
    16d6:	91 c0       	rjmp	.+290    	; 0x17fa <GLCD_SendInstruction+0x378>
	else if (__tmp > 255)
    16d8:	69 a5       	ldd	r22, Y+41	; 0x29
    16da:	7a a5       	ldd	r23, Y+42	; 0x2a
    16dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    16de:	9c a5       	ldd	r25, Y+44	; 0x2c
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	4f e7       	ldi	r20, 0x7F	; 127
    16e6:	53 e4       	ldi	r21, 0x43	; 67
    16e8:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    16ec:	18 16       	cp	r1, r24
    16ee:	0c f0       	brlt	.+2      	; 0x16f2 <GLCD_SendInstruction+0x270>
    16f0:	7b c0       	rjmp	.+246    	; 0x17e8 <GLCD_SendInstruction+0x366>
	{
		_delay_ms(__us / 1000.0);
    16f2:	6d a5       	ldd	r22, Y+45	; 0x2d
    16f4:	7e a5       	ldd	r23, Y+46	; 0x2e
    16f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    16f8:	98 a9       	ldd	r25, Y+48	; 0x30
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	4a e7       	ldi	r20, 0x7A	; 122
    1700:	54 e4       	ldi	r21, 0x44	; 68
    1702:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	8c a3       	std	Y+36, r24	; 0x24
    170c:	9d a3       	std	Y+37, r25	; 0x25
    170e:	ae a3       	std	Y+38, r26	; 0x26
    1710:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1712:	6c a1       	ldd	r22, Y+36	; 0x24
    1714:	7d a1       	ldd	r23, Y+37	; 0x25
    1716:	8e a1       	ldd	r24, Y+38	; 0x26
    1718:	9f a1       	ldd	r25, Y+39	; 0x27
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	4a e7       	ldi	r20, 0x7A	; 122
    1720:	55 e4       	ldi	r21, 0x45	; 69
    1722:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	88 a3       	std	Y+32, r24	; 0x20
    172c:	99 a3       	std	Y+33, r25	; 0x21
    172e:	aa a3       	std	Y+34, r26	; 0x22
    1730:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1732:	68 a1       	ldd	r22, Y+32	; 0x20
    1734:	79 a1       	ldd	r23, Y+33	; 0x21
    1736:	8a a1       	ldd	r24, Y+34	; 0x22
    1738:	9b a1       	ldd	r25, Y+35	; 0x23
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e8       	ldi	r20, 0x80	; 128
    1740:	5f e3       	ldi	r21, 0x3F	; 63
    1742:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    1746:	88 23       	and	r24, r24
    1748:	2c f4       	brge	.+10     	; 0x1754 <GLCD_SendInstruction+0x2d2>
		__ticks = 1;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	9f 8f       	std	Y+31, r25	; 0x1f
    1750:	8e 8f       	std	Y+30, r24	; 0x1e
    1752:	3f c0       	rjmp	.+126    	; 0x17d2 <GLCD_SendInstruction+0x350>
	else if (__tmp > 65535)
    1754:	68 a1       	ldd	r22, Y+32	; 0x20
    1756:	79 a1       	ldd	r23, Y+33	; 0x21
    1758:	8a a1       	ldd	r24, Y+34	; 0x22
    175a:	9b a1       	ldd	r25, Y+35	; 0x23
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	3f ef       	ldi	r19, 0xFF	; 255
    1760:	4f e7       	ldi	r20, 0x7F	; 127
    1762:	57 e4       	ldi	r21, 0x47	; 71
    1764:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    1768:	18 16       	cp	r1, r24
    176a:	4c f5       	brge	.+82     	; 0x17be <GLCD_SendInstruction+0x33c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176c:	6c a1       	ldd	r22, Y+36	; 0x24
    176e:	7d a1       	ldd	r23, Y+37	; 0x25
    1770:	8e a1       	ldd	r24, Y+38	; 0x26
    1772:	9f a1       	ldd	r25, Y+39	; 0x27
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e2       	ldi	r20, 0x20	; 32
    177a:	51 e4       	ldi	r21, 0x41	; 65
    177c:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	bc 01       	movw	r22, r24
    1786:	cd 01       	movw	r24, r26
    1788:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	9f 8f       	std	Y+31, r25	; 0x1f
    1792:	8e 8f       	std	Y+30, r24	; 0x1e
    1794:	0f c0       	rjmp	.+30     	; 0x17b4 <GLCD_SendInstruction+0x332>
    1796:	80 e9       	ldi	r24, 0x90	; 144
    1798:	91 e0       	ldi	r25, 0x01	; 1
    179a:	9d 8f       	std	Y+29, r25	; 0x1d
    179c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    179e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    17a0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <GLCD_SendInstruction+0x320>
    17a6:	9d 8f       	std	Y+29, r25	; 0x1d
    17a8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	9f 8f       	std	Y+31, r25	; 0x1f
    17b2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17b8:	00 97       	sbiw	r24, 0x00	; 0
    17ba:	69 f7       	brne	.-38     	; 0x1796 <GLCD_SendInstruction+0x314>
    17bc:	24 c0       	rjmp	.+72     	; 0x1806 <GLCD_SendInstruction+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17be:	68 a1       	ldd	r22, Y+32	; 0x20
    17c0:	79 a1       	ldd	r23, Y+33	; 0x21
    17c2:	8a a1       	ldd	r24, Y+34	; 0x22
    17c4:	9b a1       	ldd	r25, Y+35	; 0x23
    17c6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	9f 8f       	std	Y+31, r25	; 0x1f
    17d0:	8e 8f       	std	Y+30, r24	; 0x1e
    17d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17d6:	9b 8f       	std	Y+27, r25	; 0x1b
    17d8:	8a 8f       	std	Y+26, r24	; 0x1a
    17da:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17dc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	f1 f7       	brne	.-4      	; 0x17de <GLCD_SendInstruction+0x35c>
    17e2:	9b 8f       	std	Y+27, r25	; 0x1b
    17e4:	8a 8f       	std	Y+26, r24	; 0x1a
    17e6:	0f c0       	rjmp	.+30     	; 0x1806 <GLCD_SendInstruction+0x384>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17e8:	69 a5       	ldd	r22, Y+41	; 0x29
    17ea:	7a a5       	ldd	r23, Y+42	; 0x2a
    17ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    17ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    17f0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	88 a7       	std	Y+40, r24	; 0x28
    17fa:	88 a5       	ldd	r24, Y+40	; 0x28
    17fc:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17fe:	89 8d       	ldd	r24, Y+25	; 0x19
    1800:	8a 95       	dec	r24
    1802:	f1 f7       	brne	.-4      	; 0x1800 <GLCD_SendInstruction+0x37e>
    1804:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(5);
		DIO_voidSetPinVlaue(PORT_COMMAND_BUS,EN_PIN,DIO_PIN_LOW); //EN pulse
    1806:	83 e0       	ldi	r24, 0x03	; 3
    1808:	60 e0       	ldi	r22, 0x00	; 0
    180a:	40 e0       	ldi	r20, 0x00	; 0
    180c:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	a0 ea       	ldi	r26, 0xA0	; 160
    1816:	b0 e4       	ldi	r27, 0x40	; 64
    1818:	8d 8b       	std	Y+21, r24	; 0x15
    181a:	9e 8b       	std	Y+22, r25	; 0x16
    181c:	af 8b       	std	Y+23, r26	; 0x17
    181e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1820:	6d 89       	ldd	r22, Y+21	; 0x15
    1822:	7e 89       	ldd	r23, Y+22	; 0x16
    1824:	8f 89       	ldd	r24, Y+23	; 0x17
    1826:	98 8d       	ldd	r25, Y+24	; 0x18
    1828:	2b ea       	ldi	r18, 0xAB	; 171
    182a:	3a ea       	ldi	r19, 0xAA	; 170
    182c:	4a ea       	ldi	r20, 0xAA	; 170
    182e:	50 e4       	ldi	r21, 0x40	; 64
    1830:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	89 8b       	std	Y+17, r24	; 0x11
    183a:	9a 8b       	std	Y+18, r25	; 0x12
    183c:	ab 8b       	std	Y+19, r26	; 0x13
    183e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1840:	69 89       	ldd	r22, Y+17	; 0x11
    1842:	7a 89       	ldd	r23, Y+18	; 0x12
    1844:	8b 89       	ldd	r24, Y+19	; 0x13
    1846:	9c 89       	ldd	r25, Y+20	; 0x14
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	40 e8       	ldi	r20, 0x80	; 128
    184e:	5f e3       	ldi	r21, 0x3F	; 63
    1850:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    1854:	88 23       	and	r24, r24
    1856:	1c f4       	brge	.+6      	; 0x185e <GLCD_SendInstruction+0x3dc>
		__ticks = 1;
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	88 8b       	std	Y+16, r24	; 0x10
    185c:	91 c0       	rjmp	.+290    	; 0x1980 <GLCD_SendInstruction+0x4fe>
	else if (__tmp > 255)
    185e:	69 89       	ldd	r22, Y+17	; 0x11
    1860:	7a 89       	ldd	r23, Y+18	; 0x12
    1862:	8b 89       	ldd	r24, Y+19	; 0x13
    1864:	9c 89       	ldd	r25, Y+20	; 0x14
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	4f e7       	ldi	r20, 0x7F	; 127
    186c:	53 e4       	ldi	r21, 0x43	; 67
    186e:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    1872:	18 16       	cp	r1, r24
    1874:	0c f0       	brlt	.+2      	; 0x1878 <GLCD_SendInstruction+0x3f6>
    1876:	7b c0       	rjmp	.+246    	; 0x196e <GLCD_SendInstruction+0x4ec>
	{
		_delay_ms(__us / 1000.0);
    1878:	6d 89       	ldd	r22, Y+21	; 0x15
    187a:	7e 89       	ldd	r23, Y+22	; 0x16
    187c:	8f 89       	ldd	r24, Y+23	; 0x17
    187e:	98 8d       	ldd	r25, Y+24	; 0x18
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	4a e7       	ldi	r20, 0x7A	; 122
    1886:	54 e4       	ldi	r21, 0x44	; 68
    1888:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	8c 87       	std	Y+12, r24	; 0x0c
    1892:	9d 87       	std	Y+13, r25	; 0x0d
    1894:	ae 87       	std	Y+14, r26	; 0x0e
    1896:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1898:	6c 85       	ldd	r22, Y+12	; 0x0c
    189a:	7d 85       	ldd	r23, Y+13	; 0x0d
    189c:	8e 85       	ldd	r24, Y+14	; 0x0e
    189e:	9f 85       	ldd	r25, Y+15	; 0x0f
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	4a e7       	ldi	r20, 0x7A	; 122
    18a6:	55 e4       	ldi	r21, 0x45	; 69
    18a8:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	88 87       	std	Y+8, r24	; 0x08
    18b2:	99 87       	std	Y+9, r25	; 0x09
    18b4:	aa 87       	std	Y+10, r26	; 0x0a
    18b6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    18b8:	68 85       	ldd	r22, Y+8	; 0x08
    18ba:	79 85       	ldd	r23, Y+9	; 0x09
    18bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    18be:	9b 85       	ldd	r25, Y+11	; 0x0b
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	40 e8       	ldi	r20, 0x80	; 128
    18c6:	5f e3       	ldi	r21, 0x3F	; 63
    18c8:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    18cc:	88 23       	and	r24, r24
    18ce:	2c f4       	brge	.+10     	; 0x18da <GLCD_SendInstruction+0x458>
		__ticks = 1;
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	9f 83       	std	Y+7, r25	; 0x07
    18d6:	8e 83       	std	Y+6, r24	; 0x06
    18d8:	3f c0       	rjmp	.+126    	; 0x1958 <GLCD_SendInstruction+0x4d6>
	else if (__tmp > 65535)
    18da:	68 85       	ldd	r22, Y+8	; 0x08
    18dc:	79 85       	ldd	r23, Y+9	; 0x09
    18de:	8a 85       	ldd	r24, Y+10	; 0x0a
    18e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	3f ef       	ldi	r19, 0xFF	; 255
    18e6:	4f e7       	ldi	r20, 0x7F	; 127
    18e8:	57 e4       	ldi	r21, 0x47	; 71
    18ea:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    18ee:	18 16       	cp	r1, r24
    18f0:	4c f5       	brge	.+82     	; 0x1944 <GLCD_SendInstruction+0x4c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    18f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    18f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    18f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e2       	ldi	r20, 0x20	; 32
    1900:	51 e4       	ldi	r21, 0x41	; 65
    1902:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	bc 01       	movw	r22, r24
    190c:	cd 01       	movw	r24, r26
    190e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	9f 83       	std	Y+7, r25	; 0x07
    1918:	8e 83       	std	Y+6, r24	; 0x06
    191a:	0f c0       	rjmp	.+30     	; 0x193a <GLCD_SendInstruction+0x4b8>
    191c:	80 e9       	ldi	r24, 0x90	; 144
    191e:	91 e0       	ldi	r25, 0x01	; 1
    1920:	9d 83       	std	Y+5, r25	; 0x05
    1922:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1924:	8c 81       	ldd	r24, Y+4	; 0x04
    1926:	9d 81       	ldd	r25, Y+5	; 0x05
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	f1 f7       	brne	.-4      	; 0x1928 <GLCD_SendInstruction+0x4a6>
    192c:	9d 83       	std	Y+5, r25	; 0x05
    192e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1930:	8e 81       	ldd	r24, Y+6	; 0x06
    1932:	9f 81       	ldd	r25, Y+7	; 0x07
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	9f 83       	std	Y+7, r25	; 0x07
    1938:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193a:	8e 81       	ldd	r24, Y+6	; 0x06
    193c:	9f 81       	ldd	r25, Y+7	; 0x07
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	69 f7       	brne	.-38     	; 0x191c <GLCD_SendInstruction+0x49a>
    1942:	24 c0       	rjmp	.+72     	; 0x198c <GLCD_SendInstruction+0x50a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1944:	68 85       	ldd	r22, Y+8	; 0x08
    1946:	79 85       	ldd	r23, Y+9	; 0x09
    1948:	8a 85       	ldd	r24, Y+10	; 0x0a
    194a:	9b 85       	ldd	r25, Y+11	; 0x0b
    194c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	9f 83       	std	Y+7, r25	; 0x07
    1956:	8e 83       	std	Y+6, r24	; 0x06
    1958:	8e 81       	ldd	r24, Y+6	; 0x06
    195a:	9f 81       	ldd	r25, Y+7	; 0x07
    195c:	9b 83       	std	Y+3, r25	; 0x03
    195e:	8a 83       	std	Y+2, r24	; 0x02
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	9b 81       	ldd	r25, Y+3	; 0x03
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	f1 f7       	brne	.-4      	; 0x1964 <GLCD_SendInstruction+0x4e2>
    1968:	9b 83       	std	Y+3, r25	; 0x03
    196a:	8a 83       	std	Y+2, r24	; 0x02
    196c:	0f c0       	rjmp	.+30     	; 0x198c <GLCD_SendInstruction+0x50a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    196e:	69 89       	ldd	r22, Y+17	; 0x11
    1970:	7a 89       	ldd	r23, Y+18	; 0x12
    1972:	8b 89       	ldd	r24, Y+19	; 0x13
    1974:	9c 89       	ldd	r25, Y+20	; 0x14
    1976:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	88 8b       	std	Y+16, r24	; 0x10
    1980:	88 89       	ldd	r24, Y+16	; 0x10
    1982:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	8a 95       	dec	r24
    1988:	f1 f7       	brne	.-4      	; 0x1986 <GLCD_SendInstruction+0x504>
    198a:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(5);
}
    198c:	c7 5b       	subi	r28, 0xB7	; 183
    198e:	df 4f       	sbci	r29, 0xFF	; 255
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	1f 91       	pop	r17
    19a0:	0f 91       	pop	r16
    19a2:	08 95       	ret

000019a4 <GLCD_SendData>:

void GLCD_SendData(u8 Data)
{
    19a4:	0f 93       	push	r16
    19a6:	1f 93       	push	r17
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	c9 54       	subi	r28, 0x49	; 73
    19b2:	d0 40       	sbci	r29, 0x00	; 0
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	fe 01       	movw	r30, r28
    19c0:	e7 5b       	subi	r30, 0xB7	; 183
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	80 83       	st	Z, r24
		DIO_voidSetPinVlaue(PORT_COMMAND_BUS,RS_PIN,DIO_PIN_HIGH); //DATA
    19c6:	83 e0       	ldi	r24, 0x03	; 3
    19c8:	62 e0       	ldi	r22, 0x02	; 2
    19ca:	41 e0       	ldi	r20, 0x01	; 1
    19cc:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
		DIO_voidSetPinVlaue(PORT_COMMAND_BUS,RW_PIN,DIO_PIN_LOW); //write operation
    19d0:	83 e0       	ldi	r24, 0x03	; 3
    19d2:	61 e0       	ldi	r22, 0x01	; 1
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
		DIO_voidSetPortVlaue(PORT_DATA_BUS, Data); //send DATA
    19da:	fe 01       	movw	r30, r28
    19dc:	e7 5b       	subi	r30, 0xB7	; 183
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	82 e0       	ldi	r24, 0x02	; 2
    19e2:	60 81       	ld	r22, Z
    19e4:	0e 94 0f 0a 	call	0x141e	; 0x141e <DIO_voidSetPortVlaue>
    19e8:	fe 01       	movw	r30, r28
    19ea:	eb 5b       	subi	r30, 0xBB	; 187
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	a0 ea       	ldi	r26, 0xA0	; 160
    19f4:	b0 e4       	ldi	r27, 0x40	; 64
    19f6:	80 83       	st	Z, r24
    19f8:	91 83       	std	Z+1, r25	; 0x01
    19fa:	a2 83       	std	Z+2, r26	; 0x02
    19fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19fe:	8e 01       	movw	r16, r28
    1a00:	0f 5b       	subi	r16, 0xBF	; 191
    1a02:	1f 4f       	sbci	r17, 0xFF	; 255
    1a04:	fe 01       	movw	r30, r28
    1a06:	eb 5b       	subi	r30, 0xBB	; 187
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	60 81       	ld	r22, Z
    1a0c:	71 81       	ldd	r23, Z+1	; 0x01
    1a0e:	82 81       	ldd	r24, Z+2	; 0x02
    1a10:	93 81       	ldd	r25, Z+3	; 0x03
    1a12:	2b ea       	ldi	r18, 0xAB	; 171
    1a14:	3a ea       	ldi	r19, 0xAA	; 170
    1a16:	4a ea       	ldi	r20, 0xAA	; 170
    1a18:	50 e4       	ldi	r21, 0x40	; 64
    1a1a:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	f8 01       	movw	r30, r16
    1a24:	80 83       	st	Z, r24
    1a26:	91 83       	std	Z+1, r25	; 0x01
    1a28:	a2 83       	std	Z+2, r26	; 0x02
    1a2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	ef 5b       	subi	r30, 0xBF	; 191
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	60 81       	ld	r22, Z
    1a34:	71 81       	ldd	r23, Z+1	; 0x01
    1a36:	82 81       	ldd	r24, Z+2	; 0x02
    1a38:	93 81       	ldd	r25, Z+3	; 0x03
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	40 e8       	ldi	r20, 0x80	; 128
    1a40:	5f e3       	ldi	r21, 0x3F	; 63
    1a42:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    1a46:	88 23       	and	r24, r24
    1a48:	34 f4       	brge	.+12     	; 0x1a56 <GLCD_SendData+0xb2>
		__ticks = 1;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	e0 5c       	subi	r30, 0xC0	; 192
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	80 83       	st	Z, r24
    1a54:	9d c0       	rjmp	.+314    	; 0x1b90 <GLCD_SendData+0x1ec>
	else if (__tmp > 255)
    1a56:	fe 01       	movw	r30, r28
    1a58:	ef 5b       	subi	r30, 0xBF	; 191
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	60 81       	ld	r22, Z
    1a5e:	71 81       	ldd	r23, Z+1	; 0x01
    1a60:	82 81       	ldd	r24, Z+2	; 0x02
    1a62:	93 81       	ldd	r25, Z+3	; 0x03
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	4f e7       	ldi	r20, 0x7F	; 127
    1a6a:	53 e4       	ldi	r21, 0x43	; 67
    1a6c:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    1a70:	18 16       	cp	r1, r24
    1a72:	0c f0       	brlt	.+2      	; 0x1a76 <GLCD_SendData+0xd2>
    1a74:	7e c0       	rjmp	.+252    	; 0x1b72 <GLCD_SendData+0x1ce>
	{
		_delay_ms(__us / 1000.0);
    1a76:	fe 01       	movw	r30, r28
    1a78:	eb 5b       	subi	r30, 0xBB	; 187
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	60 81       	ld	r22, Z
    1a7e:	71 81       	ldd	r23, Z+1	; 0x01
    1a80:	82 81       	ldd	r24, Z+2	; 0x02
    1a82:	93 81       	ldd	r25, Z+3	; 0x03
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	4a e7       	ldi	r20, 0x7A	; 122
    1a8a:	54 e4       	ldi	r21, 0x44	; 68
    1a8c:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	8c af       	std	Y+60, r24	; 0x3c
    1a96:	9d af       	std	Y+61, r25	; 0x3d
    1a98:	ae af       	std	Y+62, r26	; 0x3e
    1a9a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9c:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a9e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1aa0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1aa2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	4a e7       	ldi	r20, 0x7A	; 122
    1aaa:	55 e4       	ldi	r21, 0x45	; 69
    1aac:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	88 af       	std	Y+56, r24	; 0x38
    1ab6:	99 af       	std	Y+57, r25	; 0x39
    1ab8:	aa af       	std	Y+58, r26	; 0x3a
    1aba:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1abc:	68 ad       	ldd	r22, Y+56	; 0x38
    1abe:	79 ad       	ldd	r23, Y+57	; 0x39
    1ac0:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ac2:	9b ad       	ldd	r25, Y+59	; 0x3b
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e8       	ldi	r20, 0x80	; 128
    1aca:	5f e3       	ldi	r21, 0x3F	; 63
    1acc:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    1ad0:	88 23       	and	r24, r24
    1ad2:	2c f4       	brge	.+10     	; 0x1ade <GLCD_SendData+0x13a>
		__ticks = 1;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	9f ab       	std	Y+55, r25	; 0x37
    1ada:	8e ab       	std	Y+54, r24	; 0x36
    1adc:	3f c0       	rjmp	.+126    	; 0x1b5c <GLCD_SendData+0x1b8>
	else if (__tmp > 65535)
    1ade:	68 ad       	ldd	r22, Y+56	; 0x38
    1ae0:	79 ad       	ldd	r23, Y+57	; 0x39
    1ae2:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ae4:	9b ad       	ldd	r25, Y+59	; 0x3b
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	3f ef       	ldi	r19, 0xFF	; 255
    1aea:	4f e7       	ldi	r20, 0x7F	; 127
    1aec:	57 e4       	ldi	r21, 0x47	; 71
    1aee:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    1af2:	18 16       	cp	r1, r24
    1af4:	4c f5       	brge	.+82     	; 0x1b48 <GLCD_SendData+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af6:	6c ad       	ldd	r22, Y+60	; 0x3c
    1af8:	7d ad       	ldd	r23, Y+61	; 0x3d
    1afa:	8e ad       	ldd	r24, Y+62	; 0x3e
    1afc:	9f ad       	ldd	r25, Y+63	; 0x3f
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e2       	ldi	r20, 0x20	; 32
    1b04:	51 e4       	ldi	r21, 0x41	; 65
    1b06:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	bc 01       	movw	r22, r24
    1b10:	cd 01       	movw	r24, r26
    1b12:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	9f ab       	std	Y+55, r25	; 0x37
    1b1c:	8e ab       	std	Y+54, r24	; 0x36
    1b1e:	0f c0       	rjmp	.+30     	; 0x1b3e <GLCD_SendData+0x19a>
    1b20:	80 e9       	ldi	r24, 0x90	; 144
    1b22:	91 e0       	ldi	r25, 0x01	; 1
    1b24:	9d ab       	std	Y+53, r25	; 0x35
    1b26:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b28:	8c a9       	ldd	r24, Y+52	; 0x34
    1b2a:	9d a9       	ldd	r25, Y+53	; 0x35
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	f1 f7       	brne	.-4      	; 0x1b2c <GLCD_SendData+0x188>
    1b30:	9d ab       	std	Y+53, r25	; 0x35
    1b32:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b34:	8e a9       	ldd	r24, Y+54	; 0x36
    1b36:	9f a9       	ldd	r25, Y+55	; 0x37
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	9f ab       	std	Y+55, r25	; 0x37
    1b3c:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3e:	8e a9       	ldd	r24, Y+54	; 0x36
    1b40:	9f a9       	ldd	r25, Y+55	; 0x37
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	69 f7       	brne	.-38     	; 0x1b20 <GLCD_SendData+0x17c>
    1b46:	2d c0       	rjmp	.+90     	; 0x1ba2 <GLCD_SendData+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b48:	68 ad       	ldd	r22, Y+56	; 0x38
    1b4a:	79 ad       	ldd	r23, Y+57	; 0x39
    1b4c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b4e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1b50:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	9f ab       	std	Y+55, r25	; 0x37
    1b5a:	8e ab       	std	Y+54, r24	; 0x36
    1b5c:	8e a9       	ldd	r24, Y+54	; 0x36
    1b5e:	9f a9       	ldd	r25, Y+55	; 0x37
    1b60:	9b ab       	std	Y+51, r25	; 0x33
    1b62:	8a ab       	std	Y+50, r24	; 0x32
    1b64:	8a a9       	ldd	r24, Y+50	; 0x32
    1b66:	9b a9       	ldd	r25, Y+51	; 0x33
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	f1 f7       	brne	.-4      	; 0x1b68 <GLCD_SendData+0x1c4>
    1b6c:	9b ab       	std	Y+51, r25	; 0x33
    1b6e:	8a ab       	std	Y+50, r24	; 0x32
    1b70:	18 c0       	rjmp	.+48     	; 0x1ba2 <GLCD_SendData+0x1fe>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b72:	fe 01       	movw	r30, r28
    1b74:	ef 5b       	subi	r30, 0xBF	; 191
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	60 81       	ld	r22, Z
    1b7a:	71 81       	ldd	r23, Z+1	; 0x01
    1b7c:	82 81       	ldd	r24, Z+2	; 0x02
    1b7e:	93 81       	ldd	r25, Z+3	; 0x03
    1b80:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	fe 01       	movw	r30, r28
    1b8a:	e0 5c       	subi	r30, 0xC0	; 192
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	80 83       	st	Z, r24
    1b90:	fe 01       	movw	r30, r28
    1b92:	e0 5c       	subi	r30, 0xC0	; 192
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	80 81       	ld	r24, Z
    1b98:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b9a:	89 a9       	ldd	r24, Y+49	; 0x31
    1b9c:	8a 95       	dec	r24
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <GLCD_SendData+0x1f8>
    1ba0:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(5);
		DIO_voidSetPinVlaue(PORT_COMMAND_BUS,EN_PIN,DIO_PIN_HIGH); //EN pulse
    1ba2:	83 e0       	ldi	r24, 0x03	; 3
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	41 e0       	ldi	r20, 0x01	; 1
    1ba8:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	a0 ea       	ldi	r26, 0xA0	; 160
    1bb2:	b0 e4       	ldi	r27, 0x40	; 64
    1bb4:	8d a7       	std	Y+45, r24	; 0x2d
    1bb6:	9e a7       	std	Y+46, r25	; 0x2e
    1bb8:	af a7       	std	Y+47, r26	; 0x2f
    1bba:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bbc:	6d a5       	ldd	r22, Y+45	; 0x2d
    1bbe:	7e a5       	ldd	r23, Y+46	; 0x2e
    1bc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bc2:	98 a9       	ldd	r25, Y+48	; 0x30
    1bc4:	2b ea       	ldi	r18, 0xAB	; 171
    1bc6:	3a ea       	ldi	r19, 0xAA	; 170
    1bc8:	4a ea       	ldi	r20, 0xAA	; 170
    1bca:	50 e4       	ldi	r21, 0x40	; 64
    1bcc:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	89 a7       	std	Y+41, r24	; 0x29
    1bd6:	9a a7       	std	Y+42, r25	; 0x2a
    1bd8:	ab a7       	std	Y+43, r26	; 0x2b
    1bda:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1bdc:	69 a5       	ldd	r22, Y+41	; 0x29
    1bde:	7a a5       	ldd	r23, Y+42	; 0x2a
    1be0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1be2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	40 e8       	ldi	r20, 0x80	; 128
    1bea:	5f e3       	ldi	r21, 0x3F	; 63
    1bec:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    1bf0:	88 23       	and	r24, r24
    1bf2:	1c f4       	brge	.+6      	; 0x1bfa <GLCD_SendData+0x256>
		__ticks = 1;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	88 a7       	std	Y+40, r24	; 0x28
    1bf8:	91 c0       	rjmp	.+290    	; 0x1d1c <GLCD_SendData+0x378>
	else if (__tmp > 255)
    1bfa:	69 a5       	ldd	r22, Y+41	; 0x29
    1bfc:	7a a5       	ldd	r23, Y+42	; 0x2a
    1bfe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c00:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	4f e7       	ldi	r20, 0x7F	; 127
    1c08:	53 e4       	ldi	r21, 0x43	; 67
    1c0a:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    1c0e:	18 16       	cp	r1, r24
    1c10:	0c f0       	brlt	.+2      	; 0x1c14 <GLCD_SendData+0x270>
    1c12:	7b c0       	rjmp	.+246    	; 0x1d0a <GLCD_SendData+0x366>
	{
		_delay_ms(__us / 1000.0);
    1c14:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c16:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	4a e7       	ldi	r20, 0x7A	; 122
    1c22:	54 e4       	ldi	r21, 0x44	; 68
    1c24:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	8c a3       	std	Y+36, r24	; 0x24
    1c2e:	9d a3       	std	Y+37, r25	; 0x25
    1c30:	ae a3       	std	Y+38, r26	; 0x26
    1c32:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c34:	6c a1       	ldd	r22, Y+36	; 0x24
    1c36:	7d a1       	ldd	r23, Y+37	; 0x25
    1c38:	8e a1       	ldd	r24, Y+38	; 0x26
    1c3a:	9f a1       	ldd	r25, Y+39	; 0x27
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	4a e7       	ldi	r20, 0x7A	; 122
    1c42:	55 e4       	ldi	r21, 0x45	; 69
    1c44:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	88 a3       	std	Y+32, r24	; 0x20
    1c4e:	99 a3       	std	Y+33, r25	; 0x21
    1c50:	aa a3       	std	Y+34, r26	; 0x22
    1c52:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1c54:	68 a1       	ldd	r22, Y+32	; 0x20
    1c56:	79 a1       	ldd	r23, Y+33	; 0x21
    1c58:	8a a1       	ldd	r24, Y+34	; 0x22
    1c5a:	9b a1       	ldd	r25, Y+35	; 0x23
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	40 e8       	ldi	r20, 0x80	; 128
    1c62:	5f e3       	ldi	r21, 0x3F	; 63
    1c64:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    1c68:	88 23       	and	r24, r24
    1c6a:	2c f4       	brge	.+10     	; 0x1c76 <GLCD_SendData+0x2d2>
		__ticks = 1;
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	9f 8f       	std	Y+31, r25	; 0x1f
    1c72:	8e 8f       	std	Y+30, r24	; 0x1e
    1c74:	3f c0       	rjmp	.+126    	; 0x1cf4 <GLCD_SendData+0x350>
	else if (__tmp > 65535)
    1c76:	68 a1       	ldd	r22, Y+32	; 0x20
    1c78:	79 a1       	ldd	r23, Y+33	; 0x21
    1c7a:	8a a1       	ldd	r24, Y+34	; 0x22
    1c7c:	9b a1       	ldd	r25, Y+35	; 0x23
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	3f ef       	ldi	r19, 0xFF	; 255
    1c82:	4f e7       	ldi	r20, 0x7F	; 127
    1c84:	57 e4       	ldi	r21, 0x47	; 71
    1c86:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    1c8a:	18 16       	cp	r1, r24
    1c8c:	4c f5       	brge	.+82     	; 0x1ce0 <GLCD_SendData+0x33c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8e:	6c a1       	ldd	r22, Y+36	; 0x24
    1c90:	7d a1       	ldd	r23, Y+37	; 0x25
    1c92:	8e a1       	ldd	r24, Y+38	; 0x26
    1c94:	9f a1       	ldd	r25, Y+39	; 0x27
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e2       	ldi	r20, 0x20	; 32
    1c9c:	51 e4       	ldi	r21, 0x41	; 65
    1c9e:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	bc 01       	movw	r22, r24
    1ca8:	cd 01       	movw	r24, r26
    1caa:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	9f 8f       	std	Y+31, r25	; 0x1f
    1cb4:	8e 8f       	std	Y+30, r24	; 0x1e
    1cb6:	0f c0       	rjmp	.+30     	; 0x1cd6 <GLCD_SendData+0x332>
    1cb8:	80 e9       	ldi	r24, 0x90	; 144
    1cba:	91 e0       	ldi	r25, 0x01	; 1
    1cbc:	9d 8f       	std	Y+29, r25	; 0x1d
    1cbe:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cc0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1cc2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	f1 f7       	brne	.-4      	; 0x1cc4 <GLCD_SendData+0x320>
    1cc8:	9d 8f       	std	Y+29, r25	; 0x1d
    1cca:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ccc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cce:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	9f 8f       	std	Y+31, r25	; 0x1f
    1cd4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cd8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	69 f7       	brne	.-38     	; 0x1cb8 <GLCD_SendData+0x314>
    1cde:	24 c0       	rjmp	.+72     	; 0x1d28 <GLCD_SendData+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce0:	68 a1       	ldd	r22, Y+32	; 0x20
    1ce2:	79 a1       	ldd	r23, Y+33	; 0x21
    1ce4:	8a a1       	ldd	r24, Y+34	; 0x22
    1ce6:	9b a1       	ldd	r25, Y+35	; 0x23
    1ce8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	9f 8f       	std	Y+31, r25	; 0x1f
    1cf2:	8e 8f       	std	Y+30, r24	; 0x1e
    1cf4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cf6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1cf8:	9b 8f       	std	Y+27, r25	; 0x1b
    1cfa:	8a 8f       	std	Y+26, r24	; 0x1a
    1cfc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cfe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	f1 f7       	brne	.-4      	; 0x1d00 <GLCD_SendData+0x35c>
    1d04:	9b 8f       	std	Y+27, r25	; 0x1b
    1d06:	8a 8f       	std	Y+26, r24	; 0x1a
    1d08:	0f c0       	rjmp	.+30     	; 0x1d28 <GLCD_SendData+0x384>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d0a:	69 a5       	ldd	r22, Y+41	; 0x29
    1d0c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d10:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d12:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	88 a7       	std	Y+40, r24	; 0x28
    1d1c:	88 a5       	ldd	r24, Y+40	; 0x28
    1d1e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d20:	89 8d       	ldd	r24, Y+25	; 0x19
    1d22:	8a 95       	dec	r24
    1d24:	f1 f7       	brne	.-4      	; 0x1d22 <GLCD_SendData+0x37e>
    1d26:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(5);
		DIO_voidSetPinVlaue(PORT_COMMAND_BUS,EN_PIN,DIO_PIN_LOW); //EN pulse
    1d28:	83 e0       	ldi	r24, 0x03	; 3
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	a0 ea       	ldi	r26, 0xA0	; 160
    1d38:	b0 e4       	ldi	r27, 0x40	; 64
    1d3a:	8d 8b       	std	Y+21, r24	; 0x15
    1d3c:	9e 8b       	std	Y+22, r25	; 0x16
    1d3e:	af 8b       	std	Y+23, r26	; 0x17
    1d40:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d42:	6d 89       	ldd	r22, Y+21	; 0x15
    1d44:	7e 89       	ldd	r23, Y+22	; 0x16
    1d46:	8f 89       	ldd	r24, Y+23	; 0x17
    1d48:	98 8d       	ldd	r25, Y+24	; 0x18
    1d4a:	2b ea       	ldi	r18, 0xAB	; 171
    1d4c:	3a ea       	ldi	r19, 0xAA	; 170
    1d4e:	4a ea       	ldi	r20, 0xAA	; 170
    1d50:	50 e4       	ldi	r21, 0x40	; 64
    1d52:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	89 8b       	std	Y+17, r24	; 0x11
    1d5c:	9a 8b       	std	Y+18, r25	; 0x12
    1d5e:	ab 8b       	std	Y+19, r26	; 0x13
    1d60:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d62:	69 89       	ldd	r22, Y+17	; 0x11
    1d64:	7a 89       	ldd	r23, Y+18	; 0x12
    1d66:	8b 89       	ldd	r24, Y+19	; 0x13
    1d68:	9c 89       	ldd	r25, Y+20	; 0x14
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	40 e8       	ldi	r20, 0x80	; 128
    1d70:	5f e3       	ldi	r21, 0x3F	; 63
    1d72:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    1d76:	88 23       	and	r24, r24
    1d78:	1c f4       	brge	.+6      	; 0x1d80 <GLCD_SendData+0x3dc>
		__ticks = 1;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	88 8b       	std	Y+16, r24	; 0x10
    1d7e:	91 c0       	rjmp	.+290    	; 0x1ea2 <GLCD_SendData+0x4fe>
	else if (__tmp > 255)
    1d80:	69 89       	ldd	r22, Y+17	; 0x11
    1d82:	7a 89       	ldd	r23, Y+18	; 0x12
    1d84:	8b 89       	ldd	r24, Y+19	; 0x13
    1d86:	9c 89       	ldd	r25, Y+20	; 0x14
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	4f e7       	ldi	r20, 0x7F	; 127
    1d8e:	53 e4       	ldi	r21, 0x43	; 67
    1d90:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    1d94:	18 16       	cp	r1, r24
    1d96:	0c f0       	brlt	.+2      	; 0x1d9a <GLCD_SendData+0x3f6>
    1d98:	7b c0       	rjmp	.+246    	; 0x1e90 <GLCD_SendData+0x4ec>
	{
		_delay_ms(__us / 1000.0);
    1d9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1da0:	98 8d       	ldd	r25, Y+24	; 0x18
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	4a e7       	ldi	r20, 0x7A	; 122
    1da8:	54 e4       	ldi	r21, 0x44	; 68
    1daa:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	8c 87       	std	Y+12, r24	; 0x0c
    1db4:	9d 87       	std	Y+13, r25	; 0x0d
    1db6:	ae 87       	std	Y+14, r26	; 0x0e
    1db8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dba:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dbc:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dbe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dc0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	4a e7       	ldi	r20, 0x7A	; 122
    1dc8:	55 e4       	ldi	r21, 0x45	; 69
    1dca:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	88 87       	std	Y+8, r24	; 0x08
    1dd4:	99 87       	std	Y+9, r25	; 0x09
    1dd6:	aa 87       	std	Y+10, r26	; 0x0a
    1dd8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1dda:	68 85       	ldd	r22, Y+8	; 0x08
    1ddc:	79 85       	ldd	r23, Y+9	; 0x09
    1dde:	8a 85       	ldd	r24, Y+10	; 0x0a
    1de0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e8       	ldi	r20, 0x80	; 128
    1de8:	5f e3       	ldi	r21, 0x3F	; 63
    1dea:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    1dee:	88 23       	and	r24, r24
    1df0:	2c f4       	brge	.+10     	; 0x1dfc <GLCD_SendData+0x458>
		__ticks = 1;
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	9f 83       	std	Y+7, r25	; 0x07
    1df8:	8e 83       	std	Y+6, r24	; 0x06
    1dfa:	3f c0       	rjmp	.+126    	; 0x1e7a <GLCD_SendData+0x4d6>
	else if (__tmp > 65535)
    1dfc:	68 85       	ldd	r22, Y+8	; 0x08
    1dfe:	79 85       	ldd	r23, Y+9	; 0x09
    1e00:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e02:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	3f ef       	ldi	r19, 0xFF	; 255
    1e08:	4f e7       	ldi	r20, 0x7F	; 127
    1e0a:	57 e4       	ldi	r21, 0x47	; 71
    1e0c:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    1e10:	18 16       	cp	r1, r24
    1e12:	4c f5       	brge	.+82     	; 0x1e66 <GLCD_SendData+0x4c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e14:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e16:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e18:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e1a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	40 e2       	ldi	r20, 0x20	; 32
    1e22:	51 e4       	ldi	r21, 0x41	; 65
    1e24:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	9f 83       	std	Y+7, r25	; 0x07
    1e3a:	8e 83       	std	Y+6, r24	; 0x06
    1e3c:	0f c0       	rjmp	.+30     	; 0x1e5c <GLCD_SendData+0x4b8>
    1e3e:	80 e9       	ldi	r24, 0x90	; 144
    1e40:	91 e0       	ldi	r25, 0x01	; 1
    1e42:	9d 83       	std	Y+5, r25	; 0x05
    1e44:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e46:	8c 81       	ldd	r24, Y+4	; 0x04
    1e48:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	f1 f7       	brne	.-4      	; 0x1e4a <GLCD_SendData+0x4a6>
    1e4e:	9d 83       	std	Y+5, r25	; 0x05
    1e50:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e52:	8e 81       	ldd	r24, Y+6	; 0x06
    1e54:	9f 81       	ldd	r25, Y+7	; 0x07
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	9f 83       	std	Y+7, r25	; 0x07
    1e5a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	69 f7       	brne	.-38     	; 0x1e3e <GLCD_SendData+0x49a>
    1e64:	24 c0       	rjmp	.+72     	; 0x1eae <GLCD_SendData+0x50a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e66:	68 85       	ldd	r22, Y+8	; 0x08
    1e68:	79 85       	ldd	r23, Y+9	; 0x09
    1e6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e6e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	9f 83       	std	Y+7, r25	; 0x07
    1e78:	8e 83       	std	Y+6, r24	; 0x06
    1e7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e7c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e7e:	9b 83       	std	Y+3, r25	; 0x03
    1e80:	8a 83       	std	Y+2, r24	; 0x02
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	9b 81       	ldd	r25, Y+3	; 0x03
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <GLCD_SendData+0x4e2>
    1e8a:	9b 83       	std	Y+3, r25	; 0x03
    1e8c:	8a 83       	std	Y+2, r24	; 0x02
    1e8e:	0f c0       	rjmp	.+30     	; 0x1eae <GLCD_SendData+0x50a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e90:	69 89       	ldd	r22, Y+17	; 0x11
    1e92:	7a 89       	ldd	r23, Y+18	; 0x12
    1e94:	8b 89       	ldd	r24, Y+19	; 0x13
    1e96:	9c 89       	ldd	r25, Y+20	; 0x14
    1e98:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	88 8b       	std	Y+16, r24	; 0x10
    1ea2:	88 89       	ldd	r24, Y+16	; 0x10
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	8a 95       	dec	r24
    1eaa:	f1 f7       	brne	.-4      	; 0x1ea8 <GLCD_SendData+0x504>
    1eac:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(5);
}
    1eae:	c7 5b       	subi	r28, 0xB7	; 183
    1eb0:	df 4f       	sbci	r29, 0xFF	; 255
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	de bf       	out	0x3e, r29	; 62
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	cd bf       	out	0x3d, r28	; 61
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	1f 91       	pop	r17
    1ec2:	0f 91       	pop	r16
    1ec4:	08 95       	ret

00001ec6 <GLCD_Init>:

void GLCD_Init(void)
{
    1ec6:	0f 93       	push	r16
    1ec8:	1f 93       	push	r17
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	c2 56       	subi	r28, 0x62	; 98
    1ed4:	d0 40       	sbci	r29, 0x00	; 0
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	de bf       	out	0x3e, r29	; 62
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	cd bf       	out	0x3d, r28	; 61
	/* direction out put (set manually) */
DIO_voidSetPortVlaue(PORT_COMMAND_BUS,DIO_PORT_OUTPUT );
    1ee0:	83 e0       	ldi	r24, 0x03	; 3
    1ee2:	6f ef       	ldi	r22, 0xFF	; 255
    1ee4:	0e 94 0f 0a 	call	0x141e	; 0x141e <DIO_voidSetPortVlaue>
DIO_voidSetPortVlaue(PORT_DATA_BUS,DIO_PORT_OUTPUT );
    1ee8:	82 e0       	ldi	r24, 0x02	; 2
    1eea:	6f ef       	ldi	r22, 0xFF	; 255
    1eec:	0e 94 0f 0a 	call	0x141e	; 0x141e <DIO_voidSetPortVlaue>
	/* reset pin == high (inactive) 	*/
	DIO_voidSetPinVlaue(PORT_COMMAND_BUS, RESET_PIN , DIO_PIN_HIGH);
    1ef0:	83 e0       	ldi	r24, 0x03	; 3
    1ef2:	65 e0       	ldi	r22, 0x05	; 5
    1ef4:	41 e0       	ldi	r20, 0x01	; 1
    1ef6:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
    1efa:	fe 01       	movw	r30, r28
    1efc:	e1 5a       	subi	r30, 0xA1	; 161
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	a0 ea       	ldi	r26, 0xA0	; 160
    1f06:	b1 e4       	ldi	r27, 0x41	; 65
    1f08:	80 83       	st	Z, r24
    1f0a:	91 83       	std	Z+1, r25	; 0x01
    1f0c:	a2 83       	std	Z+2, r26	; 0x02
    1f0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f10:	8e 01       	movw	r16, r28
    1f12:	05 5a       	subi	r16, 0xA5	; 165
    1f14:	1f 4f       	sbci	r17, 0xFF	; 255
    1f16:	fe 01       	movw	r30, r28
    1f18:	e1 5a       	subi	r30, 0xA1	; 161
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	60 81       	ld	r22, Z
    1f1e:	71 81       	ldd	r23, Z+1	; 0x01
    1f20:	82 81       	ldd	r24, Z+2	; 0x02
    1f22:	93 81       	ldd	r25, Z+3	; 0x03
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	4a e7       	ldi	r20, 0x7A	; 122
    1f2a:	55 e4       	ldi	r21, 0x45	; 69
    1f2c:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	f8 01       	movw	r30, r16
    1f36:	80 83       	st	Z, r24
    1f38:	91 83       	std	Z+1, r25	; 0x01
    1f3a:	a2 83       	std	Z+2, r26	; 0x02
    1f3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f3e:	fe 01       	movw	r30, r28
    1f40:	e5 5a       	subi	r30, 0xA5	; 165
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	60 81       	ld	r22, Z
    1f46:	71 81       	ldd	r23, Z+1	; 0x01
    1f48:	82 81       	ldd	r24, Z+2	; 0x02
    1f4a:	93 81       	ldd	r25, Z+3	; 0x03
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e8       	ldi	r20, 0x80	; 128
    1f52:	5f e3       	ldi	r21, 0x3F	; 63
    1f54:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    1f58:	88 23       	and	r24, r24
    1f5a:	44 f4       	brge	.+16     	; 0x1f6c <GLCD_Init+0xa6>
		__ticks = 1;
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	e7 5a       	subi	r30, 0xA7	; 167
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	91 83       	std	Z+1, r25	; 0x01
    1f68:	80 83       	st	Z, r24
    1f6a:	64 c0       	rjmp	.+200    	; 0x2034 <GLCD_Init+0x16e>
	else if (__tmp > 65535)
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	e5 5a       	subi	r30, 0xA5	; 165
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	60 81       	ld	r22, Z
    1f74:	71 81       	ldd	r23, Z+1	; 0x01
    1f76:	82 81       	ldd	r24, Z+2	; 0x02
    1f78:	93 81       	ldd	r25, Z+3	; 0x03
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	3f ef       	ldi	r19, 0xFF	; 255
    1f7e:	4f e7       	ldi	r20, 0x7F	; 127
    1f80:	57 e4       	ldi	r21, 0x47	; 71
    1f82:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    1f86:	18 16       	cp	r1, r24
    1f88:	0c f0       	brlt	.+2      	; 0x1f8c <GLCD_Init+0xc6>
    1f8a:	43 c0       	rjmp	.+134    	; 0x2012 <GLCD_Init+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	e1 5a       	subi	r30, 0xA1	; 161
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	60 81       	ld	r22, Z
    1f94:	71 81       	ldd	r23, Z+1	; 0x01
    1f96:	82 81       	ldd	r24, Z+2	; 0x02
    1f98:	93 81       	ldd	r25, Z+3	; 0x03
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e2       	ldi	r20, 0x20	; 32
    1fa0:	51 e4       	ldi	r21, 0x41	; 65
    1fa2:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	8e 01       	movw	r16, r28
    1fac:	07 5a       	subi	r16, 0xA7	; 167
    1fae:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	f8 01       	movw	r30, r16
    1fbe:	91 83       	std	Z+1, r25	; 0x01
    1fc0:	80 83       	st	Z, r24
    1fc2:	1f c0       	rjmp	.+62     	; 0x2002 <GLCD_Init+0x13c>
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	e9 5a       	subi	r30, 0xA9	; 169
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	80 e9       	ldi	r24, 0x90	; 144
    1fcc:	91 e0       	ldi	r25, 0x01	; 1
    1fce:	91 83       	std	Z+1, r25	; 0x01
    1fd0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e9 5a       	subi	r30, 0xA9	; 169
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	80 81       	ld	r24, Z
    1fda:	91 81       	ldd	r25, Z+1	; 0x01
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <GLCD_Init+0x116>
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	e9 5a       	subi	r30, 0xA9	; 169
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	91 83       	std	Z+1, r25	; 0x01
    1fe8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fea:	de 01       	movw	r26, r28
    1fec:	a7 5a       	subi	r26, 0xA7	; 167
    1fee:	bf 4f       	sbci	r27, 0xFF	; 255
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	e7 5a       	subi	r30, 0xA7	; 167
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	80 81       	ld	r24, Z
    1ff8:	91 81       	ldd	r25, Z+1	; 0x01
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	11 96       	adiw	r26, 0x01	; 1
    1ffe:	9c 93       	st	X, r25
    2000:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2002:	fe 01       	movw	r30, r28
    2004:	e7 5a       	subi	r30, 0xA7	; 167
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	80 81       	ld	r24, Z
    200a:	91 81       	ldd	r25, Z+1	; 0x01
    200c:	00 97       	sbiw	r24, 0x00	; 0
    200e:	d1 f6       	brne	.-76     	; 0x1fc4 <GLCD_Init+0xfe>
    2010:	27 c0       	rjmp	.+78     	; 0x2060 <GLCD_Init+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2012:	8e 01       	movw	r16, r28
    2014:	07 5a       	subi	r16, 0xA7	; 167
    2016:	1f 4f       	sbci	r17, 0xFF	; 255
    2018:	fe 01       	movw	r30, r28
    201a:	e5 5a       	subi	r30, 0xA5	; 165
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	60 81       	ld	r22, Z
    2020:	71 81       	ldd	r23, Z+1	; 0x01
    2022:	82 81       	ldd	r24, Z+2	; 0x02
    2024:	93 81       	ldd	r25, Z+3	; 0x03
    2026:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	f8 01       	movw	r30, r16
    2030:	91 83       	std	Z+1, r25	; 0x01
    2032:	80 83       	st	Z, r24
    2034:	de 01       	movw	r26, r28
    2036:	ab 5a       	subi	r26, 0xAB	; 171
    2038:	bf 4f       	sbci	r27, 0xFF	; 255
    203a:	fe 01       	movw	r30, r28
    203c:	e7 5a       	subi	r30, 0xA7	; 167
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	80 81       	ld	r24, Z
    2042:	91 81       	ldd	r25, Z+1	; 0x01
    2044:	8d 93       	st	X+, r24
    2046:	9c 93       	st	X, r25
    2048:	fe 01       	movw	r30, r28
    204a:	eb 5a       	subi	r30, 0xAB	; 171
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	80 81       	ld	r24, Z
    2050:	91 81       	ldd	r25, Z+1	; 0x01
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	f1 f7       	brne	.-4      	; 0x2052 <GLCD_Init+0x18c>
    2056:	fe 01       	movw	r30, r28
    2058:	eb 5a       	subi	r30, 0xAB	; 171
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	91 83       	std	Z+1, r25	; 0x01
    205e:	80 83       	st	Z, r24
	_delay_ms(20);
GLCD_Page_Select(LEFT_SEGMENT_PIN);
    2060:	84 e0       	ldi	r24, 0x04	; 4
    2062:	0e 94 53 13 	call	0x26a6	; 0x26a6 <GLCD_Page_Select>
    2066:	fe 01       	movw	r30, r28
    2068:	ef 5a       	subi	r30, 0xAF	; 175
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	a0 e2       	ldi	r26, 0x20	; 32
    2072:	b1 e4       	ldi	r27, 0x41	; 65
    2074:	80 83       	st	Z, r24
    2076:	91 83       	std	Z+1, r25	; 0x01
    2078:	a2 83       	std	Z+2, r26	; 0x02
    207a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207c:	8e 01       	movw	r16, r28
    207e:	03 5b       	subi	r16, 0xB3	; 179
    2080:	1f 4f       	sbci	r17, 0xFF	; 255
    2082:	fe 01       	movw	r30, r28
    2084:	ef 5a       	subi	r30, 0xAF	; 175
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	60 81       	ld	r22, Z
    208a:	71 81       	ldd	r23, Z+1	; 0x01
    208c:	82 81       	ldd	r24, Z+2	; 0x02
    208e:	93 81       	ldd	r25, Z+3	; 0x03
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	4a e7       	ldi	r20, 0x7A	; 122
    2096:	55 e4       	ldi	r21, 0x45	; 69
    2098:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	f8 01       	movw	r30, r16
    20a2:	80 83       	st	Z, r24
    20a4:	91 83       	std	Z+1, r25	; 0x01
    20a6:	a2 83       	std	Z+2, r26	; 0x02
    20a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20aa:	fe 01       	movw	r30, r28
    20ac:	e3 5b       	subi	r30, 0xB3	; 179
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	60 81       	ld	r22, Z
    20b2:	71 81       	ldd	r23, Z+1	; 0x01
    20b4:	82 81       	ldd	r24, Z+2	; 0x02
    20b6:	93 81       	ldd	r25, Z+3	; 0x03
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e8       	ldi	r20, 0x80	; 128
    20be:	5f e3       	ldi	r21, 0x3F	; 63
    20c0:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    20c4:	88 23       	and	r24, r24
    20c6:	44 f4       	brge	.+16     	; 0x20d8 <GLCD_Init+0x212>
		__ticks = 1;
    20c8:	fe 01       	movw	r30, r28
    20ca:	e5 5b       	subi	r30, 0xB5	; 181
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	91 83       	std	Z+1, r25	; 0x01
    20d4:	80 83       	st	Z, r24
    20d6:	64 c0       	rjmp	.+200    	; 0x21a0 <GLCD_Init+0x2da>
	else if (__tmp > 65535)
    20d8:	fe 01       	movw	r30, r28
    20da:	e3 5b       	subi	r30, 0xB3	; 179
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	60 81       	ld	r22, Z
    20e0:	71 81       	ldd	r23, Z+1	; 0x01
    20e2:	82 81       	ldd	r24, Z+2	; 0x02
    20e4:	93 81       	ldd	r25, Z+3	; 0x03
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	3f ef       	ldi	r19, 0xFF	; 255
    20ea:	4f e7       	ldi	r20, 0x7F	; 127
    20ec:	57 e4       	ldi	r21, 0x47	; 71
    20ee:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    20f2:	18 16       	cp	r1, r24
    20f4:	0c f0       	brlt	.+2      	; 0x20f8 <GLCD_Init+0x232>
    20f6:	43 c0       	rjmp	.+134    	; 0x217e <GLCD_Init+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f8:	fe 01       	movw	r30, r28
    20fa:	ef 5a       	subi	r30, 0xAF	; 175
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	60 81       	ld	r22, Z
    2100:	71 81       	ldd	r23, Z+1	; 0x01
    2102:	82 81       	ldd	r24, Z+2	; 0x02
    2104:	93 81       	ldd	r25, Z+3	; 0x03
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e2       	ldi	r20, 0x20	; 32
    210c:	51 e4       	ldi	r21, 0x41	; 65
    210e:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	8e 01       	movw	r16, r28
    2118:	05 5b       	subi	r16, 0xB5	; 181
    211a:	1f 4f       	sbci	r17, 0xFF	; 255
    211c:	bc 01       	movw	r22, r24
    211e:	cd 01       	movw	r24, r26
    2120:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	f8 01       	movw	r30, r16
    212a:	91 83       	std	Z+1, r25	; 0x01
    212c:	80 83       	st	Z, r24
    212e:	1f c0       	rjmp	.+62     	; 0x216e <GLCD_Init+0x2a8>
    2130:	fe 01       	movw	r30, r28
    2132:	e7 5b       	subi	r30, 0xB7	; 183
    2134:	ff 4f       	sbci	r31, 0xFF	; 255
    2136:	80 e9       	ldi	r24, 0x90	; 144
    2138:	91 e0       	ldi	r25, 0x01	; 1
    213a:	91 83       	std	Z+1, r25	; 0x01
    213c:	80 83       	st	Z, r24
    213e:	fe 01       	movw	r30, r28
    2140:	e7 5b       	subi	r30, 0xB7	; 183
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	80 81       	ld	r24, Z
    2146:	91 81       	ldd	r25, Z+1	; 0x01
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <GLCD_Init+0x282>
    214c:	fe 01       	movw	r30, r28
    214e:	e7 5b       	subi	r30, 0xB7	; 183
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	91 83       	std	Z+1, r25	; 0x01
    2154:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2156:	de 01       	movw	r26, r28
    2158:	a5 5b       	subi	r26, 0xB5	; 181
    215a:	bf 4f       	sbci	r27, 0xFF	; 255
    215c:	fe 01       	movw	r30, r28
    215e:	e5 5b       	subi	r30, 0xB5	; 181
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	80 81       	ld	r24, Z
    2164:	91 81       	ldd	r25, Z+1	; 0x01
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	11 96       	adiw	r26, 0x01	; 1
    216a:	9c 93       	st	X, r25
    216c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216e:	fe 01       	movw	r30, r28
    2170:	e5 5b       	subi	r30, 0xB5	; 181
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	80 81       	ld	r24, Z
    2176:	91 81       	ldd	r25, Z+1	; 0x01
    2178:	00 97       	sbiw	r24, 0x00	; 0
    217a:	d1 f6       	brne	.-76     	; 0x2130 <GLCD_Init+0x26a>
    217c:	27 c0       	rjmp	.+78     	; 0x21cc <GLCD_Init+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217e:	8e 01       	movw	r16, r28
    2180:	05 5b       	subi	r16, 0xB5	; 181
    2182:	1f 4f       	sbci	r17, 0xFF	; 255
    2184:	fe 01       	movw	r30, r28
    2186:	e3 5b       	subi	r30, 0xB3	; 179
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	60 81       	ld	r22, Z
    218c:	71 81       	ldd	r23, Z+1	; 0x01
    218e:	82 81       	ldd	r24, Z+2	; 0x02
    2190:	93 81       	ldd	r25, Z+3	; 0x03
    2192:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	f8 01       	movw	r30, r16
    219c:	91 83       	std	Z+1, r25	; 0x01
    219e:	80 83       	st	Z, r24
    21a0:	de 01       	movw	r26, r28
    21a2:	a9 5b       	subi	r26, 0xB9	; 185
    21a4:	bf 4f       	sbci	r27, 0xFF	; 255
    21a6:	fe 01       	movw	r30, r28
    21a8:	e5 5b       	subi	r30, 0xB5	; 181
    21aa:	ff 4f       	sbci	r31, 0xFF	; 255
    21ac:	80 81       	ld	r24, Z
    21ae:	91 81       	ldd	r25, Z+1	; 0x01
    21b0:	8d 93       	st	X+, r24
    21b2:	9c 93       	st	X, r25
    21b4:	fe 01       	movw	r30, r28
    21b6:	e9 5b       	subi	r30, 0xB9	; 185
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	80 81       	ld	r24, Z
    21bc:	91 81       	ldd	r25, Z+1	; 0x01
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <GLCD_Init+0x2f8>
    21c2:	fe 01       	movw	r30, r28
    21c4:	e9 5b       	subi	r30, 0xB9	; 185
    21c6:	ff 4f       	sbci	r31, 0xFF	; 255
    21c8:	91 83       	std	Z+1, r25	; 0x01
    21ca:	80 83       	st	Z, r24
    _delay_ms(10);
    GLCD_SendInstruction(DISPLAY_OFF);
    21cc:	8e e3       	ldi	r24, 0x3E	; 62
    21ce:	0e 94 41 0a 	call	0x1482	; 0x1482 <GLCD_SendInstruction>
    21d2:	fe 01       	movw	r30, r28
    21d4:	ed 5b       	subi	r30, 0xBD	; 189
    21d6:	ff 4f       	sbci	r31, 0xFF	; 255
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	a0 e2       	ldi	r26, 0x20	; 32
    21de:	b1 e4       	ldi	r27, 0x41	; 65
    21e0:	80 83       	st	Z, r24
    21e2:	91 83       	std	Z+1, r25	; 0x01
    21e4:	a2 83       	std	Z+2, r26	; 0x02
    21e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e8:	8e 01       	movw	r16, r28
    21ea:	01 5c       	subi	r16, 0xC1	; 193
    21ec:	1f 4f       	sbci	r17, 0xFF	; 255
    21ee:	fe 01       	movw	r30, r28
    21f0:	ed 5b       	subi	r30, 0xBD	; 189
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	60 81       	ld	r22, Z
    21f6:	71 81       	ldd	r23, Z+1	; 0x01
    21f8:	82 81       	ldd	r24, Z+2	; 0x02
    21fa:	93 81       	ldd	r25, Z+3	; 0x03
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	4a e7       	ldi	r20, 0x7A	; 122
    2202:	55 e4       	ldi	r21, 0x45	; 69
    2204:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	f8 01       	movw	r30, r16
    220e:	80 83       	st	Z, r24
    2210:	91 83       	std	Z+1, r25	; 0x01
    2212:	a2 83       	std	Z+2, r26	; 0x02
    2214:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2216:	fe 01       	movw	r30, r28
    2218:	ff 96       	adiw	r30, 0x3f	; 63
    221a:	60 81       	ld	r22, Z
    221c:	71 81       	ldd	r23, Z+1	; 0x01
    221e:	82 81       	ldd	r24, Z+2	; 0x02
    2220:	93 81       	ldd	r25, Z+3	; 0x03
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	40 e8       	ldi	r20, 0x80	; 128
    2228:	5f e3       	ldi	r21, 0x3F	; 63
    222a:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    222e:	88 23       	and	r24, r24
    2230:	2c f4       	brge	.+10     	; 0x223c <GLCD_Init+0x376>
		__ticks = 1;
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	9e af       	std	Y+62, r25	; 0x3e
    2238:	8d af       	std	Y+61, r24	; 0x3d
    223a:	46 c0       	rjmp	.+140    	; 0x22c8 <GLCD_Init+0x402>
	else if (__tmp > 65535)
    223c:	fe 01       	movw	r30, r28
    223e:	ff 96       	adiw	r30, 0x3f	; 63
    2240:	60 81       	ld	r22, Z
    2242:	71 81       	ldd	r23, Z+1	; 0x01
    2244:	82 81       	ldd	r24, Z+2	; 0x02
    2246:	93 81       	ldd	r25, Z+3	; 0x03
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	3f ef       	ldi	r19, 0xFF	; 255
    224c:	4f e7       	ldi	r20, 0x7F	; 127
    224e:	57 e4       	ldi	r21, 0x47	; 71
    2250:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    2254:	18 16       	cp	r1, r24
    2256:	64 f5       	brge	.+88     	; 0x22b0 <GLCD_Init+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2258:	fe 01       	movw	r30, r28
    225a:	ed 5b       	subi	r30, 0xBD	; 189
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	60 81       	ld	r22, Z
    2260:	71 81       	ldd	r23, Z+1	; 0x01
    2262:	82 81       	ldd	r24, Z+2	; 0x02
    2264:	93 81       	ldd	r25, Z+3	; 0x03
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e2       	ldi	r20, 0x20	; 32
    226c:	51 e4       	ldi	r21, 0x41	; 65
    226e:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	bc 01       	movw	r22, r24
    2278:	cd 01       	movw	r24, r26
    227a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	9e af       	std	Y+62, r25	; 0x3e
    2284:	8d af       	std	Y+61, r24	; 0x3d
    2286:	0f c0       	rjmp	.+30     	; 0x22a6 <GLCD_Init+0x3e0>
    2288:	80 e9       	ldi	r24, 0x90	; 144
    228a:	91 e0       	ldi	r25, 0x01	; 1
    228c:	9c af       	std	Y+60, r25	; 0x3c
    228e:	8b af       	std	Y+59, r24	; 0x3b
    2290:	8b ad       	ldd	r24, Y+59	; 0x3b
    2292:	9c ad       	ldd	r25, Y+60	; 0x3c
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <GLCD_Init+0x3ce>
    2298:	9c af       	std	Y+60, r25	; 0x3c
    229a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229c:	8d ad       	ldd	r24, Y+61	; 0x3d
    229e:	9e ad       	ldd	r25, Y+62	; 0x3e
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	9e af       	std	Y+62, r25	; 0x3e
    22a4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    22a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	69 f7       	brne	.-38     	; 0x2288 <GLCD_Init+0x3c2>
    22ae:	16 c0       	rjmp	.+44     	; 0x22dc <GLCD_Init+0x416>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b0:	fe 01       	movw	r30, r28
    22b2:	ff 96       	adiw	r30, 0x3f	; 63
    22b4:	60 81       	ld	r22, Z
    22b6:	71 81       	ldd	r23, Z+1	; 0x01
    22b8:	82 81       	ldd	r24, Z+2	; 0x02
    22ba:	93 81       	ldd	r25, Z+3	; 0x03
    22bc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	9e af       	std	Y+62, r25	; 0x3e
    22c6:	8d af       	std	Y+61, r24	; 0x3d
    22c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    22ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    22cc:	9a af       	std	Y+58, r25	; 0x3a
    22ce:	89 af       	std	Y+57, r24	; 0x39
    22d0:	89 ad       	ldd	r24, Y+57	; 0x39
    22d2:	9a ad       	ldd	r25, Y+58	; 0x3a
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <GLCD_Init+0x40e>
    22d8:	9a af       	std	Y+58, r25	; 0x3a
    22da:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(10);
	GLCD_SendInstruction(Y_FIRST_ADDRESS);
    22dc:	80 e4       	ldi	r24, 0x40	; 64
    22de:	0e 94 41 0a 	call	0x1482	; 0x1482 <GLCD_SendInstruction>
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	a0 e2       	ldi	r26, 0x20	; 32
    22e8:	b1 e4       	ldi	r27, 0x41	; 65
    22ea:	8d ab       	std	Y+53, r24	; 0x35
    22ec:	9e ab       	std	Y+54, r25	; 0x36
    22ee:	af ab       	std	Y+55, r26	; 0x37
    22f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f2:	6d a9       	ldd	r22, Y+53	; 0x35
    22f4:	7e a9       	ldd	r23, Y+54	; 0x36
    22f6:	8f a9       	ldd	r24, Y+55	; 0x37
    22f8:	98 ad       	ldd	r25, Y+56	; 0x38
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	4a e7       	ldi	r20, 0x7A	; 122
    2300:	55 e4       	ldi	r21, 0x45	; 69
    2302:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	89 ab       	std	Y+49, r24	; 0x31
    230c:	9a ab       	std	Y+50, r25	; 0x32
    230e:	ab ab       	std	Y+51, r26	; 0x33
    2310:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2312:	69 a9       	ldd	r22, Y+49	; 0x31
    2314:	7a a9       	ldd	r23, Y+50	; 0x32
    2316:	8b a9       	ldd	r24, Y+51	; 0x33
    2318:	9c a9       	ldd	r25, Y+52	; 0x34
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e8       	ldi	r20, 0x80	; 128
    2320:	5f e3       	ldi	r21, 0x3F	; 63
    2322:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    2326:	88 23       	and	r24, r24
    2328:	2c f4       	brge	.+10     	; 0x2334 <GLCD_Init+0x46e>
		__ticks = 1;
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	98 ab       	std	Y+48, r25	; 0x30
    2330:	8f a7       	std	Y+47, r24	; 0x2f
    2332:	3f c0       	rjmp	.+126    	; 0x23b2 <GLCD_Init+0x4ec>
	else if (__tmp > 65535)
    2334:	69 a9       	ldd	r22, Y+49	; 0x31
    2336:	7a a9       	ldd	r23, Y+50	; 0x32
    2338:	8b a9       	ldd	r24, Y+51	; 0x33
    233a:	9c a9       	ldd	r25, Y+52	; 0x34
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	3f ef       	ldi	r19, 0xFF	; 255
    2340:	4f e7       	ldi	r20, 0x7F	; 127
    2342:	57 e4       	ldi	r21, 0x47	; 71
    2344:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    2348:	18 16       	cp	r1, r24
    234a:	4c f5       	brge	.+82     	; 0x239e <GLCD_Init+0x4d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234c:	6d a9       	ldd	r22, Y+53	; 0x35
    234e:	7e a9       	ldd	r23, Y+54	; 0x36
    2350:	8f a9       	ldd	r24, Y+55	; 0x37
    2352:	98 ad       	ldd	r25, Y+56	; 0x38
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	40 e2       	ldi	r20, 0x20	; 32
    235a:	51 e4       	ldi	r21, 0x41	; 65
    235c:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	bc 01       	movw	r22, r24
    2366:	cd 01       	movw	r24, r26
    2368:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	98 ab       	std	Y+48, r25	; 0x30
    2372:	8f a7       	std	Y+47, r24	; 0x2f
    2374:	0f c0       	rjmp	.+30     	; 0x2394 <GLCD_Init+0x4ce>
    2376:	80 e9       	ldi	r24, 0x90	; 144
    2378:	91 e0       	ldi	r25, 0x01	; 1
    237a:	9e a7       	std	Y+46, r25	; 0x2e
    237c:	8d a7       	std	Y+45, r24	; 0x2d
    237e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2380:	9e a5       	ldd	r25, Y+46	; 0x2e
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <GLCD_Init+0x4bc>
    2386:	9e a7       	std	Y+46, r25	; 0x2e
    2388:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238a:	8f a5       	ldd	r24, Y+47	; 0x2f
    238c:	98 a9       	ldd	r25, Y+48	; 0x30
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	98 ab       	std	Y+48, r25	; 0x30
    2392:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2394:	8f a5       	ldd	r24, Y+47	; 0x2f
    2396:	98 a9       	ldd	r25, Y+48	; 0x30
    2398:	00 97       	sbiw	r24, 0x00	; 0
    239a:	69 f7       	brne	.-38     	; 0x2376 <GLCD_Init+0x4b0>
    239c:	14 c0       	rjmp	.+40     	; 0x23c6 <GLCD_Init+0x500>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239e:	69 a9       	ldd	r22, Y+49	; 0x31
    23a0:	7a a9       	ldd	r23, Y+50	; 0x32
    23a2:	8b a9       	ldd	r24, Y+51	; 0x33
    23a4:	9c a9       	ldd	r25, Y+52	; 0x34
    23a6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	98 ab       	std	Y+48, r25	; 0x30
    23b0:	8f a7       	std	Y+47, r24	; 0x2f
    23b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    23b4:	98 a9       	ldd	r25, Y+48	; 0x30
    23b6:	9c a7       	std	Y+44, r25	; 0x2c
    23b8:	8b a7       	std	Y+43, r24	; 0x2b
    23ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    23bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <GLCD_Init+0x4f8>
    23c2:	9c a7       	std	Y+44, r25	; 0x2c
    23c4:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(10);
    GLCD_SendInstruction(X_FIRST_ADDRESS);
    23c6:	88 eb       	ldi	r24, 0xB8	; 184
    23c8:	0e 94 41 0a 	call	0x1482	; 0x1482 <GLCD_SendInstruction>
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	a0 e2       	ldi	r26, 0x20	; 32
    23d2:	b1 e4       	ldi	r27, 0x41	; 65
    23d4:	8f a3       	std	Y+39, r24	; 0x27
    23d6:	98 a7       	std	Y+40, r25	; 0x28
    23d8:	a9 a7       	std	Y+41, r26	; 0x29
    23da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23dc:	6f a1       	ldd	r22, Y+39	; 0x27
    23de:	78 a5       	ldd	r23, Y+40	; 0x28
    23e0:	89 a5       	ldd	r24, Y+41	; 0x29
    23e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	4a e7       	ldi	r20, 0x7A	; 122
    23ea:	55 e4       	ldi	r21, 0x45	; 69
    23ec:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	8b a3       	std	Y+35, r24	; 0x23
    23f6:	9c a3       	std	Y+36, r25	; 0x24
    23f8:	ad a3       	std	Y+37, r26	; 0x25
    23fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23fc:	6b a1       	ldd	r22, Y+35	; 0x23
    23fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2400:	8d a1       	ldd	r24, Y+37	; 0x25
    2402:	9e a1       	ldd	r25, Y+38	; 0x26
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e8       	ldi	r20, 0x80	; 128
    240a:	5f e3       	ldi	r21, 0x3F	; 63
    240c:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    2410:	88 23       	and	r24, r24
    2412:	2c f4       	brge	.+10     	; 0x241e <GLCD_Init+0x558>
		__ticks = 1;
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	9a a3       	std	Y+34, r25	; 0x22
    241a:	89 a3       	std	Y+33, r24	; 0x21
    241c:	3f c0       	rjmp	.+126    	; 0x249c <GLCD_Init+0x5d6>
	else if (__tmp > 65535)
    241e:	6b a1       	ldd	r22, Y+35	; 0x23
    2420:	7c a1       	ldd	r23, Y+36	; 0x24
    2422:	8d a1       	ldd	r24, Y+37	; 0x25
    2424:	9e a1       	ldd	r25, Y+38	; 0x26
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	3f ef       	ldi	r19, 0xFF	; 255
    242a:	4f e7       	ldi	r20, 0x7F	; 127
    242c:	57 e4       	ldi	r21, 0x47	; 71
    242e:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    2432:	18 16       	cp	r1, r24
    2434:	4c f5       	brge	.+82     	; 0x2488 <GLCD_Init+0x5c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2436:	6f a1       	ldd	r22, Y+39	; 0x27
    2438:	78 a5       	ldd	r23, Y+40	; 0x28
    243a:	89 a5       	ldd	r24, Y+41	; 0x29
    243c:	9a a5       	ldd	r25, Y+42	; 0x2a
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	40 e2       	ldi	r20, 0x20	; 32
    2444:	51 e4       	ldi	r21, 0x41	; 65
    2446:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	bc 01       	movw	r22, r24
    2450:	cd 01       	movw	r24, r26
    2452:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	9a a3       	std	Y+34, r25	; 0x22
    245c:	89 a3       	std	Y+33, r24	; 0x21
    245e:	0f c0       	rjmp	.+30     	; 0x247e <GLCD_Init+0x5b8>
    2460:	80 e9       	ldi	r24, 0x90	; 144
    2462:	91 e0       	ldi	r25, 0x01	; 1
    2464:	98 a3       	std	Y+32, r25	; 0x20
    2466:	8f 8f       	std	Y+31, r24	; 0x1f
    2468:	8f 8d       	ldd	r24, Y+31	; 0x1f
    246a:	98 a1       	ldd	r25, Y+32	; 0x20
    246c:	01 97       	sbiw	r24, 0x01	; 1
    246e:	f1 f7       	brne	.-4      	; 0x246c <GLCD_Init+0x5a6>
    2470:	98 a3       	std	Y+32, r25	; 0x20
    2472:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2474:	89 a1       	ldd	r24, Y+33	; 0x21
    2476:	9a a1       	ldd	r25, Y+34	; 0x22
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	9a a3       	std	Y+34, r25	; 0x22
    247c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247e:	89 a1       	ldd	r24, Y+33	; 0x21
    2480:	9a a1       	ldd	r25, Y+34	; 0x22
    2482:	00 97       	sbiw	r24, 0x00	; 0
    2484:	69 f7       	brne	.-38     	; 0x2460 <GLCD_Init+0x59a>
    2486:	14 c0       	rjmp	.+40     	; 0x24b0 <GLCD_Init+0x5ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2488:	6b a1       	ldd	r22, Y+35	; 0x23
    248a:	7c a1       	ldd	r23, Y+36	; 0x24
    248c:	8d a1       	ldd	r24, Y+37	; 0x25
    248e:	9e a1       	ldd	r25, Y+38	; 0x26
    2490:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	9a a3       	std	Y+34, r25	; 0x22
    249a:	89 a3       	std	Y+33, r24	; 0x21
    249c:	89 a1       	ldd	r24, Y+33	; 0x21
    249e:	9a a1       	ldd	r25, Y+34	; 0x22
    24a0:	9e 8f       	std	Y+30, r25	; 0x1e
    24a2:	8d 8f       	std	Y+29, r24	; 0x1d
    24a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	f1 f7       	brne	.-4      	; 0x24a8 <GLCD_Init+0x5e2>
    24ac:	9e 8f       	std	Y+30, r25	; 0x1e
    24ae:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(10);
    GLCD_SendInstruction(Z_FIRST_ADDRESS);
    24b0:	80 ec       	ldi	r24, 0xC0	; 192
    24b2:	0e 94 41 0a 	call	0x1482	; 0x1482 <GLCD_SendInstruction>
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	a0 e2       	ldi	r26, 0x20	; 32
    24bc:	b1 e4       	ldi	r27, 0x41	; 65
    24be:	89 8f       	std	Y+25, r24	; 0x19
    24c0:	9a 8f       	std	Y+26, r25	; 0x1a
    24c2:	ab 8f       	std	Y+27, r26	; 0x1b
    24c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c6:	69 8d       	ldd	r22, Y+25	; 0x19
    24c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	4a e7       	ldi	r20, 0x7A	; 122
    24d4:	55 e4       	ldi	r21, 0x45	; 69
    24d6:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	8d 8b       	std	Y+21, r24	; 0x15
    24e0:	9e 8b       	std	Y+22, r25	; 0x16
    24e2:	af 8b       	std	Y+23, r26	; 0x17
    24e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24e6:	6d 89       	ldd	r22, Y+21	; 0x15
    24e8:	7e 89       	ldd	r23, Y+22	; 0x16
    24ea:	8f 89       	ldd	r24, Y+23	; 0x17
    24ec:	98 8d       	ldd	r25, Y+24	; 0x18
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	40 e8       	ldi	r20, 0x80	; 128
    24f4:	5f e3       	ldi	r21, 0x3F	; 63
    24f6:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    24fa:	88 23       	and	r24, r24
    24fc:	2c f4       	brge	.+10     	; 0x2508 <GLCD_Init+0x642>
		__ticks = 1;
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	9c 8b       	std	Y+20, r25	; 0x14
    2504:	8b 8b       	std	Y+19, r24	; 0x13
    2506:	3f c0       	rjmp	.+126    	; 0x2586 <GLCD_Init+0x6c0>
	else if (__tmp > 65535)
    2508:	6d 89       	ldd	r22, Y+21	; 0x15
    250a:	7e 89       	ldd	r23, Y+22	; 0x16
    250c:	8f 89       	ldd	r24, Y+23	; 0x17
    250e:	98 8d       	ldd	r25, Y+24	; 0x18
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	3f ef       	ldi	r19, 0xFF	; 255
    2514:	4f e7       	ldi	r20, 0x7F	; 127
    2516:	57 e4       	ldi	r21, 0x47	; 71
    2518:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    251c:	18 16       	cp	r1, r24
    251e:	4c f5       	brge	.+82     	; 0x2572 <GLCD_Init+0x6ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2520:	69 8d       	ldd	r22, Y+25	; 0x19
    2522:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2524:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2526:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	40 e2       	ldi	r20, 0x20	; 32
    252e:	51 e4       	ldi	r21, 0x41	; 65
    2530:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	bc 01       	movw	r22, r24
    253a:	cd 01       	movw	r24, r26
    253c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	9c 8b       	std	Y+20, r25	; 0x14
    2546:	8b 8b       	std	Y+19, r24	; 0x13
    2548:	0f c0       	rjmp	.+30     	; 0x2568 <GLCD_Init+0x6a2>
    254a:	80 e9       	ldi	r24, 0x90	; 144
    254c:	91 e0       	ldi	r25, 0x01	; 1
    254e:	9a 8b       	std	Y+18, r25	; 0x12
    2550:	89 8b       	std	Y+17, r24	; 0x11
    2552:	89 89       	ldd	r24, Y+17	; 0x11
    2554:	9a 89       	ldd	r25, Y+18	; 0x12
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	f1 f7       	brne	.-4      	; 0x2556 <GLCD_Init+0x690>
    255a:	9a 8b       	std	Y+18, r25	; 0x12
    255c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    255e:	8b 89       	ldd	r24, Y+19	; 0x13
    2560:	9c 89       	ldd	r25, Y+20	; 0x14
    2562:	01 97       	sbiw	r24, 0x01	; 1
    2564:	9c 8b       	std	Y+20, r25	; 0x14
    2566:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2568:	8b 89       	ldd	r24, Y+19	; 0x13
    256a:	9c 89       	ldd	r25, Y+20	; 0x14
    256c:	00 97       	sbiw	r24, 0x00	; 0
    256e:	69 f7       	brne	.-38     	; 0x254a <GLCD_Init+0x684>
    2570:	14 c0       	rjmp	.+40     	; 0x259a <GLCD_Init+0x6d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2572:	6d 89       	ldd	r22, Y+21	; 0x15
    2574:	7e 89       	ldd	r23, Y+22	; 0x16
    2576:	8f 89       	ldd	r24, Y+23	; 0x17
    2578:	98 8d       	ldd	r25, Y+24	; 0x18
    257a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	9c 8b       	std	Y+20, r25	; 0x14
    2584:	8b 8b       	std	Y+19, r24	; 0x13
    2586:	8b 89       	ldd	r24, Y+19	; 0x13
    2588:	9c 89       	ldd	r25, Y+20	; 0x14
    258a:	98 8b       	std	Y+16, r25	; 0x10
    258c:	8f 87       	std	Y+15, r24	; 0x0f
    258e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2590:	98 89       	ldd	r25, Y+16	; 0x10
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	f1 f7       	brne	.-4      	; 0x2592 <GLCD_Init+0x6cc>
    2596:	98 8b       	std	Y+16, r25	; 0x10
    2598:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(10);
    GLCD_SendInstruction(DISPLAY_ON);
    259a:	8f e3       	ldi	r24, 0x3F	; 63
    259c:	0e 94 41 0a 	call	0x1482	; 0x1482 <GLCD_SendInstruction>
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	a0 e2       	ldi	r26, 0x20	; 32
    25a6:	b1 e4       	ldi	r27, 0x41	; 65
    25a8:	8b 87       	std	Y+11, r24	; 0x0b
    25aa:	9c 87       	std	Y+12, r25	; 0x0c
    25ac:	ad 87       	std	Y+13, r26	; 0x0d
    25ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	4a e7       	ldi	r20, 0x7A	; 122
    25be:	55 e4       	ldi	r21, 0x45	; 69
    25c0:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	8f 83       	std	Y+7, r24	; 0x07
    25ca:	98 87       	std	Y+8, r25	; 0x08
    25cc:	a9 87       	std	Y+9, r26	; 0x09
    25ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25d0:	6f 81       	ldd	r22, Y+7	; 0x07
    25d2:	78 85       	ldd	r23, Y+8	; 0x08
    25d4:	89 85       	ldd	r24, Y+9	; 0x09
    25d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e8       	ldi	r20, 0x80	; 128
    25de:	5f e3       	ldi	r21, 0x3F	; 63
    25e0:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    25e4:	88 23       	and	r24, r24
    25e6:	2c f4       	brge	.+10     	; 0x25f2 <GLCD_Init+0x72c>
		__ticks = 1;
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	9e 83       	std	Y+6, r25	; 0x06
    25ee:	8d 83       	std	Y+5, r24	; 0x05
    25f0:	3f c0       	rjmp	.+126    	; 0x2670 <GLCD_Init+0x7aa>
	else if (__tmp > 65535)
    25f2:	6f 81       	ldd	r22, Y+7	; 0x07
    25f4:	78 85       	ldd	r23, Y+8	; 0x08
    25f6:	89 85       	ldd	r24, Y+9	; 0x09
    25f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	3f ef       	ldi	r19, 0xFF	; 255
    25fe:	4f e7       	ldi	r20, 0x7F	; 127
    2600:	57 e4       	ldi	r21, 0x47	; 71
    2602:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    2606:	18 16       	cp	r1, r24
    2608:	4c f5       	brge	.+82     	; 0x265c <GLCD_Init+0x796>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260a:	6b 85       	ldd	r22, Y+11	; 0x0b
    260c:	7c 85       	ldd	r23, Y+12	; 0x0c
    260e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2610:	9e 85       	ldd	r25, Y+14	; 0x0e
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	40 e2       	ldi	r20, 0x20	; 32
    2618:	51 e4       	ldi	r21, 0x41	; 65
    261a:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	bc 01       	movw	r22, r24
    2624:	cd 01       	movw	r24, r26
    2626:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	9e 83       	std	Y+6, r25	; 0x06
    2630:	8d 83       	std	Y+5, r24	; 0x05
    2632:	0f c0       	rjmp	.+30     	; 0x2652 <GLCD_Init+0x78c>
    2634:	80 e9       	ldi	r24, 0x90	; 144
    2636:	91 e0       	ldi	r25, 0x01	; 1
    2638:	9c 83       	std	Y+4, r25	; 0x04
    263a:	8b 83       	std	Y+3, r24	; 0x03
    263c:	8b 81       	ldd	r24, Y+3	; 0x03
    263e:	9c 81       	ldd	r25, Y+4	; 0x04
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	f1 f7       	brne	.-4      	; 0x2640 <GLCD_Init+0x77a>
    2644:	9c 83       	std	Y+4, r25	; 0x04
    2646:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2648:	8d 81       	ldd	r24, Y+5	; 0x05
    264a:	9e 81       	ldd	r25, Y+6	; 0x06
    264c:	01 97       	sbiw	r24, 0x01	; 1
    264e:	9e 83       	std	Y+6, r25	; 0x06
    2650:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2652:	8d 81       	ldd	r24, Y+5	; 0x05
    2654:	9e 81       	ldd	r25, Y+6	; 0x06
    2656:	00 97       	sbiw	r24, 0x00	; 0
    2658:	69 f7       	brne	.-38     	; 0x2634 <GLCD_Init+0x76e>
    265a:	14 c0       	rjmp	.+40     	; 0x2684 <GLCD_Init+0x7be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265c:	6f 81       	ldd	r22, Y+7	; 0x07
    265e:	78 85       	ldd	r23, Y+8	; 0x08
    2660:	89 85       	ldd	r24, Y+9	; 0x09
    2662:	9a 85       	ldd	r25, Y+10	; 0x0a
    2664:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	9e 83       	std	Y+6, r25	; 0x06
    266e:	8d 83       	std	Y+5, r24	; 0x05
    2670:	8d 81       	ldd	r24, Y+5	; 0x05
    2672:	9e 81       	ldd	r25, Y+6	; 0x06
    2674:	9a 83       	std	Y+2, r25	; 0x02
    2676:	89 83       	std	Y+1, r24	; 0x01
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	9a 81       	ldd	r25, Y+2	; 0x02
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	f1 f7       	brne	.-4      	; 0x267c <GLCD_Init+0x7b6>
    2680:	9a 83       	std	Y+2, r25	; 0x02
    2682:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);
    GLCD_Page_Select(Left_Page);
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	0e 94 53 13 	call	0x26a6	; 0x26a6 <GLCD_Page_Select>
    Current_Half = 0 ;
    268a:	10 92 98 01 	sts	0x0198, r1
}
    268e:	ce 59       	subi	r28, 0x9E	; 158
    2690:	df 4f       	sbci	r29, 0xFF	; 255
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	de bf       	out	0x3e, r29	; 62
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	cd bf       	out	0x3d, r28	; 61
    269c:	cf 91       	pop	r28
    269e:	df 91       	pop	r29
    26a0:	1f 91       	pop	r17
    26a2:	0f 91       	pop	r16
    26a4:	08 95       	ret

000026a6 <GLCD_Page_Select>:

void GLCD_Page_Select(Page_Select page)
{
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	00 d0       	rcall	.+0      	; 0x26ac <GLCD_Page_Select+0x6>
    26ac:	0f 92       	push	r0
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	89 83       	std	Y+1, r24	; 0x01
	switch (page)
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	28 2f       	mov	r18, r24
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	3b 83       	std	Y+3, r19	; 0x03
    26bc:	2a 83       	std	Y+2, r18	; 0x02
    26be:	8a 81       	ldd	r24, Y+2	; 0x02
    26c0:	9b 81       	ldd	r25, Y+3	; 0x03
    26c2:	81 30       	cpi	r24, 0x01	; 1
    26c4:	91 05       	cpc	r25, r1
    26c6:	a1 f0       	breq	.+40     	; 0x26f0 <GLCD_Page_Select+0x4a>
    26c8:	2a 81       	ldd	r18, Y+2	; 0x02
    26ca:	3b 81       	ldd	r19, Y+3	; 0x03
    26cc:	22 30       	cpi	r18, 0x02	; 2
    26ce:	31 05       	cpc	r19, r1
    26d0:	d1 f0       	breq	.+52     	; 0x2706 <GLCD_Page_Select+0x60>
    26d2:	8a 81       	ldd	r24, Y+2	; 0x02
    26d4:	9b 81       	ldd	r25, Y+3	; 0x03
    26d6:	00 97       	sbiw	r24, 0x00	; 0
    26d8:	09 f5       	brne	.+66     	; 0x271c <GLCD_Page_Select+0x76>
	{
	case Left_Page:
		DIO_voidSetPinVlaue(PORT_COMMAND_BUS,LEFT_SEGMENT_PIN,DIO_PIN_HIGH);
    26da:	83 e0       	ldi	r24, 0x03	; 3
    26dc:	64 e0       	ldi	r22, 0x04	; 4
    26de:	41 e0       	ldi	r20, 0x01	; 1
    26e0:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
		DIO_voidSetPinVlaue(PORT_COMMAND_BUS,RIGHT_SEGMENT_PIN,DIO_PIN_LOW);
    26e4:	83 e0       	ldi	r24, 0x03	; 3
    26e6:	63 e0       	ldi	r22, 0x03	; 3
    26e8:	40 e0       	ldi	r20, 0x00	; 0
    26ea:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
    26ee:	20 c0       	rjmp	.+64     	; 0x2730 <GLCD_Page_Select+0x8a>
		break;
	case Right_Page:
		DIO_voidSetPinVlaue(PORT_COMMAND_BUS,LEFT_SEGMENT_PIN,DIO_PIN_LOW);
    26f0:	83 e0       	ldi	r24, 0x03	; 3
    26f2:	64 e0       	ldi	r22, 0x04	; 4
    26f4:	40 e0       	ldi	r20, 0x00	; 0
    26f6:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
		DIO_voidSetPinVlaue(PORT_COMMAND_BUS,RIGHT_SEGMENT_PIN,DIO_PIN_HIGH);
    26fa:	83 e0       	ldi	r24, 0x03	; 3
    26fc:	63 e0       	ldi	r22, 0x03	; 3
    26fe:	41 e0       	ldi	r20, 0x01	; 1
    2700:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
    2704:	15 c0       	rjmp	.+42     	; 0x2730 <GLCD_Page_Select+0x8a>
		break;
	case both_pages:
		DIO_voidSetPinVlaue(PORT_COMMAND_BUS,LEFT_SEGMENT_PIN,DIO_PIN_HIGH);
    2706:	83 e0       	ldi	r24, 0x03	; 3
    2708:	64 e0       	ldi	r22, 0x04	; 4
    270a:	41 e0       	ldi	r20, 0x01	; 1
    270c:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
		DIO_voidSetPinVlaue(PORT_COMMAND_BUS,RIGHT_SEGMENT_PIN,DIO_PIN_HIGH);
    2710:	83 e0       	ldi	r24, 0x03	; 3
    2712:	63 e0       	ldi	r22, 0x03	; 3
    2714:	41 e0       	ldi	r20, 0x01	; 1
    2716:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
    271a:	0a c0       	rjmp	.+20     	; 0x2730 <GLCD_Page_Select+0x8a>
		break;
	default :
		DIO_voidSetPinVlaue(PORT_COMMAND_BUS,LEFT_SEGMENT_PIN,DIO_PIN_LOW);
    271c:	83 e0       	ldi	r24, 0x03	; 3
    271e:	64 e0       	ldi	r22, 0x04	; 4
    2720:	40 e0       	ldi	r20, 0x00	; 0
    2722:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
		DIO_voidSetPinVlaue(PORT_COMMAND_BUS,RIGHT_SEGMENT_PIN,DIO_PIN_LOW);
    2726:	83 e0       	ldi	r24, 0x03	; 3
    2728:	63 e0       	ldi	r22, 0x03	; 3
    272a:	40 e0       	ldi	r20, 0x00	; 0
    272c:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
	}
}
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	08 95       	ret

0000273c <GLCD_Draw_Pulse>:

void GLCD_Draw_Pulse (u8 Duty)
{
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	00 d0       	rcall	.+0      	; 0x2742 <GLCD_Draw_Pulse+0x6>
    2742:	00 d0       	rcall	.+0      	; 0x2744 <GLCD_Draw_Pulse+0x8>
    2744:	0f 92       	push	r0
    2746:	cd b7       	in	r28, 0x3d	; 61
    2748:	de b7       	in	r29, 0x3e	; 62
    274a:	8d 83       	std	Y+5, r24	; 0x05
	GLCD_GoToLine(5);
    274c:	85 e0       	ldi	r24, 0x05	; 5
    274e:	0e 94 24 19 	call	0x3248	; 0x3248 <GLCD_GoToLine>
	//put arrow and period
	GLCD_SendCharacterPixels(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	3e e3       	ldi	r19, 0x3E	; 62
    2756:	48 e0       	ldi	r20, 0x08	; 8
    2758:	5c e1       	ldi	r21, 0x1C	; 28
    275a:	6a e2       	ldi	r22, 0x2A	; 42
    275c:	70 e0       	ldi	r23, 0x00	; 0
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
		for (u8 a = 0 ; a < 6; a++)
    2766:	1b 82       	std	Y+3, r1	; 0x03
    2768:	0d c0       	rjmp	.+26     	; 0x2784 <GLCD_Draw_Pulse+0x48>
		{
			GLCD_SendCharacterPixels(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
    276a:	28 e0       	ldi	r18, 0x08	; 8
    276c:	38 e0       	ldi	r19, 0x08	; 8
    276e:	48 e0       	ldi	r20, 0x08	; 8
    2770:	58 e0       	ldi	r21, 0x08	; 8
    2772:	68 e0       	ldi	r22, 0x08	; 8
    2774:	70 e0       	ldi	r23, 0x00	; 0
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
void GLCD_Draw_Pulse (u8 Duty)
{
	GLCD_GoToLine(5);
	//put arrow and period
	GLCD_SendCharacterPixels(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
		for (u8 a = 0 ; a < 6; a++)
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	8f 5f       	subi	r24, 0xFF	; 255
    2782:	8b 83       	std	Y+3, r24	; 0x03
    2784:	8b 81       	ldd	r24, Y+3	; 0x03
    2786:	86 30       	cpi	r24, 0x06	; 6
    2788:	80 f3       	brcs	.-32     	; 0x276a <GLCD_Draw_Pulse+0x2e>
		{
			GLCD_SendCharacterPixels(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
		}
		GLCD_SendCharacterPixels(PWM_DRAWER_GLCD_RIGHT_ARROW_HEAD);
    278a:	2a e2       	ldi	r18, 0x2A	; 42
    278c:	3c e1       	ldi	r19, 0x1C	; 28
    278e:	48 e0       	ldi	r20, 0x08	; 8
    2790:	5e e3       	ldi	r21, 0x3E	; 62
    2792:	60 e0       	ldi	r22, 0x00	; 0
    2794:	70 e0       	ldi	r23, 0x00	; 0
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>

	u8 Pulse_High_Line = (float)Duty / 2.5 ;
    279e:	8d 81       	ldd	r24, Y+5	; 0x05
    27a0:	88 2f       	mov	r24, r24
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	a0 e0       	ldi	r26, 0x00	; 0
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	bc 01       	movw	r22, r24
    27aa:	cd 01       	movw	r24, r26
    27ac:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	bc 01       	movw	r22, r24
    27b6:	cd 01       	movw	r24, r26
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 e2       	ldi	r20, 0x20	; 32
    27be:	50 e4       	ldi	r21, 0x40	; 64
    27c0:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	bc 01       	movw	r22, r24
    27ca:	cd 01       	movw	r24, r26
    27cc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	8c 83       	std	Y+4, r24	; 0x04
		GLCD_GoToLine(6);
    27d6:	86 e0       	ldi	r24, 0x06	; 6
    27d8:	0e 94 24 19 	call	0x3248	; 0x3248 <GLCD_GoToLine>
//		GLCD_SendData(0);
	//draw pulse shape
//		GLCD_SendData(PWM_DRAWER_GLCD_EDGE);
	for(u8 n = 0 ; n < 3 ; n++)
    27dc:	1a 82       	std	Y+2, r1	; 0x02
    27de:	38 c0       	rjmp	.+112    	; 0x2850 <GLCD_Draw_Pulse+0x114>
	{
		GLCD_DisplayPulse(0x7E);
    27e0:	8e e7       	ldi	r24, 0x7E	; 126
    27e2:	0e 94 33 14 	call	0x2866	; 0x2866 <GLCD_DisplayPulse>
u8 i = 1 ;
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	89 83       	std	Y+1, r24	; 0x01
    27ea:	06 c0       	rjmp	.+12     	; 0x27f8 <GLCD_Draw_Pulse+0xbc>
		while(i < Pulse_High_Line && i < 40)
		{
			GLCD_DisplayPulse(0x02);
    27ec:	82 e0       	ldi	r24, 0x02	; 2
    27ee:	0e 94 33 14 	call	0x2866	; 0x2866 <GLCD_DisplayPulse>
		i++;
    27f2:	89 81       	ldd	r24, Y+1	; 0x01
    27f4:	8f 5f       	subi	r24, 0xFF	; 255
    27f6:	89 83       	std	Y+1, r24	; 0x01
//		GLCD_SendData(PWM_DRAWER_GLCD_EDGE);
	for(u8 n = 0 ; n < 3 ; n++)
	{
		GLCD_DisplayPulse(0x7E);
u8 i = 1 ;
		while(i < Pulse_High_Line && i < 40)
    27f8:	99 81       	ldd	r25, Y+1	; 0x01
    27fa:	8c 81       	ldd	r24, Y+4	; 0x04
    27fc:	98 17       	cp	r25, r24
    27fe:	50 f4       	brcc	.+20     	; 0x2814 <GLCD_Draw_Pulse+0xd8>
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	88 32       	cpi	r24, 0x28	; 40
    2804:	98 f3       	brcs	.-26     	; 0x27ec <GLCD_Draw_Pulse+0xb0>
    2806:	06 c0       	rjmp	.+12     	; 0x2814 <GLCD_Draw_Pulse+0xd8>
			GLCD_DisplayPulse(0x02);
		i++;
		}
		while(i == Pulse_High_Line || i == 40)
		{
			GLCD_DisplayPulse(0x7E);
    2808:	8e e7       	ldi	r24, 0x7E	; 126
    280a:	0e 94 33 14 	call	0x2866	; 0x2866 <GLCD_DisplayPulse>
		i++;
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	8f 5f       	subi	r24, 0xFF	; 255
    2812:	89 83       	std	Y+1, r24	; 0x01
		while(i < Pulse_High_Line && i < 40)
		{
			GLCD_DisplayPulse(0x02);
		i++;
		}
		while(i == Pulse_High_Line || i == 40)
    2814:	99 81       	ldd	r25, Y+1	; 0x01
    2816:	8c 81       	ldd	r24, Y+4	; 0x04
    2818:	98 17       	cp	r25, r24
    281a:	b1 f3       	breq	.-20     	; 0x2808 <GLCD_Draw_Pulse+0xcc>
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	88 32       	cpi	r24, 0x28	; 40
    2820:	99 f3       	breq	.-26     	; 0x2808 <GLCD_Draw_Pulse+0xcc>
    2822:	06 c0       	rjmp	.+12     	; 0x2830 <GLCD_Draw_Pulse+0xf4>
			GLCD_DisplayPulse(0x7E);
		i++;
		}
		while(i > Pulse_High_Line && i < 40)
		{
			GLCD_DisplayPulse(0x40);
    2824:	80 e4       	ldi	r24, 0x40	; 64
    2826:	0e 94 33 14 	call	0x2866	; 0x2866 <GLCD_DisplayPulse>
		i++;
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	8f 5f       	subi	r24, 0xFF	; 255
    282e:	89 83       	std	Y+1, r24	; 0x01
		while(i == Pulse_High_Line || i == 40)
		{
			GLCD_DisplayPulse(0x7E);
		i++;
		}
		while(i > Pulse_High_Line && i < 40)
    2830:	99 81       	ldd	r25, Y+1	; 0x01
    2832:	8c 81       	ldd	r24, Y+4	; 0x04
    2834:	89 17       	cp	r24, r25
    2836:	30 f4       	brcc	.+12     	; 0x2844 <GLCD_Draw_Pulse+0x108>
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	88 32       	cpi	r24, 0x28	; 40
    283c:	98 f3       	brcs	.-26     	; 0x2824 <GLCD_Draw_Pulse+0xe8>
    283e:	02 c0       	rjmp	.+4      	; 0x2844 <GLCD_Draw_Pulse+0x108>

		}
		while(i > 40)
		{
//			GLCD_DisplayPulse(0x7E);
			i  = 1 ;
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	89 83       	std	Y+1, r24	; 0x01
		{
			GLCD_DisplayPulse(0x40);
		i++;

		}
		while(i > 40)
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	89 32       	cpi	r24, 0x29	; 41
    2848:	d8 f7       	brcc	.-10     	; 0x2840 <GLCD_Draw_Pulse+0x104>
	u8 Pulse_High_Line = (float)Duty / 2.5 ;
		GLCD_GoToLine(6);
//		GLCD_SendData(0);
	//draw pulse shape
//		GLCD_SendData(PWM_DRAWER_GLCD_EDGE);
	for(u8 n = 0 ; n < 3 ; n++)
    284a:	8a 81       	ldd	r24, Y+2	; 0x02
    284c:	8f 5f       	subi	r24, 0xFF	; 255
    284e:	8a 83       	std	Y+2, r24	; 0x02
    2850:	8a 81       	ldd	r24, Y+2	; 0x02
    2852:	83 30       	cpi	r24, 0x03	; 3
    2854:	28 f2       	brcs	.-118    	; 0x27e0 <GLCD_Draw_Pulse+0xa4>
//			GLCD_DisplayPulse(0x7E);
			i  = 1 ;
		}
	}

}
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
    2860:	cf 91       	pop	r28
    2862:	df 91       	pop	r29
    2864:	08 95       	ret

00002866 <GLCD_DisplayPulse>:

void GLCD_DisplayPulse(u8 Pulse_char)
{
    2866:	df 93       	push	r29
    2868:	cf 93       	push	r28
    286a:	00 d0       	rcall	.+0      	; 0x286c <GLCD_DisplayPulse+0x6>
    286c:	0f 92       	push	r0
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
    2872:	89 83       	std	Y+1, r24	; 0x01
	if ((Current_Half == 0) | (Current_Y_Position < GLCD_MAX_PAGE_PIXEL_WIDTH )) {
    2874:	80 91 98 01 	lds	r24, 0x0198
    2878:	1b 82       	std	Y+3, r1	; 0x03
    287a:	88 23       	and	r24, r24
    287c:	11 f4       	brne	.+4      	; 0x2882 <GLCD_DisplayPulse+0x1c>
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	8b 83       	std	Y+3, r24	; 0x03
    2882:	80 91 97 01 	lds	r24, 0x0197
    2886:	1a 82       	std	Y+2, r1	; 0x02
    2888:	80 34       	cpi	r24, 0x40	; 64
    288a:	10 f4       	brcc	.+4      	; 0x2890 <GLCD_DisplayPulse+0x2a>
    288c:	91 e0       	ldi	r25, 0x01	; 1
    288e:	9a 83       	std	Y+2, r25	; 0x02
    2890:	8b 81       	ldd	r24, Y+3	; 0x03
    2892:	9a 81       	ldd	r25, Y+2	; 0x02
    2894:	89 2b       	or	r24, r25
    2896:	88 23       	and	r24, r24
    2898:	f9 f0       	breq	.+62     	; 0x28d8 <GLCD_DisplayPulse+0x72>
		GLCD_SendInstruction(X_FIRST_ADDRESS + Current_X_Position);
    289a:	80 91 96 01 	lds	r24, 0x0196
    289e:	88 54       	subi	r24, 0x48	; 72
    28a0:	0e 94 41 0a 	call	0x1482	; 0x1482 <GLCD_SendInstruction>
		GLCD_SendInstruction(Y_FIRST_ADDRESS + Current_Y_Position);
    28a4:	80 91 97 01 	lds	r24, 0x0197
    28a8:	80 5c       	subi	r24, 0xC0	; 192
    28aa:	0e 94 41 0a 	call	0x1482	; 0x1482 <GLCD_SendInstruction>
		GLCD_SendData(Pulse_char);
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <GLCD_SendData>
		Current_Y_Position++;
    28b4:	80 91 97 01 	lds	r24, 0x0197
    28b8:	8f 5f       	subi	r24, 0xFF	; 255
    28ba:	80 93 97 01 	sts	0x0197, r24
		if (Current_Y_Position >= GLCD_MAX_PAGE_PIXEL_WIDTH && Current_Half == 0) {
    28be:	80 91 97 01 	lds	r24, 0x0197
    28c2:	80 34       	cpi	r24, 0x40	; 64
    28c4:	48 f0       	brcs	.+18     	; 0x28d8 <GLCD_DisplayPulse+0x72>
    28c6:	80 91 98 01 	lds	r24, 0x0198
    28ca:	88 23       	and	r24, r24
    28cc:	29 f4       	brne	.+10     	; 0x28d8 <GLCD_DisplayPulse+0x72>
			GLCD_Page_Select(Right_Page);
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	0e 94 53 13 	call	0x26a6	; 0x26a6 <GLCD_Page_Select>
			Current_Y_Position = 0;
    28d4:	10 92 97 01 	sts	0x0197, r1
		}
	}
}
    28d8:	0f 90       	pop	r0
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	cf 91       	pop	r28
    28e0:	df 91       	pop	r29
    28e2:	08 95       	ret

000028e4 <GLCD_SendCharacterPixels>:

void GLCD_SendCharacterPixels(u64 Pattern) {
    28e4:	af 92       	push	r10
    28e6:	bf 92       	push	r11
    28e8:	cf 92       	push	r12
    28ea:	df 92       	push	r13
    28ec:	ef 92       	push	r14
    28ee:	ff 92       	push	r15
    28f0:	0f 93       	push	r16
    28f2:	1f 93       	push	r17
    28f4:	df 93       	push	r29
    28f6:	cf 93       	push	r28
    28f8:	cd b7       	in	r28, 0x3d	; 61
    28fa:	de b7       	in	r29, 0x3e	; 62
    28fc:	29 97       	sbiw	r28, 0x09	; 9
    28fe:	0f b6       	in	r0, 0x3f	; 63
    2900:	f8 94       	cli
    2902:	de bf       	out	0x3e, r29	; 62
    2904:	0f be       	out	0x3f, r0	; 63
    2906:	cd bf       	out	0x3d, r28	; 61
    2908:	2a 83       	std	Y+2, r18	; 0x02
    290a:	3b 83       	std	Y+3, r19	; 0x03
    290c:	4c 83       	std	Y+4, r20	; 0x04
    290e:	5d 83       	std	Y+5, r21	; 0x05
    2910:	6e 83       	std	Y+6, r22	; 0x06
    2912:	7f 83       	std	Y+7, r23	; 0x07
    2914:	88 87       	std	Y+8, r24	; 0x08
    2916:	99 87       	std	Y+9, r25	; 0x09
	for(u8 i = 0; i < 5; i++) {
    2918:	19 82       	std	Y+1, r1	; 0x01
    291a:	47 c0       	rjmp	.+142    	; 0x29aa <GLCD_SendCharacterPixels+0xc6>
		GLCD_SendInstruction(X_FIRST_ADDRESS + Current_X_Position);
    291c:	80 91 96 01 	lds	r24, 0x0196
    2920:	88 54       	subi	r24, 0x48	; 72
    2922:	0e 94 41 0a 	call	0x1482	; 0x1482 <GLCD_SendInstruction>
		GLCD_SendInstruction(Y_FIRST_ADDRESS + Current_Y_Position);
    2926:	80 91 97 01 	lds	r24, 0x0197
    292a:	80 5c       	subi	r24, 0xC0	; 192
    292c:	0e 94 41 0a 	call	0x1482	; 0x1482 <GLCD_SendInstruction>
		GLCD_SendData((Pattern>>(i*8U)) & 0x00000000FFUL);
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	88 2f       	mov	r24, r24
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	88 0f       	add	r24, r24
    2938:	99 1f       	adc	r25, r25
    293a:	88 0f       	add	r24, r24
    293c:	99 1f       	adc	r25, r25
    293e:	88 0f       	add	r24, r24
    2940:	99 1f       	adc	r25, r25
    2942:	fc 01       	movw	r30, r24
    2944:	2a 81       	ldd	r18, Y+2	; 0x02
    2946:	3b 81       	ldd	r19, Y+3	; 0x03
    2948:	4c 81       	ldd	r20, Y+4	; 0x04
    294a:	5d 81       	ldd	r21, Y+5	; 0x05
    294c:	6e 81       	ldd	r22, Y+6	; 0x06
    294e:	7f 81       	ldd	r23, Y+7	; 0x07
    2950:	88 85       	ldd	r24, Y+8	; 0x08
    2952:	99 85       	ldd	r25, Y+9	; 0x09
    2954:	0e 2f       	mov	r16, r30
    2956:	0e 94 49 00 	call	0x92	; 0x92 <__lshrdi3>
    295a:	a2 2e       	mov	r10, r18
    295c:	b3 2e       	mov	r11, r19
    295e:	c4 2e       	mov	r12, r20
    2960:	d5 2e       	mov	r13, r21
    2962:	e6 2e       	mov	r14, r22
    2964:	f7 2e       	mov	r15, r23
    2966:	08 2f       	mov	r16, r24
    2968:	19 2f       	mov	r17, r25
    296a:	2a 2d       	mov	r18, r10
    296c:	3b 2d       	mov	r19, r11
    296e:	4c 2d       	mov	r20, r12
    2970:	5d 2d       	mov	r21, r13
    2972:	6e 2d       	mov	r22, r14
    2974:	7f 2d       	mov	r23, r15
    2976:	80 2f       	mov	r24, r16
    2978:	91 2f       	mov	r25, r17
    297a:	82 2f       	mov	r24, r18
    297c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <GLCD_SendData>
		Current_Y_Position++;
    2980:	80 91 97 01 	lds	r24, 0x0197
    2984:	8f 5f       	subi	r24, 0xFF	; 255
    2986:	80 93 97 01 	sts	0x0197, r24
		if (Current_Y_Position >= GLCD_MAX_PAGE_PIXEL_WIDTH && Current_Half == 0) {
    298a:	80 91 97 01 	lds	r24, 0x0197
    298e:	80 34       	cpi	r24, 0x40	; 64
    2990:	48 f0       	brcs	.+18     	; 0x29a4 <GLCD_SendCharacterPixels+0xc0>
    2992:	80 91 98 01 	lds	r24, 0x0198
    2996:	88 23       	and	r24, r24
    2998:	29 f4       	brne	.+10     	; 0x29a4 <GLCD_SendCharacterPixels+0xc0>
			GLCD_Page_Select(Right_Page);
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	0e 94 53 13 	call	0x26a6	; 0x26a6 <GLCD_Page_Select>
			Current_Y_Position = 0;
    29a0:	10 92 97 01 	sts	0x0197, r1
		}
	}
}

void GLCD_SendCharacterPixels(u64 Pattern) {
	for(u8 i = 0; i < 5; i++) {
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
    29a6:	8f 5f       	subi	r24, 0xFF	; 255
    29a8:	89 83       	std	Y+1, r24	; 0x01
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
    29ac:	85 30       	cpi	r24, 0x05	; 5
    29ae:	08 f4       	brcc	.+2      	; 0x29b2 <GLCD_SendCharacterPixels+0xce>
    29b0:	b5 cf       	rjmp	.-150    	; 0x291c <GLCD_SendCharacterPixels+0x38>
		if (Current_Y_Position >= GLCD_MAX_PAGE_PIXEL_WIDTH && Current_Half == 0) {
			GLCD_Page_Select(Right_Page);
			Current_Y_Position = 0;
		}
	}
}
    29b2:	29 96       	adiw	r28, 0x09	; 9
    29b4:	0f b6       	in	r0, 0x3f	; 63
    29b6:	f8 94       	cli
    29b8:	de bf       	out	0x3e, r29	; 62
    29ba:	0f be       	out	0x3f, r0	; 63
    29bc:	cd bf       	out	0x3d, r28	; 61
    29be:	cf 91       	pop	r28
    29c0:	df 91       	pop	r29
    29c2:	1f 91       	pop	r17
    29c4:	0f 91       	pop	r16
    29c6:	ff 90       	pop	r15
    29c8:	ef 90       	pop	r14
    29ca:	df 90       	pop	r13
    29cc:	cf 90       	pop	r12
    29ce:	bf 90       	pop	r11
    29d0:	af 90       	pop	r10
    29d2:	08 95       	ret

000029d4 <GLCD_SendChar>:
void GLCD_SendChar(u8 Data) {
    29d4:	df 93       	push	r29
    29d6:	cf 93       	push	r28
    29d8:	00 d0       	rcall	.+0      	; 0x29da <GLCD_SendChar+0x6>
    29da:	00 d0       	rcall	.+0      	; 0x29dc <GLCD_SendChar+0x8>
    29dc:	0f 92       	push	r0
    29de:	cd b7       	in	r28, 0x3d	; 61
    29e0:	de b7       	in	r29, 0x3e	; 62
    29e2:	89 83       	std	Y+1, r24	; 0x01
	if ((Current_Half == 0) | (Current_Y_Position < GLCD_MAX_PAGE_PIXEL_WIDTH - 7U)) {
    29e4:	80 91 98 01 	lds	r24, 0x0198
    29e8:	1d 82       	std	Y+5, r1	; 0x05
    29ea:	88 23       	and	r24, r24
    29ec:	11 f4       	brne	.+4      	; 0x29f2 <GLCD_SendChar+0x1e>
    29ee:	21 e0       	ldi	r18, 0x01	; 1
    29f0:	2d 83       	std	Y+5, r18	; 0x05
    29f2:	80 91 97 01 	lds	r24, 0x0197
    29f6:	1c 82       	std	Y+4, r1	; 0x04
    29f8:	89 33       	cpi	r24, 0x39	; 57
    29fa:	10 f4       	brcc	.+4      	; 0x2a00 <GLCD_SendChar+0x2c>
    29fc:	31 e0       	ldi	r19, 0x01	; 1
    29fe:	3c 83       	std	Y+4, r19	; 0x04
    2a00:	8d 81       	ldd	r24, Y+5	; 0x05
    2a02:	9c 81       	ldd	r25, Y+4	; 0x04
    2a04:	89 2b       	or	r24, r25
    2a06:	88 23       	and	r24, r24
    2a08:	09 f4       	brne	.+2      	; 0x2a0c <GLCD_SendChar+0x38>
    2a0a:	0d c3       	rjmp	.+1562   	; 0x3026 <GLCD_SendChar+0x652>
		/* Enough space to write character */
		switch (Data) {
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	28 2f       	mov	r18, r24
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	3b 83       	std	Y+3, r19	; 0x03
    2a14:	2a 83       	std	Y+2, r18	; 0x02
    2a16:	8a 81       	ldd	r24, Y+2	; 0x02
    2a18:	9b 81       	ldd	r25, Y+3	; 0x03
    2a1a:	81 35       	cpi	r24, 0x51	; 81
    2a1c:	91 05       	cpc	r25, r1
    2a1e:	09 f4       	brne	.+2      	; 0x2a22 <GLCD_SendChar+0x4e>
    2a20:	b0 c1       	rjmp	.+864    	; 0x2d82 <GLCD_SendChar+0x3ae>
    2a22:	2a 81       	ldd	r18, Y+2	; 0x02
    2a24:	3b 81       	ldd	r19, Y+3	; 0x03
    2a26:	22 35       	cpi	r18, 0x52	; 82
    2a28:	31 05       	cpc	r19, r1
    2a2a:	0c f0       	brlt	.+2      	; 0x2a2e <GLCD_SendChar+0x5a>
    2a2c:	c8 c0       	rjmp	.+400    	; 0x2bbe <GLCD_SendChar+0x1ea>
    2a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a30:	9b 81       	ldd	r25, Y+3	; 0x03
    2a32:	89 33       	cpi	r24, 0x39	; 57
    2a34:	91 05       	cpc	r25, r1
    2a36:	09 f4       	brne	.+2      	; 0x2a3a <GLCD_SendChar+0x66>
    2a38:	cd c2       	rjmp	.+1434   	; 0x2fd4 <GLCD_SendChar+0x600>
    2a3a:	2a 81       	ldd	r18, Y+2	; 0x02
    2a3c:	3b 81       	ldd	r19, Y+3	; 0x03
    2a3e:	2a 33       	cpi	r18, 0x3A	; 58
    2a40:	31 05       	cpc	r19, r1
    2a42:	0c f0       	brlt	.+2      	; 0x2a46 <GLCD_SendChar+0x72>
    2a44:	67 c0       	rjmp	.+206    	; 0x2b14 <GLCD_SendChar+0x140>
    2a46:	8a 81       	ldd	r24, Y+2	; 0x02
    2a48:	9b 81       	ldd	r25, Y+3	; 0x03
    2a4a:	83 33       	cpi	r24, 0x33	; 51
    2a4c:	91 05       	cpc	r25, r1
    2a4e:	09 f4       	brne	.+2      	; 0x2a52 <GLCD_SendChar+0x7e>
    2a50:	7f c2       	rjmp	.+1278   	; 0x2f50 <GLCD_SendChar+0x57c>
    2a52:	2a 81       	ldd	r18, Y+2	; 0x02
    2a54:	3b 81       	ldd	r19, Y+3	; 0x03
    2a56:	24 33       	cpi	r18, 0x34	; 52
    2a58:	31 05       	cpc	r19, r1
    2a5a:	bc f5       	brge	.+110    	; 0x2aca <GLCD_SendChar+0xf6>
    2a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a60:	80 33       	cpi	r24, 0x30	; 48
    2a62:	91 05       	cpc	r25, r1
    2a64:	09 f4       	brne	.+2      	; 0x2a68 <GLCD_SendChar+0x94>
    2a66:	53 c2       	rjmp	.+1190   	; 0x2f0e <GLCD_SendChar+0x53a>
    2a68:	2a 81       	ldd	r18, Y+2	; 0x02
    2a6a:	3b 81       	ldd	r19, Y+3	; 0x03
    2a6c:	21 33       	cpi	r18, 0x31	; 49
    2a6e:	31 05       	cpc	r19, r1
    2a70:	fc f4       	brge	.+62     	; 0x2ab0 <GLCD_SendChar+0xdc>
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	9b 81       	ldd	r25, Y+3	; 0x03
    2a76:	85 32       	cpi	r24, 0x25	; 37
    2a78:	91 05       	cpc	r25, r1
    2a7a:	09 f4       	brne	.+2      	; 0x2a7e <GLCD_SendChar+0xaa>
    2a7c:	11 c2       	rjmp	.+1058   	; 0x2ea0 <GLCD_SendChar+0x4cc>
    2a7e:	2a 81       	ldd	r18, Y+2	; 0x02
    2a80:	3b 81       	ldd	r19, Y+3	; 0x03
    2a82:	26 32       	cpi	r18, 0x26	; 38
    2a84:	31 05       	cpc	r19, r1
    2a86:	3c f4       	brge	.+14     	; 0x2a96 <GLCD_SendChar+0xc2>
    2a88:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a8c:	80 32       	cpi	r24, 0x20	; 32
    2a8e:	91 05       	cpc	r25, r1
    2a90:	09 f4       	brne	.+2      	; 0x2a94 <GLCD_SendChar+0xc0>
    2a92:	27 c2       	rjmp	.+1102   	; 0x2ee2 <GLCD_SendChar+0x50e>
    2a94:	a9 c2       	rjmp	.+1362   	; 0x2fe8 <GLCD_SendChar+0x614>
    2a96:	2a 81       	ldd	r18, Y+2	; 0x02
    2a98:	3b 81       	ldd	r19, Y+3	; 0x03
    2a9a:	2d 32       	cpi	r18, 0x2D	; 45
    2a9c:	31 05       	cpc	r19, r1
    2a9e:	09 f4       	brne	.+2      	; 0x2aa2 <GLCD_SendChar+0xce>
    2aa0:	2b c2       	rjmp	.+1110   	; 0x2ef8 <GLCD_SendChar+0x524>
    2aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa4:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa6:	8e 32       	cpi	r24, 0x2E	; 46
    2aa8:	91 05       	cpc	r25, r1
    2aaa:	09 f4       	brne	.+2      	; 0x2aae <GLCD_SendChar+0xda>
    2aac:	0f c2       	rjmp	.+1054   	; 0x2ecc <GLCD_SendChar+0x4f8>
    2aae:	9c c2       	rjmp	.+1336   	; 0x2fe8 <GLCD_SendChar+0x614>
    2ab0:	2a 81       	ldd	r18, Y+2	; 0x02
    2ab2:	3b 81       	ldd	r19, Y+3	; 0x03
    2ab4:	21 33       	cpi	r18, 0x31	; 49
    2ab6:	31 05       	cpc	r19, r1
    2ab8:	09 f4       	brne	.+2      	; 0x2abc <GLCD_SendChar+0xe8>
    2aba:	34 c2       	rjmp	.+1128   	; 0x2f24 <GLCD_SendChar+0x550>
    2abc:	8a 81       	ldd	r24, Y+2	; 0x02
    2abe:	9b 81       	ldd	r25, Y+3	; 0x03
    2ac0:	82 33       	cpi	r24, 0x32	; 50
    2ac2:	91 05       	cpc	r25, r1
    2ac4:	09 f4       	brne	.+2      	; 0x2ac8 <GLCD_SendChar+0xf4>
    2ac6:	39 c2       	rjmp	.+1138   	; 0x2f3a <GLCD_SendChar+0x566>
    2ac8:	8f c2       	rjmp	.+1310   	; 0x2fe8 <GLCD_SendChar+0x614>
    2aca:	2a 81       	ldd	r18, Y+2	; 0x02
    2acc:	3b 81       	ldd	r19, Y+3	; 0x03
    2ace:	26 33       	cpi	r18, 0x36	; 54
    2ad0:	31 05       	cpc	r19, r1
    2ad2:	09 f4       	brne	.+2      	; 0x2ad6 <GLCD_SendChar+0x102>
    2ad4:	5e c2       	rjmp	.+1212   	; 0x2f92 <GLCD_SendChar+0x5be>
    2ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    2ada:	87 33       	cpi	r24, 0x37	; 55
    2adc:	91 05       	cpc	r25, r1
    2ade:	6c f4       	brge	.+26     	; 0x2afa <GLCD_SendChar+0x126>
    2ae0:	2a 81       	ldd	r18, Y+2	; 0x02
    2ae2:	3b 81       	ldd	r19, Y+3	; 0x03
    2ae4:	24 33       	cpi	r18, 0x34	; 52
    2ae6:	31 05       	cpc	r19, r1
    2ae8:	09 f4       	brne	.+2      	; 0x2aec <GLCD_SendChar+0x118>
    2aea:	3d c2       	rjmp	.+1146   	; 0x2f66 <GLCD_SendChar+0x592>
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	9b 81       	ldd	r25, Y+3	; 0x03
    2af0:	85 33       	cpi	r24, 0x35	; 53
    2af2:	91 05       	cpc	r25, r1
    2af4:	09 f4       	brne	.+2      	; 0x2af8 <GLCD_SendChar+0x124>
    2af6:	42 c2       	rjmp	.+1156   	; 0x2f7c <GLCD_SendChar+0x5a8>
    2af8:	77 c2       	rjmp	.+1262   	; 0x2fe8 <GLCD_SendChar+0x614>
    2afa:	2a 81       	ldd	r18, Y+2	; 0x02
    2afc:	3b 81       	ldd	r19, Y+3	; 0x03
    2afe:	27 33       	cpi	r18, 0x37	; 55
    2b00:	31 05       	cpc	r19, r1
    2b02:	09 f4       	brne	.+2      	; 0x2b06 <GLCD_SendChar+0x132>
    2b04:	51 c2       	rjmp	.+1186   	; 0x2fa8 <GLCD_SendChar+0x5d4>
    2b06:	8a 81       	ldd	r24, Y+2	; 0x02
    2b08:	9b 81       	ldd	r25, Y+3	; 0x03
    2b0a:	88 33       	cpi	r24, 0x38	; 56
    2b0c:	91 05       	cpc	r25, r1
    2b0e:	09 f4       	brne	.+2      	; 0x2b12 <GLCD_SendChar+0x13e>
    2b10:	56 c2       	rjmp	.+1196   	; 0x2fbe <GLCD_SendChar+0x5ea>
    2b12:	6a c2       	rjmp	.+1236   	; 0x2fe8 <GLCD_SendChar+0x614>
    2b14:	2a 81       	ldd	r18, Y+2	; 0x02
    2b16:	3b 81       	ldd	r19, Y+3	; 0x03
    2b18:	26 34       	cpi	r18, 0x46	; 70
    2b1a:	31 05       	cpc	r19, r1
    2b1c:	09 f4       	brne	.+2      	; 0x2b20 <GLCD_SendChar+0x14c>
    2b1e:	10 c1       	rjmp	.+544    	; 0x2d40 <GLCD_SendChar+0x36c>
    2b20:	8a 81       	ldd	r24, Y+2	; 0x02
    2b22:	9b 81       	ldd	r25, Y+3	; 0x03
    2b24:	87 34       	cpi	r24, 0x47	; 71
    2b26:	91 05       	cpc	r25, r1
    2b28:	2c f5       	brge	.+74     	; 0x2b74 <GLCD_SendChar+0x1a0>
    2b2a:	2a 81       	ldd	r18, Y+2	; 0x02
    2b2c:	3b 81       	ldd	r19, Y+3	; 0x03
    2b2e:	23 34       	cpi	r18, 0x43	; 67
    2b30:	31 05       	cpc	r19, r1
    2b32:	09 f4       	brne	.+2      	; 0x2b36 <GLCD_SendChar+0x162>
    2b34:	47 c1       	rjmp	.+654    	; 0x2dc4 <GLCD_SendChar+0x3f0>
    2b36:	8a 81       	ldd	r24, Y+2	; 0x02
    2b38:	9b 81       	ldd	r25, Y+3	; 0x03
    2b3a:	84 34       	cpi	r24, 0x44	; 68
    2b3c:	91 05       	cpc	r25, r1
    2b3e:	6c f4       	brge	.+26     	; 0x2b5a <GLCD_SendChar+0x186>
    2b40:	2a 81       	ldd	r18, Y+2	; 0x02
    2b42:	3b 81       	ldd	r19, Y+3	; 0x03
    2b44:	2d 33       	cpi	r18, 0x3D	; 61
    2b46:	31 05       	cpc	r19, r1
    2b48:	09 f4       	brne	.+2      	; 0x2b4c <GLCD_SendChar+0x178>
    2b4a:	b5 c1       	rjmp	.+874    	; 0x2eb6 <GLCD_SendChar+0x4e2>
    2b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b50:	81 34       	cpi	r24, 0x41	; 65
    2b52:	91 05       	cpc	r25, r1
    2b54:	09 f4       	brne	.+2      	; 0x2b58 <GLCD_SendChar+0x184>
    2b56:	e9 c0       	rjmp	.+466    	; 0x2d2a <GLCD_SendChar+0x356>
    2b58:	47 c2       	rjmp	.+1166   	; 0x2fe8 <GLCD_SendChar+0x614>
    2b5a:	2a 81       	ldd	r18, Y+2	; 0x02
    2b5c:	3b 81       	ldd	r19, Y+3	; 0x03
    2b5e:	24 34       	cpi	r18, 0x44	; 68
    2b60:	31 05       	cpc	r19, r1
    2b62:	09 f4       	brne	.+2      	; 0x2b66 <GLCD_SendChar+0x192>
    2b64:	45 c1       	rjmp	.+650    	; 0x2df0 <GLCD_SendChar+0x41c>
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	9b 81       	ldd	r25, Y+3	; 0x03
    2b6a:	85 34       	cpi	r24, 0x45	; 69
    2b6c:	91 05       	cpc	r25, r1
    2b6e:	09 f4       	brne	.+2      	; 0x2b72 <GLCD_SendChar+0x19e>
    2b70:	fd c0       	rjmp	.+506    	; 0x2d6c <GLCD_SendChar+0x398>
    2b72:	3a c2       	rjmp	.+1140   	; 0x2fe8 <GLCD_SendChar+0x614>
    2b74:	2a 81       	ldd	r18, Y+2	; 0x02
    2b76:	3b 81       	ldd	r19, Y+3	; 0x03
    2b78:	2b 34       	cpi	r18, 0x4B	; 75
    2b7a:	31 05       	cpc	r19, r1
    2b7c:	09 f4       	brne	.+2      	; 0x2b80 <GLCD_SendChar+0x1ac>
    2b7e:	4e c1       	rjmp	.+668    	; 0x2e1c <GLCD_SendChar+0x448>
    2b80:	8a 81       	ldd	r24, Y+2	; 0x02
    2b82:	9b 81       	ldd	r25, Y+3	; 0x03
    2b84:	8c 34       	cpi	r24, 0x4C	; 76
    2b86:	91 05       	cpc	r25, r1
    2b88:	6c f4       	brge	.+26     	; 0x2ba4 <GLCD_SendChar+0x1d0>
    2b8a:	2a 81       	ldd	r18, Y+2	; 0x02
    2b8c:	3b 81       	ldd	r19, Y+3	; 0x03
    2b8e:	28 34       	cpi	r18, 0x48	; 72
    2b90:	31 05       	cpc	r19, r1
    2b92:	09 f4       	brne	.+2      	; 0x2b96 <GLCD_SendChar+0x1c2>
    2b94:	4e c1       	rjmp	.+668    	; 0x2e32 <GLCD_SendChar+0x45e>
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	9b 81       	ldd	r25, Y+3	; 0x03
    2b9a:	89 34       	cpi	r24, 0x49	; 73
    2b9c:	91 05       	cpc	r25, r1
    2b9e:	09 f4       	brne	.+2      	; 0x2ba2 <GLCD_SendChar+0x1ce>
    2ba0:	74 c1       	rjmp	.+744    	; 0x2e8a <GLCD_SendChar+0x4b6>
    2ba2:	22 c2       	rjmp	.+1092   	; 0x2fe8 <GLCD_SendChar+0x614>
    2ba4:	2a 81       	ldd	r18, Y+2	; 0x02
    2ba6:	3b 81       	ldd	r19, Y+3	; 0x03
    2ba8:	2d 34       	cpi	r18, 0x4D	; 77
    2baa:	31 05       	cpc	r19, r1
    2bac:	09 f4       	brne	.+2      	; 0x2bb0 <GLCD_SendChar+0x1dc>
    2bae:	57 c1       	rjmp	.+686    	; 0x2e5e <GLCD_SendChar+0x48a>
    2bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb4:	8e 34       	cpi	r24, 0x4E	; 78
    2bb6:	91 05       	cpc	r25, r1
    2bb8:	09 f4       	brne	.+2      	; 0x2bbc <GLCD_SendChar+0x1e8>
    2bba:	f9 c0       	rjmp	.+498    	; 0x2dae <GLCD_SendChar+0x3da>
    2bbc:	15 c2       	rjmp	.+1066   	; 0x2fe8 <GLCD_SendChar+0x614>
    2bbe:	2a 81       	ldd	r18, Y+2	; 0x02
    2bc0:	3b 81       	ldd	r19, Y+3	; 0x03
    2bc2:	28 36       	cpi	r18, 0x68	; 104
    2bc4:	31 05       	cpc	r19, r1
    2bc6:	09 f4       	brne	.+2      	; 0x2bca <GLCD_SendChar+0x1f6>
    2bc8:	34 c1       	rjmp	.+616    	; 0x2e32 <GLCD_SendChar+0x45e>
    2bca:	8a 81       	ldd	r24, Y+2	; 0x02
    2bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bce:	89 36       	cpi	r24, 0x69	; 105
    2bd0:	91 05       	cpc	r25, r1
    2bd2:	0c f0       	brlt	.+2      	; 0x2bd6 <GLCD_SendChar+0x202>
    2bd4:	55 c0       	rjmp	.+170    	; 0x2c80 <GLCD_SendChar+0x2ac>
    2bd6:	2a 81       	ldd	r18, Y+2	; 0x02
    2bd8:	3b 81       	ldd	r19, Y+3	; 0x03
    2bda:	2a 35       	cpi	r18, 0x5A	; 90
    2bdc:	31 05       	cpc	r19, r1
    2bde:	09 f4       	brne	.+2      	; 0x2be2 <GLCD_SendChar+0x20e>
    2be0:	33 c1       	rjmp	.+614    	; 0x2e48 <GLCD_SendChar+0x474>
    2be2:	8a 81       	ldd	r24, Y+2	; 0x02
    2be4:	9b 81       	ldd	r25, Y+3	; 0x03
    2be6:	8b 35       	cpi	r24, 0x5B	; 91
    2be8:	91 05       	cpc	r25, r1
    2bea:	2c f5       	brge	.+74     	; 0x2c36 <GLCD_SendChar+0x262>
    2bec:	2a 81       	ldd	r18, Y+2	; 0x02
    2bee:	3b 81       	ldd	r19, Y+3	; 0x03
    2bf0:	24 35       	cpi	r18, 0x54	; 84
    2bf2:	31 05       	cpc	r19, r1
    2bf4:	09 f4       	brne	.+2      	; 0x2bf8 <GLCD_SendChar+0x224>
    2bf6:	07 c1       	rjmp	.+526    	; 0x2e06 <GLCD_SendChar+0x432>
    2bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    2bfc:	85 35       	cpi	r24, 0x55	; 85
    2bfe:	91 05       	cpc	r25, r1
    2c00:	6c f4       	brge	.+26     	; 0x2c1c <GLCD_SendChar+0x248>
    2c02:	2a 81       	ldd	r18, Y+2	; 0x02
    2c04:	3b 81       	ldd	r19, Y+3	; 0x03
    2c06:	22 35       	cpi	r18, 0x52	; 82
    2c08:	31 05       	cpc	r19, r1
    2c0a:	09 f4       	brne	.+2      	; 0x2c0e <GLCD_SendChar+0x23a>
    2c0c:	a4 c0       	rjmp	.+328    	; 0x2d56 <GLCD_SendChar+0x382>
    2c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c10:	9b 81       	ldd	r25, Y+3	; 0x03
    2c12:	83 35       	cpi	r24, 0x53	; 83
    2c14:	91 05       	cpc	r25, r1
    2c16:	09 f4       	brne	.+2      	; 0x2c1a <GLCD_SendChar+0x246>
    2c18:	2d c1       	rjmp	.+602    	; 0x2e74 <GLCD_SendChar+0x4a0>
    2c1a:	e6 c1       	rjmp	.+972    	; 0x2fe8 <GLCD_SendChar+0x614>
    2c1c:	2a 81       	ldd	r18, Y+2	; 0x02
    2c1e:	3b 81       	ldd	r19, Y+3	; 0x03
    2c20:	25 35       	cpi	r18, 0x55	; 85
    2c22:	31 05       	cpc	r19, r1
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <GLCD_SendChar+0x254>
    2c26:	b8 c0       	rjmp	.+368    	; 0x2d98 <GLCD_SendChar+0x3c4>
    2c28:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c2c:	89 35       	cpi	r24, 0x59	; 89
    2c2e:	91 05       	cpc	r25, r1
    2c30:	09 f4       	brne	.+2      	; 0x2c34 <GLCD_SendChar+0x260>
    2c32:	d3 c0       	rjmp	.+422    	; 0x2dda <GLCD_SendChar+0x406>
    2c34:	d9 c1       	rjmp	.+946    	; 0x2fe8 <GLCD_SendChar+0x614>
    2c36:	2a 81       	ldd	r18, Y+2	; 0x02
    2c38:	3b 81       	ldd	r19, Y+3	; 0x03
    2c3a:	24 36       	cpi	r18, 0x64	; 100
    2c3c:	31 05       	cpc	r19, r1
    2c3e:	09 f4       	brne	.+2      	; 0x2c42 <GLCD_SendChar+0x26e>
    2c40:	d7 c0       	rjmp	.+430    	; 0x2df0 <GLCD_SendChar+0x41c>
    2c42:	8a 81       	ldd	r24, Y+2	; 0x02
    2c44:	9b 81       	ldd	r25, Y+3	; 0x03
    2c46:	85 36       	cpi	r24, 0x65	; 101
    2c48:	91 05       	cpc	r25, r1
    2c4a:	6c f4       	brge	.+26     	; 0x2c66 <GLCD_SendChar+0x292>
    2c4c:	2a 81       	ldd	r18, Y+2	; 0x02
    2c4e:	3b 81       	ldd	r19, Y+3	; 0x03
    2c50:	21 36       	cpi	r18, 0x61	; 97
    2c52:	31 05       	cpc	r19, r1
    2c54:	09 f4       	brne	.+2      	; 0x2c58 <GLCD_SendChar+0x284>
    2c56:	69 c0       	rjmp	.+210    	; 0x2d2a <GLCD_SendChar+0x356>
    2c58:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c5c:	83 36       	cpi	r24, 0x63	; 99
    2c5e:	91 05       	cpc	r25, r1
    2c60:	09 f4       	brne	.+2      	; 0x2c64 <GLCD_SendChar+0x290>
    2c62:	b0 c0       	rjmp	.+352    	; 0x2dc4 <GLCD_SendChar+0x3f0>
    2c64:	c1 c1       	rjmp	.+898    	; 0x2fe8 <GLCD_SendChar+0x614>
    2c66:	2a 81       	ldd	r18, Y+2	; 0x02
    2c68:	3b 81       	ldd	r19, Y+3	; 0x03
    2c6a:	25 36       	cpi	r18, 0x65	; 101
    2c6c:	31 05       	cpc	r19, r1
    2c6e:	09 f4       	brne	.+2      	; 0x2c72 <GLCD_SendChar+0x29e>
    2c70:	7d c0       	rjmp	.+250    	; 0x2d6c <GLCD_SendChar+0x398>
    2c72:	8a 81       	ldd	r24, Y+2	; 0x02
    2c74:	9b 81       	ldd	r25, Y+3	; 0x03
    2c76:	86 36       	cpi	r24, 0x66	; 102
    2c78:	91 05       	cpc	r25, r1
    2c7a:	09 f4       	brne	.+2      	; 0x2c7e <GLCD_SendChar+0x2aa>
    2c7c:	61 c0       	rjmp	.+194    	; 0x2d40 <GLCD_SendChar+0x36c>
    2c7e:	b4 c1       	rjmp	.+872    	; 0x2fe8 <GLCD_SendChar+0x614>
    2c80:	2a 81       	ldd	r18, Y+2	; 0x02
    2c82:	3b 81       	ldd	r19, Y+3	; 0x03
    2c84:	22 37       	cpi	r18, 0x72	; 114
    2c86:	31 05       	cpc	r19, r1
    2c88:	09 f4       	brne	.+2      	; 0x2c8c <GLCD_SendChar+0x2b8>
    2c8a:	65 c0       	rjmp	.+202    	; 0x2d56 <GLCD_SendChar+0x382>
    2c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c90:	83 37       	cpi	r24, 0x73	; 115
    2c92:	91 05       	cpc	r25, r1
    2c94:	2c f5       	brge	.+74     	; 0x2ce0 <GLCD_SendChar+0x30c>
    2c96:	2a 81       	ldd	r18, Y+2	; 0x02
    2c98:	3b 81       	ldd	r19, Y+3	; 0x03
    2c9a:	2d 36       	cpi	r18, 0x6D	; 109
    2c9c:	31 05       	cpc	r19, r1
    2c9e:	09 f4       	brne	.+2      	; 0x2ca2 <GLCD_SendChar+0x2ce>
    2ca0:	de c0       	rjmp	.+444    	; 0x2e5e <GLCD_SendChar+0x48a>
    2ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca6:	8e 36       	cpi	r24, 0x6E	; 110
    2ca8:	91 05       	cpc	r25, r1
    2caa:	6c f4       	brge	.+26     	; 0x2cc6 <GLCD_SendChar+0x2f2>
    2cac:	2a 81       	ldd	r18, Y+2	; 0x02
    2cae:	3b 81       	ldd	r19, Y+3	; 0x03
    2cb0:	29 36       	cpi	r18, 0x69	; 105
    2cb2:	31 05       	cpc	r19, r1
    2cb4:	09 f4       	brne	.+2      	; 0x2cb8 <GLCD_SendChar+0x2e4>
    2cb6:	e9 c0       	rjmp	.+466    	; 0x2e8a <GLCD_SendChar+0x4b6>
    2cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cba:	9b 81       	ldd	r25, Y+3	; 0x03
    2cbc:	8b 36       	cpi	r24, 0x6B	; 107
    2cbe:	91 05       	cpc	r25, r1
    2cc0:	09 f4       	brne	.+2      	; 0x2cc4 <GLCD_SendChar+0x2f0>
    2cc2:	ac c0       	rjmp	.+344    	; 0x2e1c <GLCD_SendChar+0x448>
    2cc4:	91 c1       	rjmp	.+802    	; 0x2fe8 <GLCD_SendChar+0x614>
    2cc6:	2a 81       	ldd	r18, Y+2	; 0x02
    2cc8:	3b 81       	ldd	r19, Y+3	; 0x03
    2cca:	2e 36       	cpi	r18, 0x6E	; 110
    2ccc:	31 05       	cpc	r19, r1
    2cce:	09 f4       	brne	.+2      	; 0x2cd2 <GLCD_SendChar+0x2fe>
    2cd0:	6e c0       	rjmp	.+220    	; 0x2dae <GLCD_SendChar+0x3da>
    2cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd4:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd6:	81 37       	cpi	r24, 0x71	; 113
    2cd8:	91 05       	cpc	r25, r1
    2cda:	09 f4       	brne	.+2      	; 0x2cde <GLCD_SendChar+0x30a>
    2cdc:	52 c0       	rjmp	.+164    	; 0x2d82 <GLCD_SendChar+0x3ae>
    2cde:	84 c1       	rjmp	.+776    	; 0x2fe8 <GLCD_SendChar+0x614>
    2ce0:	2a 81       	ldd	r18, Y+2	; 0x02
    2ce2:	3b 81       	ldd	r19, Y+3	; 0x03
    2ce4:	25 37       	cpi	r18, 0x75	; 117
    2ce6:	31 05       	cpc	r19, r1
    2ce8:	09 f4       	brne	.+2      	; 0x2cec <GLCD_SendChar+0x318>
    2cea:	56 c0       	rjmp	.+172    	; 0x2d98 <GLCD_SendChar+0x3c4>
    2cec:	8a 81       	ldd	r24, Y+2	; 0x02
    2cee:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf0:	86 37       	cpi	r24, 0x76	; 118
    2cf2:	91 05       	cpc	r25, r1
    2cf4:	6c f4       	brge	.+26     	; 0x2d10 <GLCD_SendChar+0x33c>
    2cf6:	2a 81       	ldd	r18, Y+2	; 0x02
    2cf8:	3b 81       	ldd	r19, Y+3	; 0x03
    2cfa:	23 37       	cpi	r18, 0x73	; 115
    2cfc:	31 05       	cpc	r19, r1
    2cfe:	09 f4       	brne	.+2      	; 0x2d02 <GLCD_SendChar+0x32e>
    2d00:	b9 c0       	rjmp	.+370    	; 0x2e74 <GLCD_SendChar+0x4a0>
    2d02:	8a 81       	ldd	r24, Y+2	; 0x02
    2d04:	9b 81       	ldd	r25, Y+3	; 0x03
    2d06:	84 37       	cpi	r24, 0x74	; 116
    2d08:	91 05       	cpc	r25, r1
    2d0a:	09 f4       	brne	.+2      	; 0x2d0e <GLCD_SendChar+0x33a>
    2d0c:	7c c0       	rjmp	.+248    	; 0x2e06 <GLCD_SendChar+0x432>
    2d0e:	6c c1       	rjmp	.+728    	; 0x2fe8 <GLCD_SendChar+0x614>
    2d10:	2a 81       	ldd	r18, Y+2	; 0x02
    2d12:	3b 81       	ldd	r19, Y+3	; 0x03
    2d14:	29 37       	cpi	r18, 0x79	; 121
    2d16:	31 05       	cpc	r19, r1
    2d18:	09 f4       	brne	.+2      	; 0x2d1c <GLCD_SendChar+0x348>
    2d1a:	5f c0       	rjmp	.+190    	; 0x2dda <GLCD_SendChar+0x406>
    2d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d20:	8a 37       	cpi	r24, 0x7A	; 122
    2d22:	91 05       	cpc	r25, r1
    2d24:	09 f4       	brne	.+2      	; 0x2d28 <GLCD_SendChar+0x354>
    2d26:	90 c0       	rjmp	.+288    	; 0x2e48 <GLCD_SendChar+0x474>
    2d28:	5f c1       	rjmp	.+702    	; 0x2fe8 <GLCD_SendChar+0x614>
			case 'A': case 'a': GLCD_SendCharacterPixels(GLCD_CHAR_A); break;
    2d2a:	2c e7       	ldi	r18, 0x7C	; 124
    2d2c:	32 e1       	ldi	r19, 0x12	; 18
    2d2e:	41 e1       	ldi	r20, 0x11	; 17
    2d30:	52 e1       	ldi	r21, 0x12	; 18
    2d32:	6c e7       	ldi	r22, 0x7C	; 124
    2d34:	70 e0       	ldi	r23, 0x00	; 0
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2d3e:	54 c1       	rjmp	.+680    	; 0x2fe8 <GLCD_SendChar+0x614>
			case 'F': case 'f': GLCD_SendCharacterPixels(GLCD_CHAR_F); break;
    2d40:	2f e7       	ldi	r18, 0x7F	; 127
    2d42:	39 e0       	ldi	r19, 0x09	; 9
    2d44:	49 e0       	ldi	r20, 0x09	; 9
    2d46:	59 e0       	ldi	r21, 0x09	; 9
    2d48:	61 e0       	ldi	r22, 0x01	; 1
    2d4a:	70 e0       	ldi	r23, 0x00	; 0
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2d54:	49 c1       	rjmp	.+658    	; 0x2fe8 <GLCD_SendChar+0x614>
			case 'R': case 'r': GLCD_SendCharacterPixels(GLCD_CHAR_R); break;
    2d56:	2f e7       	ldi	r18, 0x7F	; 127
    2d58:	39 e0       	ldi	r19, 0x09	; 9
    2d5a:	49 e1       	ldi	r20, 0x19	; 25
    2d5c:	59 e2       	ldi	r21, 0x29	; 41
    2d5e:	6f e4       	ldi	r22, 0x4F	; 79
    2d60:	70 e0       	ldi	r23, 0x00	; 0
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2d6a:	3e c1       	rjmp	.+636    	; 0x2fe8 <GLCD_SendChar+0x614>
			case 'E': case 'e': GLCD_SendCharacterPixels(GLCD_CHAR_E); break;
    2d6c:	2f e7       	ldi	r18, 0x7F	; 127
    2d6e:	39 e4       	ldi	r19, 0x49	; 73
    2d70:	49 e4       	ldi	r20, 0x49	; 73
    2d72:	59 e4       	ldi	r21, 0x49	; 73
    2d74:	61 e4       	ldi	r22, 0x41	; 65
    2d76:	70 e0       	ldi	r23, 0x00	; 0
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2d80:	33 c1       	rjmp	.+614    	; 0x2fe8 <GLCD_SendChar+0x614>
			case 'Q': case 'q': GLCD_SendCharacterPixels(GLCD_CHAR_Q); break;
    2d82:	2e e1       	ldi	r18, 0x1E	; 30
    2d84:	31 e2       	ldi	r19, 0x21	; 33
    2d86:	41 e3       	ldi	r20, 0x31	; 49
    2d88:	5e e3       	ldi	r21, 0x3E	; 62
    2d8a:	60 e4       	ldi	r22, 0x40	; 64
    2d8c:	70 e0       	ldi	r23, 0x00	; 0
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2d96:	28 c1       	rjmp	.+592    	; 0x2fe8 <GLCD_SendChar+0x614>
			case 'U': case 'u': GLCD_SendCharacterPixels(GLCD_CHAR_U); break;
    2d98:	2f e3       	ldi	r18, 0x3F	; 63
    2d9a:	30 e4       	ldi	r19, 0x40	; 64
    2d9c:	40 e4       	ldi	r20, 0x40	; 64
    2d9e:	50 e4       	ldi	r21, 0x40	; 64
    2da0:	6f e3       	ldi	r22, 0x3F	; 63
    2da2:	70 e0       	ldi	r23, 0x00	; 0
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2dac:	1d c1       	rjmp	.+570    	; 0x2fe8 <GLCD_SendChar+0x614>
			case 'N': case 'n': GLCD_SendCharacterPixels(GLCD_CHAR_N); break;
    2dae:	2f e7       	ldi	r18, 0x7F	; 127
    2db0:	32 e0       	ldi	r19, 0x02	; 2
    2db2:	4c e1       	ldi	r20, 0x1C	; 28
    2db4:	50 e2       	ldi	r21, 0x20	; 32
    2db6:	6f e7       	ldi	r22, 0x7F	; 127
    2db8:	70 e0       	ldi	r23, 0x00	; 0
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2dc2:	12 c1       	rjmp	.+548    	; 0x2fe8 <GLCD_SendChar+0x614>
			case 'C': case 'c': GLCD_SendCharacterPixels(GLCD_CHAR_C); break;
    2dc4:	2e e3       	ldi	r18, 0x3E	; 62
    2dc6:	31 e4       	ldi	r19, 0x41	; 65
    2dc8:	41 e4       	ldi	r20, 0x41	; 65
    2dca:	51 e4       	ldi	r21, 0x41	; 65
    2dcc:	61 e4       	ldi	r22, 0x41	; 65
    2dce:	70 e0       	ldi	r23, 0x00	; 0
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2dd8:	07 c1       	rjmp	.+526    	; 0x2fe8 <GLCD_SendChar+0x614>
			case 'Y': case 'y': GLCD_SendCharacterPixels(GLCD_CHAR_Y); break;
    2dda:	23 e0       	ldi	r18, 0x03	; 3
    2ddc:	3c e0       	ldi	r19, 0x0C	; 12
    2dde:	40 e7       	ldi	r20, 0x70	; 112
    2de0:	5c e0       	ldi	r21, 0x0C	; 12
    2de2:	63 e0       	ldi	r22, 0x03	; 3
    2de4:	70 e0       	ldi	r23, 0x00	; 0
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2dee:	fc c0       	rjmp	.+504    	; 0x2fe8 <GLCD_SendChar+0x614>
			case 'D': case 'd': GLCD_SendCharacterPixels(GLCD_CHAR_D); break;
    2df0:	2f e7       	ldi	r18, 0x7F	; 127
    2df2:	31 e4       	ldi	r19, 0x41	; 65
    2df4:	41 e4       	ldi	r20, 0x41	; 65
    2df6:	5e e3       	ldi	r21, 0x3E	; 62
    2df8:	60 e0       	ldi	r22, 0x00	; 0
    2dfa:	70 e0       	ldi	r23, 0x00	; 0
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2e04:	f1 c0       	rjmp	.+482    	; 0x2fe8 <GLCD_SendChar+0x614>
			case 'T': case 't': GLCD_SendCharacterPixels(GLCD_CHAR_T); break;
    2e06:	21 e0       	ldi	r18, 0x01	; 1
    2e08:	31 e0       	ldi	r19, 0x01	; 1
    2e0a:	4f e7       	ldi	r20, 0x7F	; 127
    2e0c:	51 e0       	ldi	r21, 0x01	; 1
    2e0e:	61 e0       	ldi	r22, 0x01	; 1
    2e10:	70 e0       	ldi	r23, 0x00	; 0
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2e1a:	e6 c0       	rjmp	.+460    	; 0x2fe8 <GLCD_SendChar+0x614>
			case 'K': case 'k': GLCD_SendCharacterPixels(GLCD_CHAR_K); break;
    2e1c:	2f e7       	ldi	r18, 0x7F	; 127
    2e1e:	38 e0       	ldi	r19, 0x08	; 8
    2e20:	44 e1       	ldi	r20, 0x14	; 20
    2e22:	52 e2       	ldi	r21, 0x22	; 34
    2e24:	61 e4       	ldi	r22, 0x41	; 65
    2e26:	70 e0       	ldi	r23, 0x00	; 0
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2e30:	db c0       	rjmp	.+438    	; 0x2fe8 <GLCD_SendChar+0x614>
			case 'H': case 'h': GLCD_SendCharacterPixels(GLCD_CHAR_H); break;
    2e32:	2f e7       	ldi	r18, 0x7F	; 127
    2e34:	38 e0       	ldi	r19, 0x08	; 8
    2e36:	48 e0       	ldi	r20, 0x08	; 8
    2e38:	58 e0       	ldi	r21, 0x08	; 8
    2e3a:	6f e7       	ldi	r22, 0x7F	; 127
    2e3c:	70 e0       	ldi	r23, 0x00	; 0
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2e46:	d0 c0       	rjmp	.+416    	; 0x2fe8 <GLCD_SendChar+0x614>
			case 'Z': case 'z': GLCD_SendCharacterPixels(GLCD_CHAR_Z); break;
    2e48:	21 e6       	ldi	r18, 0x61	; 97
    2e4a:	31 e5       	ldi	r19, 0x51	; 81
    2e4c:	49 e4       	ldi	r20, 0x49	; 73
    2e4e:	55 e4       	ldi	r21, 0x45	; 69
    2e50:	63 e4       	ldi	r22, 0x43	; 67
    2e52:	70 e0       	ldi	r23, 0x00	; 0
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2e5c:	c5 c0       	rjmp	.+394    	; 0x2fe8 <GLCD_SendChar+0x614>
			case 'M': case 'm': GLCD_SendCharacterPixels(GLCD_CHAR_M); break;
    2e5e:	2f e7       	ldi	r18, 0x7F	; 127
    2e60:	32 e0       	ldi	r19, 0x02	; 2
    2e62:	4c e0       	ldi	r20, 0x0C	; 12
    2e64:	52 e0       	ldi	r21, 0x02	; 2
    2e66:	6f e7       	ldi	r22, 0x7F	; 127
    2e68:	70 e0       	ldi	r23, 0x00	; 0
    2e6a:	80 e0       	ldi	r24, 0x00	; 0
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2e72:	ba c0       	rjmp	.+372    	; 0x2fe8 <GLCD_SendChar+0x614>
			case 'S': case 's': GLCD_SendCharacterPixels(GLCD_CHAR_S); break;
    2e74:	2f e4       	ldi	r18, 0x4F	; 79
    2e76:	39 e4       	ldi	r19, 0x49	; 73
    2e78:	49 e4       	ldi	r20, 0x49	; 73
    2e7a:	59 e4       	ldi	r21, 0x49	; 73
    2e7c:	69 ef       	ldi	r22, 0xF9	; 249
    2e7e:	70 e0       	ldi	r23, 0x00	; 0
    2e80:	80 e0       	ldi	r24, 0x00	; 0
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2e88:	af c0       	rjmp	.+350    	; 0x2fe8 <GLCD_SendChar+0x614>
			case 'I': case 'i': GLCD_SendCharacterPixels(GLCD_CHAR_I); break;
    2e8a:	21 e4       	ldi	r18, 0x41	; 65
    2e8c:	31 e4       	ldi	r19, 0x41	; 65
    2e8e:	4f e7       	ldi	r20, 0x7F	; 127
    2e90:	51 e4       	ldi	r21, 0x41	; 65
    2e92:	61 e4       	ldi	r22, 0x41	; 65
    2e94:	70 e0       	ldi	r23, 0x00	; 0
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2e9e:	a4 c0       	rjmp	.+328    	; 0x2fe8 <GLCD_SendChar+0x614>
			case '%': GLCD_SendCharacterPixels(GLCD_CHAR_PERCENT); break;
    2ea0:	23 ec       	ldi	r18, 0xC3	; 195
    2ea2:	33 e7       	ldi	r19, 0x73	; 115
    2ea4:	48 e1       	ldi	r20, 0x18	; 24
    2ea6:	5e ec       	ldi	r21, 0xCE	; 206
    2ea8:	63 ec       	ldi	r22, 0xC3	; 195
    2eaa:	70 e0       	ldi	r23, 0x00	; 0
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2eb4:	99 c0       	rjmp	.+306    	; 0x2fe8 <GLCD_SendChar+0x614>
			case '=': GLCD_SendCharacterPixels(GLCD_CHAR_EQUAL); break;
    2eb6:	24 e2       	ldi	r18, 0x24	; 36
    2eb8:	34 e2       	ldi	r19, 0x24	; 36
    2eba:	44 e2       	ldi	r20, 0x24	; 36
    2ebc:	54 e2       	ldi	r21, 0x24	; 36
    2ebe:	64 e2       	ldi	r22, 0x24	; 36
    2ec0:	70 e0       	ldi	r23, 0x00	; 0
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2eca:	8e c0       	rjmp	.+284    	; 0x2fe8 <GLCD_SendChar+0x614>
			case '.': GLCD_SendCharacterPixels(GLCD_CHAR_POINT); break;
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e7       	ldi	r19, 0x70	; 112
    2ed0:	40 e7       	ldi	r20, 0x70	; 112
    2ed2:	50 e7       	ldi	r21, 0x70	; 112
    2ed4:	60 e0       	ldi	r22, 0x00	; 0
    2ed6:	70 e0       	ldi	r23, 0x00	; 0
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2ee0:	83 c0       	rjmp	.+262    	; 0x2fe8 <GLCD_SendChar+0x614>
			case ' ': GLCD_SendCharacterPixels(GLCD_CHAR_SPACE); break;
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	40 e0       	ldi	r20, 0x00	; 0
    2ee8:	50 e0       	ldi	r21, 0x00	; 0
    2eea:	60 e0       	ldi	r22, 0x00	; 0
    2eec:	70 e0       	ldi	r23, 0x00	; 0
    2eee:	80 e0       	ldi	r24, 0x00	; 0
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2ef6:	78 c0       	rjmp	.+240    	; 0x2fe8 <GLCD_SendChar+0x614>
			case '-': GLCD_SendCharacterPixels(GLCD_CHAR_NEGATIVE); break;
    2ef8:	28 e1       	ldi	r18, 0x18	; 24
    2efa:	38 e1       	ldi	r19, 0x18	; 24
    2efc:	48 e1       	ldi	r20, 0x18	; 24
    2efe:	58 e1       	ldi	r21, 0x18	; 24
    2f00:	68 e1       	ldi	r22, 0x18	; 24
    2f02:	70 e0       	ldi	r23, 0x00	; 0
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2f0c:	6d c0       	rjmp	.+218    	; 0x2fe8 <GLCD_SendChar+0x614>
			case '0': GLCD_SendCharacterPixels(GLCD_CHAR_0); break;
    2f0e:	2e e3       	ldi	r18, 0x3E	; 62
    2f10:	31 e5       	ldi	r19, 0x51	; 81
    2f12:	49 e4       	ldi	r20, 0x49	; 73
    2f14:	55 e4       	ldi	r21, 0x45	; 69
    2f16:	6e e3       	ldi	r22, 0x3E	; 62
    2f18:	70 e0       	ldi	r23, 0x00	; 0
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2f22:	62 c0       	rjmp	.+196    	; 0x2fe8 <GLCD_SendChar+0x614>
			case '1': GLCD_SendCharacterPixels(GLCD_CHAR_1); break;
    2f24:	24 e4       	ldi	r18, 0x44	; 68
    2f26:	32 e4       	ldi	r19, 0x42	; 66
    2f28:	4f e7       	ldi	r20, 0x7F	; 127
    2f2a:	50 e4       	ldi	r21, 0x40	; 64
    2f2c:	60 e4       	ldi	r22, 0x40	; 64
    2f2e:	70 e0       	ldi	r23, 0x00	; 0
    2f30:	80 e0       	ldi	r24, 0x00	; 0
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2f38:	57 c0       	rjmp	.+174    	; 0x2fe8 <GLCD_SendChar+0x614>
			case '2': GLCD_SendCharacterPixels(GLCD_CHAR_2); break;
    2f3a:	26 e4       	ldi	r18, 0x46	; 70
    2f3c:	31 e6       	ldi	r19, 0x61	; 97
    2f3e:	41 e5       	ldi	r20, 0x51	; 81
    2f40:	5e e4       	ldi	r21, 0x4E	; 78
    2f42:	60 e4       	ldi	r22, 0x40	; 64
    2f44:	70 e0       	ldi	r23, 0x00	; 0
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2f4e:	4c c0       	rjmp	.+152    	; 0x2fe8 <GLCD_SendChar+0x614>
			case '3': GLCD_SendCharacterPixels(GLCD_CHAR_3); break;
    2f50:	21 e4       	ldi	r18, 0x41	; 65
    2f52:	39 e4       	ldi	r19, 0x49	; 73
    2f54:	49 e4       	ldi	r20, 0x49	; 73
    2f56:	59 e4       	ldi	r21, 0x49	; 73
    2f58:	66 e3       	ldi	r22, 0x36	; 54
    2f5a:	70 e0       	ldi	r23, 0x00	; 0
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2f64:	41 c0       	rjmp	.+130    	; 0x2fe8 <GLCD_SendChar+0x614>
			case '4': GLCD_SendCharacterPixels(GLCD_CHAR_4); break;
    2f66:	28 e1       	ldi	r18, 0x18	; 24
    2f68:	34 e1       	ldi	r19, 0x14	; 20
    2f6a:	42 e1       	ldi	r20, 0x12	; 18
    2f6c:	5f e7       	ldi	r21, 0x7F	; 127
    2f6e:	60 e1       	ldi	r22, 0x10	; 16
    2f70:	70 e0       	ldi	r23, 0x00	; 0
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2f7a:	36 c0       	rjmp	.+108    	; 0x2fe8 <GLCD_SendChar+0x614>
			case '5': GLCD_SendCharacterPixels(GLCD_CHAR_5); break;
    2f7c:	2f e4       	ldi	r18, 0x4F	; 79
    2f7e:	39 e4       	ldi	r19, 0x49	; 73
    2f80:	49 e4       	ldi	r20, 0x49	; 73
    2f82:	51 e5       	ldi	r21, 0x51	; 81
    2f84:	61 e2       	ldi	r22, 0x21	; 33
    2f86:	70 e0       	ldi	r23, 0x00	; 0
    2f88:	80 e0       	ldi	r24, 0x00	; 0
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2f90:	2b c0       	rjmp	.+86     	; 0x2fe8 <GLCD_SendChar+0x614>
			case '6': GLCD_SendCharacterPixels(GLCD_CHAR_6); break;
    2f92:	2c e7       	ldi	r18, 0x7C	; 124
    2f94:	3a e4       	ldi	r19, 0x4A	; 74
    2f96:	49 e4       	ldi	r20, 0x49	; 73
    2f98:	59 e4       	ldi	r21, 0x49	; 73
    2f9a:	61 e3       	ldi	r22, 0x31	; 49
    2f9c:	70 e0       	ldi	r23, 0x00	; 0
    2f9e:	80 e0       	ldi	r24, 0x00	; 0
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2fa6:	20 c0       	rjmp	.+64     	; 0x2fe8 <GLCD_SendChar+0x614>
			case '7': GLCD_SendCharacterPixels(GLCD_CHAR_7); break;
    2fa8:	21 e0       	ldi	r18, 0x01	; 1
    2faa:	39 e4       	ldi	r19, 0x49	; 73
    2fac:	49 e2       	ldi	r20, 0x29	; 41
    2fae:	59 e1       	ldi	r21, 0x19	; 25
    2fb0:	6f e0       	ldi	r22, 0x0F	; 15
    2fb2:	70 e0       	ldi	r23, 0x00	; 0
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2fbc:	15 c0       	rjmp	.+42     	; 0x2fe8 <GLCD_SendChar+0x614>
			case '8': GLCD_SendCharacterPixels(GLCD_CHAR_8); break;
    2fbe:	27 e7       	ldi	r18, 0x77	; 119
    2fc0:	39 e4       	ldi	r19, 0x49	; 73
    2fc2:	49 e4       	ldi	r20, 0x49	; 73
    2fc4:	59 e4       	ldi	r21, 0x49	; 73
    2fc6:	67 e7       	ldi	r22, 0x77	; 119
    2fc8:	70 e0       	ldi	r23, 0x00	; 0
    2fca:	80 e0       	ldi	r24, 0x00	; 0
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
    2fd2:	0a c0       	rjmp	.+20     	; 0x2fe8 <GLCD_SendChar+0x614>
			case '9': GLCD_SendCharacterPixels(GLCD_CHAR_9); break;
    2fd4:	2f e4       	ldi	r18, 0x4F	; 79
    2fd6:	39 e4       	ldi	r19, 0x49	; 73
    2fd8:	49 e4       	ldi	r20, 0x49	; 73
    2fda:	59 e4       	ldi	r21, 0x49	; 73
    2fdc:	6f e7       	ldi	r22, 0x7F	; 127
    2fde:	70 e0       	ldi	r23, 0x00	; 0
    2fe0:	80 e0       	ldi	r24, 0x00	; 0
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	0e 94 72 14 	call	0x28e4	; 0x28e4 <GLCD_SendCharacterPixels>
			default: break;
		}
		GLCD_SendInstruction(X_FIRST_ADDRESS + Current_X_Position);
    2fe8:	80 91 96 01 	lds	r24, 0x0196
    2fec:	88 54       	subi	r24, 0x48	; 72
    2fee:	0e 94 41 0a 	call	0x1482	; 0x1482 <GLCD_SendInstruction>
		GLCD_SendInstruction(Y_FIRST_ADDRESS + Current_Y_Position);
    2ff2:	80 91 97 01 	lds	r24, 0x0197
    2ff6:	80 5c       	subi	r24, 0xC0	; 192
    2ff8:	0e 94 41 0a 	call	0x1482	; 0x1482 <GLCD_SendInstruction>
		GLCD_SendData(0);
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <GLCD_SendData>
		Current_Y_Position++;
    3002:	80 91 97 01 	lds	r24, 0x0197
    3006:	8f 5f       	subi	r24, 0xFF	; 255
    3008:	80 93 97 01 	sts	0x0197, r24
		if (Current_Y_Position >= GLCD_MAX_PAGE_PIXEL_WIDTH && Current_Half == 0) {
    300c:	80 91 97 01 	lds	r24, 0x0197
    3010:	80 34       	cpi	r24, 0x40	; 64
    3012:	48 f0       	brcs	.+18     	; 0x3026 <GLCD_SendChar+0x652>
    3014:	80 91 98 01 	lds	r24, 0x0198
    3018:	88 23       	and	r24, r24
    301a:	29 f4       	brne	.+10     	; 0x3026 <GLCD_SendChar+0x652>
			GLCD_Page_Select(Right_Page);
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	0e 94 53 13 	call	0x26a6	; 0x26a6 <GLCD_Page_Select>
			Current_Y_Position = 0;
    3022:	10 92 97 01 	sts	0x0197, r1
		}
	}
}
    3026:	0f 90       	pop	r0
    3028:	0f 90       	pop	r0
    302a:	0f 90       	pop	r0
    302c:	0f 90       	pop	r0
    302e:	0f 90       	pop	r0
    3030:	cf 91       	pop	r28
    3032:	df 91       	pop	r29
    3034:	08 95       	ret

00003036 <GLCD_String>:

void GLCD_String(u8* Data_Ptr) {
    3036:	df 93       	push	r29
    3038:	cf 93       	push	r28
    303a:	00 d0       	rcall	.+0      	; 0x303c <GLCD_String+0x6>
    303c:	cd b7       	in	r28, 0x3d	; 61
    303e:	de b7       	in	r29, 0x3e	; 62
    3040:	9a 83       	std	Y+2, r25	; 0x02
    3042:	89 83       	std	Y+1, r24	; 0x01
    3044:	0a c0       	rjmp	.+20     	; 0x305a <GLCD_String+0x24>
	while (*Data_Ptr != '\0') {
		GLCD_SendChar(*Data_Ptr);
    3046:	e9 81       	ldd	r30, Y+1	; 0x01
    3048:	fa 81       	ldd	r31, Y+2	; 0x02
    304a:	80 81       	ld	r24, Z
    304c:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <GLCD_SendChar>
		Data_Ptr++;
    3050:	89 81       	ldd	r24, Y+1	; 0x01
    3052:	9a 81       	ldd	r25, Y+2	; 0x02
    3054:	01 96       	adiw	r24, 0x01	; 1
    3056:	9a 83       	std	Y+2, r25	; 0x02
    3058:	89 83       	std	Y+1, r24	; 0x01
		}
	}
}

void GLCD_String(u8* Data_Ptr) {
	while (*Data_Ptr != '\0') {
    305a:	e9 81       	ldd	r30, Y+1	; 0x01
    305c:	fa 81       	ldd	r31, Y+2	; 0x02
    305e:	80 81       	ld	r24, Z
    3060:	88 23       	and	r24, r24
    3062:	89 f7       	brne	.-30     	; 0x3046 <GLCD_String+0x10>
		GLCD_SendChar(*Data_Ptr);
		Data_Ptr++;
	}
}
    3064:	0f 90       	pop	r0
    3066:	0f 90       	pop	r0
    3068:	cf 91       	pop	r28
    306a:	df 91       	pop	r29
    306c:	08 95       	ret

0000306e <GLCD_DisplayInteger>:

void GLCD_DisplayInteger(s32 Data) {
    306e:	df 93       	push	r29
    3070:	cf 93       	push	r28
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
    3076:	2a 97       	sbiw	r28, 0x0a	; 10
    3078:	0f b6       	in	r0, 0x3f	; 63
    307a:	f8 94       	cli
    307c:	de bf       	out	0x3e, r29	; 62
    307e:	0f be       	out	0x3f, r0	; 63
    3080:	cd bf       	out	0x3d, r28	; 61
    3082:	9a 87       	std	Y+10, r25	; 0x0a
    3084:	89 87       	std	Y+9, r24	; 0x09
	if (Data < 0) {
    3086:	89 85       	ldd	r24, Y+9	; 0x09
    3088:	9a 85       	ldd	r25, Y+10	; 0x0a
    308a:	99 23       	and	r25, r25
    308c:	54 f4       	brge	.+20     	; 0x30a2 <GLCD_DisplayInteger+0x34>
		GLCD_SendChar('-');
    308e:	8d e2       	ldi	r24, 0x2D	; 45
    3090:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <GLCD_SendChar>
		Data = -1 * Data;
    3094:	89 85       	ldd	r24, Y+9	; 0x09
    3096:	9a 85       	ldd	r25, Y+10	; 0x0a
    3098:	90 95       	com	r25
    309a:	81 95       	neg	r24
    309c:	9f 4f       	sbci	r25, 0xFF	; 255
    309e:	9a 87       	std	Y+10, r25	; 0x0a
    30a0:	89 87       	std	Y+9, r24	; 0x09
	}
	u8 u8Local_Digit = 0U;
    30a2:	1b 82       	std	Y+3, r1	; 0x03
	u8 str_reversed[5] = "";
    30a4:	1c 82       	std	Y+4, r1	; 0x04
    30a6:	1d 82       	std	Y+5, r1	; 0x05
    30a8:	1e 82       	std	Y+6, r1	; 0x06
    30aa:	1f 82       	std	Y+7, r1	; 0x07
    30ac:	18 86       	std	Y+8, r1	; 0x08
	u8* str_ptr = str_reversed;
    30ae:	ce 01       	movw	r24, r28
    30b0:	04 96       	adiw	r24, 0x04	; 4
    30b2:	9a 83       	std	Y+2, r25	; 0x02
    30b4:	89 83       	std	Y+1, r24	; 0x01
	do {
		u8Local_Digit = Data%10;
    30b6:	89 85       	ldd	r24, Y+9	; 0x09
    30b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ba:	2a e0       	ldi	r18, 0x0A	; 10
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	b9 01       	movw	r22, r18
    30c0:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__divmodhi4>
    30c4:	8b 83       	std	Y+3, r24	; 0x03
		*str_ptr = (char)(48 + u8Local_Digit); /* 48 is the ASCII code of '0' */
    30c6:	8b 81       	ldd	r24, Y+3	; 0x03
    30c8:	80 5d       	subi	r24, 0xD0	; 208
    30ca:	e9 81       	ldd	r30, Y+1	; 0x01
    30cc:	fa 81       	ldd	r31, Y+2	; 0x02
    30ce:	80 83       	st	Z, r24
		Data = Data/10;
    30d0:	89 85       	ldd	r24, Y+9	; 0x09
    30d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d4:	2a e0       	ldi	r18, 0x0A	; 10
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	b9 01       	movw	r22, r18
    30da:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__divmodhi4>
    30de:	cb 01       	movw	r24, r22
    30e0:	9a 87       	std	Y+10, r25	; 0x0a
    30e2:	89 87       	std	Y+9, r24	; 0x09
		str_ptr++;
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
    30e6:	9a 81       	ldd	r25, Y+2	; 0x02
    30e8:	01 96       	adiw	r24, 0x01	; 1
    30ea:	9a 83       	std	Y+2, r25	; 0x02
    30ec:	89 83       	std	Y+1, r24	; 0x01
	} while (Data > 0);
    30ee:	89 85       	ldd	r24, Y+9	; 0x09
    30f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f2:	18 16       	cp	r1, r24
    30f4:	19 06       	cpc	r1, r25
    30f6:	fc f2       	brlt	.-66     	; 0x30b6 <GLCD_DisplayInteger+0x48>
	do {
		str_ptr--;
    30f8:	89 81       	ldd	r24, Y+1	; 0x01
    30fa:	9a 81       	ldd	r25, Y+2	; 0x02
    30fc:	01 97       	sbiw	r24, 0x01	; 1
    30fe:	9a 83       	std	Y+2, r25	; 0x02
    3100:	89 83       	std	Y+1, r24	; 0x01
		GLCD_SendChar(*str_ptr);
    3102:	e9 81       	ldd	r30, Y+1	; 0x01
    3104:	fa 81       	ldd	r31, Y+2	; 0x02
    3106:	80 81       	ld	r24, Z
    3108:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <GLCD_SendChar>
	} while (str_ptr != str_reversed);
    310c:	9e 01       	movw	r18, r28
    310e:	2c 5f       	subi	r18, 0xFC	; 252
    3110:	3f 4f       	sbci	r19, 0xFF	; 255
    3112:	89 81       	ldd	r24, Y+1	; 0x01
    3114:	9a 81       	ldd	r25, Y+2	; 0x02
    3116:	82 17       	cp	r24, r18
    3118:	93 07       	cpc	r25, r19
    311a:	71 f7       	brne	.-36     	; 0x30f8 <GLCD_DisplayInteger+0x8a>
}
    311c:	2a 96       	adiw	r28, 0x0a	; 10
    311e:	0f b6       	in	r0, 0x3f	; 63
    3120:	f8 94       	cli
    3122:	de bf       	out	0x3e, r29	; 62
    3124:	0f be       	out	0x3f, r0	; 63
    3126:	cd bf       	out	0x3d, r28	; 61
    3128:	cf 91       	pop	r28
    312a:	df 91       	pop	r29
    312c:	08 95       	ret

0000312e <GLCD_SendFloat>:

void GLCD_SendFloat(f32 Data) {
    312e:	ef 92       	push	r14
    3130:	ff 92       	push	r15
    3132:	0f 93       	push	r16
    3134:	1f 93       	push	r17
    3136:	df 93       	push	r29
    3138:	cf 93       	push	r28
    313a:	cd b7       	in	r28, 0x3d	; 61
    313c:	de b7       	in	r29, 0x3e	; 62
    313e:	2c 97       	sbiw	r28, 0x0c	; 12
    3140:	0f b6       	in	r0, 0x3f	; 63
    3142:	f8 94       	cli
    3144:	de bf       	out	0x3e, r29	; 62
    3146:	0f be       	out	0x3f, r0	; 63
    3148:	cd bf       	out	0x3d, r28	; 61
    314a:	69 87       	std	Y+9, r22	; 0x09
    314c:	7a 87       	std	Y+10, r23	; 0x0a
    314e:	8b 87       	std	Y+11, r24	; 0x0b
    3150:	9c 87       	std	Y+12, r25	; 0x0c
	/* Will display only 3 Decimal Places */
	u16 IntegerPart = (u16)Data;
    3152:	69 85       	ldd	r22, Y+9	; 0x09
    3154:	7a 85       	ldd	r23, Y+10	; 0x0a
    3156:	8b 85       	ldd	r24, Y+11	; 0x0b
    3158:	9c 85       	ldd	r25, Y+12	; 0x0c
    315a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	98 87       	std	Y+8, r25	; 0x08
    3164:	8f 83       	std	Y+7, r24	; 0x07
	GLCD_DisplayInteger(IntegerPart);
    3166:	8f 81       	ldd	r24, Y+7	; 0x07
    3168:	98 85       	ldd	r25, Y+8	; 0x08
    316a:	0e 94 37 18 	call	0x306e	; 0x306e <GLCD_DisplayInteger>
	GLCD_SendChar('.');
    316e:	8e e2       	ldi	r24, 0x2E	; 46
    3170:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <GLCD_SendChar>
	f32 DecimalPart = (Data - IntegerPart);
    3174:	8f 81       	ldd	r24, Y+7	; 0x07
    3176:	98 85       	ldd	r25, Y+8	; 0x08
    3178:	cc 01       	movw	r24, r24
    317a:	a0 e0       	ldi	r26, 0x00	; 0
    317c:	b0 e0       	ldi	r27, 0x00	; 0
    317e:	bc 01       	movw	r22, r24
    3180:	cd 01       	movw	r24, r26
    3182:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    3186:	9b 01       	movw	r18, r22
    3188:	ac 01       	movw	r20, r24
    318a:	69 85       	ldd	r22, Y+9	; 0x09
    318c:	7a 85       	ldd	r23, Y+10	; 0x0a
    318e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3190:	9c 85       	ldd	r25, Y+12	; 0x0c
    3192:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	8b 83       	std	Y+3, r24	; 0x03
    319c:	9c 83       	std	Y+4, r25	; 0x04
    319e:	ad 83       	std	Y+5, r26	; 0x05
    31a0:	be 83       	std	Y+6, r27	; 0x06
	u8 Digit = 0;
    31a2:	1a 82       	std	Y+2, r1	; 0x02
	for (u8 i = 0; i < 3; i++) {
    31a4:	19 82       	std	Y+1, r1	; 0x01
    31a6:	3f c0       	rjmp	.+126    	; 0x3226 <GLCD_SendFloat+0xf8>
		Digit = (u8)(DecimalPart * 10.0);
    31a8:	6b 81       	ldd	r22, Y+3	; 0x03
    31aa:	7c 81       	ldd	r23, Y+4	; 0x04
    31ac:	8d 81       	ldd	r24, Y+5	; 0x05
    31ae:	9e 81       	ldd	r25, Y+6	; 0x06
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	40 e2       	ldi	r20, 0x20	; 32
    31b6:	51 e4       	ldi	r21, 0x41	; 65
    31b8:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    31bc:	dc 01       	movw	r26, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	bc 01       	movw	r22, r24
    31c2:	cd 01       	movw	r24, r26
    31c4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	8a 83       	std	Y+2, r24	; 0x02
		GLCD_SendChar((u8)(48+Digit));
    31ce:	8a 81       	ldd	r24, Y+2	; 0x02
    31d0:	80 5d       	subi	r24, 0xD0	; 208
    31d2:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <GLCD_SendChar>
		DecimalPart = ((DecimalPart*10.0) - Digit);
    31d6:	6b 81       	ldd	r22, Y+3	; 0x03
    31d8:	7c 81       	ldd	r23, Y+4	; 0x04
    31da:	8d 81       	ldd	r24, Y+5	; 0x05
    31dc:	9e 81       	ldd	r25, Y+6	; 0x06
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	40 e2       	ldi	r20, 0x20	; 32
    31e4:	51 e4       	ldi	r21, 0x41	; 65
    31e6:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    31ea:	dc 01       	movw	r26, r24
    31ec:	cb 01       	movw	r24, r22
    31ee:	7c 01       	movw	r14, r24
    31f0:	8d 01       	movw	r16, r26
    31f2:	8a 81       	ldd	r24, Y+2	; 0x02
    31f4:	88 2f       	mov	r24, r24
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	aa 27       	eor	r26, r26
    31fa:	97 fd       	sbrc	r25, 7
    31fc:	a0 95       	com	r26
    31fe:	ba 2f       	mov	r27, r26
    3200:	bc 01       	movw	r22, r24
    3202:	cd 01       	movw	r24, r26
    3204:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__floatsisf>
    3208:	9b 01       	movw	r18, r22
    320a:	ac 01       	movw	r20, r24
    320c:	c8 01       	movw	r24, r16
    320e:	b7 01       	movw	r22, r14
    3210:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	8b 83       	std	Y+3, r24	; 0x03
    321a:	9c 83       	std	Y+4, r25	; 0x04
    321c:	ad 83       	std	Y+5, r26	; 0x05
    321e:	be 83       	std	Y+6, r27	; 0x06
	u16 IntegerPart = (u16)Data;
	GLCD_DisplayInteger(IntegerPart);
	GLCD_SendChar('.');
	f32 DecimalPart = (Data - IntegerPart);
	u8 Digit = 0;
	for (u8 i = 0; i < 3; i++) {
    3220:	89 81       	ldd	r24, Y+1	; 0x01
    3222:	8f 5f       	subi	r24, 0xFF	; 255
    3224:	89 83       	std	Y+1, r24	; 0x01
    3226:	89 81       	ldd	r24, Y+1	; 0x01
    3228:	83 30       	cpi	r24, 0x03	; 3
    322a:	08 f4       	brcc	.+2      	; 0x322e <GLCD_SendFloat+0x100>
    322c:	bd cf       	rjmp	.-134    	; 0x31a8 <GLCD_SendFloat+0x7a>
		Digit = (u8)(DecimalPart * 10.0);
		GLCD_SendChar((u8)(48+Digit));
		DecimalPart = ((DecimalPart*10.0) - Digit);
	}
}
    322e:	2c 96       	adiw	r28, 0x0c	; 12
    3230:	0f b6       	in	r0, 0x3f	; 63
    3232:	f8 94       	cli
    3234:	de bf       	out	0x3e, r29	; 62
    3236:	0f be       	out	0x3f, r0	; 63
    3238:	cd bf       	out	0x3d, r28	; 61
    323a:	cf 91       	pop	r28
    323c:	df 91       	pop	r29
    323e:	1f 91       	pop	r17
    3240:	0f 91       	pop	r16
    3242:	ff 90       	pop	r15
    3244:	ef 90       	pop	r14
    3246:	08 95       	ret

00003248 <GLCD_GoToLine>:
//		str++;
//	}
//}
//}
void GLCD_GoToLine(u8 Line)
{
    3248:	df 93       	push	r29
    324a:	cf 93       	push	r28
    324c:	0f 92       	push	r0
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62
    3252:	89 83       	std	Y+1, r24	; 0x01
	if (Line < GLCD_MAX_LINES) {
    3254:	89 81       	ldd	r24, Y+1	; 0x01
    3256:	88 30       	cpi	r24, 0x08	; 8
    3258:	90 f4       	brcc	.+36     	; 0x327e <GLCD_GoToLine+0x36>
		GLCD_Page_Select(Left_Page);
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	0e 94 53 13 	call	0x26a6	; 0x26a6 <GLCD_Page_Select>
		Current_X_Position = Line;
    3260:	89 81       	ldd	r24, Y+1	; 0x01
    3262:	80 93 96 01 	sts	0x0196, r24
		GLCD_SendInstruction(X_FIRST_ADDRESS + Current_X_Position);
    3266:	80 91 96 01 	lds	r24, 0x0196
    326a:	88 54       	subi	r24, 0x48	; 72
    326c:	0e 94 41 0a 	call	0x1482	; 0x1482 <GLCD_SendInstruction>
		Current_Y_Position = 0;
    3270:	10 92 97 01 	sts	0x0197, r1
		GLCD_SendInstruction(Y_FIRST_ADDRESS + Current_Y_Position);
    3274:	80 91 97 01 	lds	r24, 0x0197
    3278:	80 5c       	subi	r24, 0xC0	; 192
    327a:	0e 94 41 0a 	call	0x1482	; 0x1482 <GLCD_SendInstruction>
	}
}
    327e:	0f 90       	pop	r0
    3280:	cf 91       	pop	r28
    3282:	df 91       	pop	r29
    3284:	08 95       	ret

00003286 <GLCD_ClearDisplay>:
void GLCD_ClearDisplay(void)
{
    3286:	df 93       	push	r29
    3288:	cf 93       	push	r28
    328a:	00 d0       	rcall	.+0      	; 0x328c <GLCD_ClearDisplay+0x6>
    328c:	cd b7       	in	r28, 0x3d	; 61
    328e:	de b7       	in	r29, 0x3e	; 62
	for (u8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
    3290:	1a 82       	std	Y+2, r1	; 0x02
    3292:	18 c0       	rjmp	.+48     	; 0x32c4 <GLCD_ClearDisplay+0x3e>
		GLCD_GoToLine(Line);
    3294:	8a 81       	ldd	r24, Y+2	; 0x02
    3296:	0e 94 24 19 	call	0x3248	; 0x3248 <GLCD_GoToLine>
		GLCD_Page_Select(both_pages);
    329a:	82 e0       	ldi	r24, 0x02	; 2
    329c:	0e 94 53 13 	call	0x26a6	; 0x26a6 <GLCD_Page_Select>
		for (u8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
    32a0:	19 82       	std	Y+1, r1	; 0x01
    32a2:	0a c0       	rjmp	.+20     	; 0x32b8 <GLCD_ClearDisplay+0x32>
			GLCD_SendInstruction(Y_FIRST_ADDRESS + i);
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	80 5c       	subi	r24, 0xC0	; 192
    32a8:	0e 94 41 0a 	call	0x1482	; 0x1482 <GLCD_SendInstruction>
			GLCD_SendData(0);
    32ac:	80 e0       	ldi	r24, 0x00	; 0
    32ae:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <GLCD_SendData>
void GLCD_ClearDisplay(void)
{
	for (u8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
		GLCD_GoToLine(Line);
		GLCD_Page_Select(both_pages);
		for (u8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
    32b2:	89 81       	ldd	r24, Y+1	; 0x01
    32b4:	8f 5f       	subi	r24, 0xFF	; 255
    32b6:	89 83       	std	Y+1, r24	; 0x01
    32b8:	89 81       	ldd	r24, Y+1	; 0x01
    32ba:	80 34       	cpi	r24, 0x40	; 64
    32bc:	98 f3       	brcs	.-26     	; 0x32a4 <GLCD_ClearDisplay+0x1e>
		GLCD_SendInstruction(Y_FIRST_ADDRESS + Current_Y_Position);
	}
}
void GLCD_ClearDisplay(void)
{
	for (u8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
    32be:	8a 81       	ldd	r24, Y+2	; 0x02
    32c0:	8f 5f       	subi	r24, 0xFF	; 255
    32c2:	8a 83       	std	Y+2, r24	; 0x02
    32c4:	8a 81       	ldd	r24, Y+2	; 0x02
    32c6:	88 30       	cpi	r24, 0x08	; 8
    32c8:	28 f3       	brcs	.-54     	; 0x3294 <GLCD_ClearDisplay+0xe>
		for (u8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
			GLCD_SendInstruction(Y_FIRST_ADDRESS + i);
			GLCD_SendData(0);
		}
	}
}
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	cf 91       	pop	r28
    32d0:	df 91       	pop	r29
    32d2:	08 95       	ret

000032d4 <GLCD_Reset>:

void GLCD_Reset(void)
{
    32d4:	df 93       	push	r29
    32d6:	cf 93       	push	r28
    32d8:	cd b7       	in	r28, 0x3d	; 61
    32da:	de b7       	in	r29, 0x3e	; 62
    32dc:	68 97       	sbiw	r28, 0x18	; 24
    32de:	0f b6       	in	r0, 0x3f	; 63
    32e0:	f8 94       	cli
    32e2:	de bf       	out	0x3e, r29	; 62
    32e4:	0f be       	out	0x3f, r0	; 63
    32e6:	cd bf       	out	0x3d, r28	; 61
		DIO_voidSetPinVlaue(PORT_COMMAND_BUS, RESET_PIN, DIO_PIN_LOW);
    32e8:	83 e0       	ldi	r24, 0x03	; 3
    32ea:	65 e0       	ldi	r22, 0x05	; 5
    32ec:	40 e0       	ldi	r20, 0x00	; 0
    32ee:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
    32f2:	80 e0       	ldi	r24, 0x00	; 0
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	a0 e2       	ldi	r26, 0x20	; 32
    32f8:	b1 e4       	ldi	r27, 0x41	; 65
    32fa:	8d 8b       	std	Y+21, r24	; 0x15
    32fc:	9e 8b       	std	Y+22, r25	; 0x16
    32fe:	af 8b       	std	Y+23, r26	; 0x17
    3300:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3302:	6d 89       	ldd	r22, Y+21	; 0x15
    3304:	7e 89       	ldd	r23, Y+22	; 0x16
    3306:	8f 89       	ldd	r24, Y+23	; 0x17
    3308:	98 8d       	ldd	r25, Y+24	; 0x18
    330a:	2b ea       	ldi	r18, 0xAB	; 171
    330c:	3a ea       	ldi	r19, 0xAA	; 170
    330e:	4a ea       	ldi	r20, 0xAA	; 170
    3310:	50 e4       	ldi	r21, 0x40	; 64
    3312:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3316:	dc 01       	movw	r26, r24
    3318:	cb 01       	movw	r24, r22
    331a:	89 8b       	std	Y+17, r24	; 0x11
    331c:	9a 8b       	std	Y+18, r25	; 0x12
    331e:	ab 8b       	std	Y+19, r26	; 0x13
    3320:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3322:	69 89       	ldd	r22, Y+17	; 0x11
    3324:	7a 89       	ldd	r23, Y+18	; 0x12
    3326:	8b 89       	ldd	r24, Y+19	; 0x13
    3328:	9c 89       	ldd	r25, Y+20	; 0x14
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	40 e8       	ldi	r20, 0x80	; 128
    3330:	5f e3       	ldi	r21, 0x3F	; 63
    3332:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    3336:	88 23       	and	r24, r24
    3338:	1c f4       	brge	.+6      	; 0x3340 <GLCD_Reset+0x6c>
		__ticks = 1;
    333a:	81 e0       	ldi	r24, 0x01	; 1
    333c:	88 8b       	std	Y+16, r24	; 0x10
    333e:	91 c0       	rjmp	.+290    	; 0x3462 <GLCD_Reset+0x18e>
	else if (__tmp > 255)
    3340:	69 89       	ldd	r22, Y+17	; 0x11
    3342:	7a 89       	ldd	r23, Y+18	; 0x12
    3344:	8b 89       	ldd	r24, Y+19	; 0x13
    3346:	9c 89       	ldd	r25, Y+20	; 0x14
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	4f e7       	ldi	r20, 0x7F	; 127
    334e:	53 e4       	ldi	r21, 0x43	; 67
    3350:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    3354:	18 16       	cp	r1, r24
    3356:	0c f0       	brlt	.+2      	; 0x335a <GLCD_Reset+0x86>
    3358:	7b c0       	rjmp	.+246    	; 0x3450 <GLCD_Reset+0x17c>
	{
		_delay_ms(__us / 1000.0);
    335a:	6d 89       	ldd	r22, Y+21	; 0x15
    335c:	7e 89       	ldd	r23, Y+22	; 0x16
    335e:	8f 89       	ldd	r24, Y+23	; 0x17
    3360:	98 8d       	ldd	r25, Y+24	; 0x18
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	4a e7       	ldi	r20, 0x7A	; 122
    3368:	54 e4       	ldi	r21, 0x44	; 68
    336a:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	8c 87       	std	Y+12, r24	; 0x0c
    3374:	9d 87       	std	Y+13, r25	; 0x0d
    3376:	ae 87       	std	Y+14, r26	; 0x0e
    3378:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    337a:	6c 85       	ldd	r22, Y+12	; 0x0c
    337c:	7d 85       	ldd	r23, Y+13	; 0x0d
    337e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3380:	9f 85       	ldd	r25, Y+15	; 0x0f
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	4a e7       	ldi	r20, 0x7A	; 122
    3388:	55 e4       	ldi	r21, 0x45	; 69
    338a:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	88 87       	std	Y+8, r24	; 0x08
    3394:	99 87       	std	Y+9, r25	; 0x09
    3396:	aa 87       	std	Y+10, r26	; 0x0a
    3398:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    339a:	68 85       	ldd	r22, Y+8	; 0x08
    339c:	79 85       	ldd	r23, Y+9	; 0x09
    339e:	8a 85       	ldd	r24, Y+10	; 0x0a
    33a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	40 e8       	ldi	r20, 0x80	; 128
    33a8:	5f e3       	ldi	r21, 0x3F	; 63
    33aa:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    33ae:	88 23       	and	r24, r24
    33b0:	2c f4       	brge	.+10     	; 0x33bc <GLCD_Reset+0xe8>
		__ticks = 1;
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	9f 83       	std	Y+7, r25	; 0x07
    33b8:	8e 83       	std	Y+6, r24	; 0x06
    33ba:	3f c0       	rjmp	.+126    	; 0x343a <GLCD_Reset+0x166>
	else if (__tmp > 65535)
    33bc:	68 85       	ldd	r22, Y+8	; 0x08
    33be:	79 85       	ldd	r23, Y+9	; 0x09
    33c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    33c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	3f ef       	ldi	r19, 0xFF	; 255
    33c8:	4f e7       	ldi	r20, 0x7F	; 127
    33ca:	57 e4       	ldi	r21, 0x47	; 71
    33cc:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    33d0:	18 16       	cp	r1, r24
    33d2:	4c f5       	brge	.+82     	; 0x3426 <GLCD_Reset+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d4:	6c 85       	ldd	r22, Y+12	; 0x0c
    33d6:	7d 85       	ldd	r23, Y+13	; 0x0d
    33d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    33da:	9f 85       	ldd	r25, Y+15	; 0x0f
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	40 e2       	ldi	r20, 0x20	; 32
    33e2:	51 e4       	ldi	r21, 0x41	; 65
    33e4:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	bc 01       	movw	r22, r24
    33ee:	cd 01       	movw	r24, r26
    33f0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    33f4:	dc 01       	movw	r26, r24
    33f6:	cb 01       	movw	r24, r22
    33f8:	9f 83       	std	Y+7, r25	; 0x07
    33fa:	8e 83       	std	Y+6, r24	; 0x06
    33fc:	0f c0       	rjmp	.+30     	; 0x341c <GLCD_Reset+0x148>
    33fe:	80 e9       	ldi	r24, 0x90	; 144
    3400:	91 e0       	ldi	r25, 0x01	; 1
    3402:	9d 83       	std	Y+5, r25	; 0x05
    3404:	8c 83       	std	Y+4, r24	; 0x04
    3406:	8c 81       	ldd	r24, Y+4	; 0x04
    3408:	9d 81       	ldd	r25, Y+5	; 0x05
    340a:	01 97       	sbiw	r24, 0x01	; 1
    340c:	f1 f7       	brne	.-4      	; 0x340a <GLCD_Reset+0x136>
    340e:	9d 83       	std	Y+5, r25	; 0x05
    3410:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3412:	8e 81       	ldd	r24, Y+6	; 0x06
    3414:	9f 81       	ldd	r25, Y+7	; 0x07
    3416:	01 97       	sbiw	r24, 0x01	; 1
    3418:	9f 83       	std	Y+7, r25	; 0x07
    341a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    341c:	8e 81       	ldd	r24, Y+6	; 0x06
    341e:	9f 81       	ldd	r25, Y+7	; 0x07
    3420:	00 97       	sbiw	r24, 0x00	; 0
    3422:	69 f7       	brne	.-38     	; 0x33fe <GLCD_Reset+0x12a>
    3424:	24 c0       	rjmp	.+72     	; 0x346e <GLCD_Reset+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3426:	68 85       	ldd	r22, Y+8	; 0x08
    3428:	79 85       	ldd	r23, Y+9	; 0x09
    342a:	8a 85       	ldd	r24, Y+10	; 0x0a
    342c:	9b 85       	ldd	r25, Y+11	; 0x0b
    342e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3432:	dc 01       	movw	r26, r24
    3434:	cb 01       	movw	r24, r22
    3436:	9f 83       	std	Y+7, r25	; 0x07
    3438:	8e 83       	std	Y+6, r24	; 0x06
    343a:	8e 81       	ldd	r24, Y+6	; 0x06
    343c:	9f 81       	ldd	r25, Y+7	; 0x07
    343e:	9b 83       	std	Y+3, r25	; 0x03
    3440:	8a 83       	std	Y+2, r24	; 0x02
    3442:	8a 81       	ldd	r24, Y+2	; 0x02
    3444:	9b 81       	ldd	r25, Y+3	; 0x03
    3446:	01 97       	sbiw	r24, 0x01	; 1
    3448:	f1 f7       	brne	.-4      	; 0x3446 <GLCD_Reset+0x172>
    344a:	9b 83       	std	Y+3, r25	; 0x03
    344c:	8a 83       	std	Y+2, r24	; 0x02
    344e:	0f c0       	rjmp	.+30     	; 0x346e <GLCD_Reset+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3450:	69 89       	ldd	r22, Y+17	; 0x11
    3452:	7a 89       	ldd	r23, Y+18	; 0x12
    3454:	8b 89       	ldd	r24, Y+19	; 0x13
    3456:	9c 89       	ldd	r25, Y+20	; 0x14
    3458:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    345c:	dc 01       	movw	r26, r24
    345e:	cb 01       	movw	r24, r22
    3460:	88 8b       	std	Y+16, r24	; 0x10
    3462:	88 89       	ldd	r24, Y+16	; 0x10
    3464:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3466:	89 81       	ldd	r24, Y+1	; 0x01
    3468:	8a 95       	dec	r24
    346a:	f1 f7       	brne	.-4      	; 0x3468 <GLCD_Reset+0x194>
    346c:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(10);

		DIO_voidSetPinVlaue(PORT_COMMAND_BUS, RESET_PIN, DIO_PIN_HIGH);
    346e:	83 e0       	ldi	r24, 0x03	; 3
    3470:	65 e0       	ldi	r22, 0x05	; 5
    3472:	41 e0       	ldi	r20, 0x01	; 1
    3474:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
}
    3478:	68 96       	adiw	r28, 0x18	; 24
    347a:	0f b6       	in	r0, 0x3f	; 63
    347c:	f8 94       	cli
    347e:	de bf       	out	0x3e, r29	; 62
    3480:	0f be       	out	0x3f, r0	; 63
    3482:	cd bf       	out	0x3d, r28	; 61
    3484:	cf 91       	pop	r28
    3486:	df 91       	pop	r29
    3488:	08 95       	ret

0000348a <CLCD_SendEnablePulse>:
#include "CLCD_priv.h"
#include "CLCD_config.h"
#include "CLCD_int.h"

static void CLCD_SendEnablePulse ()
{
    348a:	df 93       	push	r29
    348c:	cf 93       	push	r28
    348e:	cd b7       	in	r28, 0x3d	; 61
    3490:	de b7       	in	r29, 0x3e	; 62
    3492:	2e 97       	sbiw	r28, 0x0e	; 14
    3494:	0f b6       	in	r0, 0x3f	; 63
    3496:	f8 94       	cli
    3498:	de bf       	out	0x3e, r29	; 62
    349a:	0f be       	out	0x3f, r0	; 63
    349c:	cd bf       	out	0x3d, r28	; 61
	//	send enable pulse
	DIO_voidSetPinVlaue(CLCD_U8_CTRL_PORT,CLCD_U8_E_PIN , DIO_PIN_HIGH);
    349e:	81 e0       	ldi	r24, 0x01	; 1
    34a0:	62 e0       	ldi	r22, 0x02	; 2
    34a2:	41 e0       	ldi	r20, 0x01	; 1
    34a4:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
    34a8:	80 e0       	ldi	r24, 0x00	; 0
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	a0 e2       	ldi	r26, 0x20	; 32
    34ae:	b1 e4       	ldi	r27, 0x41	; 65
    34b0:	8b 87       	std	Y+11, r24	; 0x0b
    34b2:	9c 87       	std	Y+12, r25	; 0x0c
    34b4:	ad 87       	std	Y+13, r26	; 0x0d
    34b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    34ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    34bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    34be:	9e 85       	ldd	r25, Y+14	; 0x0e
    34c0:	20 e0       	ldi	r18, 0x00	; 0
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	4a e7       	ldi	r20, 0x7A	; 122
    34c6:	55 e4       	ldi	r21, 0x45	; 69
    34c8:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    34cc:	dc 01       	movw	r26, r24
    34ce:	cb 01       	movw	r24, r22
    34d0:	8f 83       	std	Y+7, r24	; 0x07
    34d2:	98 87       	std	Y+8, r25	; 0x08
    34d4:	a9 87       	std	Y+9, r26	; 0x09
    34d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34d8:	6f 81       	ldd	r22, Y+7	; 0x07
    34da:	78 85       	ldd	r23, Y+8	; 0x08
    34dc:	89 85       	ldd	r24, Y+9	; 0x09
    34de:	9a 85       	ldd	r25, Y+10	; 0x0a
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	40 e8       	ldi	r20, 0x80	; 128
    34e6:	5f e3       	ldi	r21, 0x3F	; 63
    34e8:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    34ec:	88 23       	and	r24, r24
    34ee:	2c f4       	brge	.+10     	; 0x34fa <CLCD_SendEnablePulse+0x70>
		__ticks = 1;
    34f0:	81 e0       	ldi	r24, 0x01	; 1
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	9e 83       	std	Y+6, r25	; 0x06
    34f6:	8d 83       	std	Y+5, r24	; 0x05
    34f8:	3f c0       	rjmp	.+126    	; 0x3578 <CLCD_SendEnablePulse+0xee>
	else if (__tmp > 65535)
    34fa:	6f 81       	ldd	r22, Y+7	; 0x07
    34fc:	78 85       	ldd	r23, Y+8	; 0x08
    34fe:	89 85       	ldd	r24, Y+9	; 0x09
    3500:	9a 85       	ldd	r25, Y+10	; 0x0a
    3502:	20 e0       	ldi	r18, 0x00	; 0
    3504:	3f ef       	ldi	r19, 0xFF	; 255
    3506:	4f e7       	ldi	r20, 0x7F	; 127
    3508:	57 e4       	ldi	r21, 0x47	; 71
    350a:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    350e:	18 16       	cp	r1, r24
    3510:	4c f5       	brge	.+82     	; 0x3564 <CLCD_SendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3512:	6b 85       	ldd	r22, Y+11	; 0x0b
    3514:	7c 85       	ldd	r23, Y+12	; 0x0c
    3516:	8d 85       	ldd	r24, Y+13	; 0x0d
    3518:	9e 85       	ldd	r25, Y+14	; 0x0e
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	40 e2       	ldi	r20, 0x20	; 32
    3520:	51 e4       	ldi	r21, 0x41	; 65
    3522:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	bc 01       	movw	r22, r24
    352c:	cd 01       	movw	r24, r26
    352e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3532:	dc 01       	movw	r26, r24
    3534:	cb 01       	movw	r24, r22
    3536:	9e 83       	std	Y+6, r25	; 0x06
    3538:	8d 83       	std	Y+5, r24	; 0x05
    353a:	0f c0       	rjmp	.+30     	; 0x355a <CLCD_SendEnablePulse+0xd0>
    353c:	80 e9       	ldi	r24, 0x90	; 144
    353e:	91 e0       	ldi	r25, 0x01	; 1
    3540:	9c 83       	std	Y+4, r25	; 0x04
    3542:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3544:	8b 81       	ldd	r24, Y+3	; 0x03
    3546:	9c 81       	ldd	r25, Y+4	; 0x04
    3548:	01 97       	sbiw	r24, 0x01	; 1
    354a:	f1 f7       	brne	.-4      	; 0x3548 <CLCD_SendEnablePulse+0xbe>
    354c:	9c 83       	std	Y+4, r25	; 0x04
    354e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3550:	8d 81       	ldd	r24, Y+5	; 0x05
    3552:	9e 81       	ldd	r25, Y+6	; 0x06
    3554:	01 97       	sbiw	r24, 0x01	; 1
    3556:	9e 83       	std	Y+6, r25	; 0x06
    3558:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    355a:	8d 81       	ldd	r24, Y+5	; 0x05
    355c:	9e 81       	ldd	r25, Y+6	; 0x06
    355e:	00 97       	sbiw	r24, 0x00	; 0
    3560:	69 f7       	brne	.-38     	; 0x353c <CLCD_SendEnablePulse+0xb2>
    3562:	14 c0       	rjmp	.+40     	; 0x358c <CLCD_SendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3564:	6f 81       	ldd	r22, Y+7	; 0x07
    3566:	78 85       	ldd	r23, Y+8	; 0x08
    3568:	89 85       	ldd	r24, Y+9	; 0x09
    356a:	9a 85       	ldd	r25, Y+10	; 0x0a
    356c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3570:	dc 01       	movw	r26, r24
    3572:	cb 01       	movw	r24, r22
    3574:	9e 83       	std	Y+6, r25	; 0x06
    3576:	8d 83       	std	Y+5, r24	; 0x05
    3578:	8d 81       	ldd	r24, Y+5	; 0x05
    357a:	9e 81       	ldd	r25, Y+6	; 0x06
    357c:	9a 83       	std	Y+2, r25	; 0x02
    357e:	89 83       	std	Y+1, r24	; 0x01
    3580:	89 81       	ldd	r24, Y+1	; 0x01
    3582:	9a 81       	ldd	r25, Y+2	; 0x02
    3584:	01 97       	sbiw	r24, 0x01	; 1
    3586:	f1 f7       	brne	.-4      	; 0x3584 <CLCD_SendEnablePulse+0xfa>
    3588:	9a 83       	std	Y+2, r25	; 0x02
    358a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_voidSetPinVlaue(CLCD_U8_CTRL_PORT,CLCD_U8_E_PIN , DIO_PIN_LOW);
    358c:	81 e0       	ldi	r24, 0x01	; 1
    358e:	62 e0       	ldi	r22, 0x02	; 2
    3590:	40 e0       	ldi	r20, 0x00	; 0
    3592:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
}
    3596:	2e 96       	adiw	r28, 0x0e	; 14
    3598:	0f b6       	in	r0, 0x3f	; 63
    359a:	f8 94       	cli
    359c:	de bf       	out	0x3e, r29	; 62
    359e:	0f be       	out	0x3f, r0	; 63
    35a0:	cd bf       	out	0x3d, r28	; 61
    35a2:	cf 91       	pop	r28
    35a4:	df 91       	pop	r29
    35a6:	08 95       	ret

000035a8 <CLCD_voidSendData>:
	DIO_voidSetPinVlaue(CLCD_U8_DATA_PORT,CLCD_U8_DATA_PIN_1,GET_BIT(Copy_data,1));
	DIO_voidSetPinVlaue(CLCD_U8_DATA_PORT,CLCD_U8_DATA_PIN_2,GET_BIT(Copy_data,2));
	DIO_voidSetPinVlaue(CLCD_U8_DATA_PORT,CLCD_U8_DATA_PIN_3,GET_BIT(Copy_data,3));
}
#endif
void CLCD_voidSendData(u8 Copy_u8Data){
    35a8:	df 93       	push	r29
    35aa:	cf 93       	push	r28
    35ac:	0f 92       	push	r0
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62
    35b2:	89 83       	std	Y+1, r24	; 0x01
	//	clr R/W
	DIO_voidSetPinVlaue(CLCD_U8_CTRL_PORT,CLCD_U8_RW_PIN , DIO_PIN_LOW);
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	61 e0       	ldi	r22, 0x01	; 1
    35b8:	40 e0       	ldi	r20, 0x00	; 0
    35ba:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
	//	set RS
	DIO_voidSetPinVlaue(CLCD_U8_CTRL_PORT,CLCD_U8_RS_PIN , DIO_PIN_HIGH);
    35be:	81 e0       	ldi	r24, 0x01	; 1
    35c0:	60 e0       	ldi	r22, 0x00	; 0
    35c2:	41 e0       	ldi	r20, 0x01	; 1
    35c4:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
#if CLCD_U8_MODE == CLCD_U8_8_BIT_MODE
	//	data on Data port
	DIO_voidSetPortVlaue(CLCD_U8_DATA_PORT,Copy_u8Data);
    35c8:	82 e0       	ldi	r24, 0x02	; 2
    35ca:	69 81       	ldd	r22, Y+1	; 0x01
    35cc:	0e 94 0f 0a 	call	0x141e	; 0x141e <DIO_voidSetPortVlaue>
	CLCD_SendEnablePulse();
    35d0:	0e 94 45 1a 	call	0x348a	; 0x348a <CLCD_SendEnablePulse>
	CLCD_voidSetHalfPort(Copy_u8Data>>4);
	CLCD_SendEnablePulse();
	CLCD_voidSetHalfPort(Copy_u8Data);
	CLCD_SendEnablePulse();
#endif
}
    35d4:	0f 90       	pop	r0
    35d6:	cf 91       	pop	r28
    35d8:	df 91       	pop	r29
    35da:	08 95       	ret

000035dc <CLCD_voidSendInstruction>:
void CLCD_voidSendInstruction(u8 Copy_u8Instruction){
    35dc:	df 93       	push	r29
    35de:	cf 93       	push	r28
    35e0:	0f 92       	push	r0
    35e2:	cd b7       	in	r28, 0x3d	; 61
    35e4:	de b7       	in	r29, 0x3e	; 62
    35e6:	89 83       	std	Y+1, r24	; 0x01

	//	clr R/W
	DIO_voidSetPinVlaue(CLCD_U8_CTRL_PORT,CLCD_U8_RW_PIN , DIO_PIN_LOW);
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	61 e0       	ldi	r22, 0x01	; 1
    35ec:	40 e0       	ldi	r20, 0x00	; 0
    35ee:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>
	//	set RS
	DIO_voidSetPinVlaue(CLCD_U8_CTRL_PORT,CLCD_U8_RS_PIN , DIO_PIN_LOW);
    35f2:	81 e0       	ldi	r24, 0x01	; 1
    35f4:	60 e0       	ldi	r22, 0x00	; 0
    35f6:	40 e0       	ldi	r20, 0x00	; 0
    35f8:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidSetPinVlaue>

#if CLCD_U8_MODE == CLCD_U8_8_BIT_MODE
	//	data on Data port
	DIO_voidSetPortVlaue(CLCD_U8_DATA_PORT,Copy_u8Instruction);
    35fc:	82 e0       	ldi	r24, 0x02	; 2
    35fe:	69 81       	ldd	r22, Y+1	; 0x01
    3600:	0e 94 0f 0a 	call	0x141e	; 0x141e <DIO_voidSetPortVlaue>
	CLCD_SendEnablePulse();
    3604:	0e 94 45 1a 	call	0x348a	; 0x348a <CLCD_SendEnablePulse>
	CLCD_voidSetHalfPort(Copy_u8Instruction>>4);
	CLCD_SendEnablePulse();
	CLCD_voidSetHalfPort(Copy_u8Instruction);
	CLCD_SendEnablePulse();
#endif
}
    3608:	0f 90       	pop	r0
    360a:	cf 91       	pop	r28
    360c:	df 91       	pop	r29
    360e:	08 95       	ret

00003610 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    3610:	df 93       	push	r29
    3612:	cf 93       	push	r28
    3614:	cd b7       	in	r28, 0x3d	; 61
    3616:	de b7       	in	r29, 0x3e	; 62
    3618:	2e 97       	sbiw	r28, 0x0e	; 14
    361a:	0f b6       	in	r0, 0x3f	; 63
    361c:	f8 94       	cli
    361e:	de bf       	out	0x3e, r29	; 62
    3620:	0f be       	out	0x3f, r0	; 63
    3622:	cd bf       	out	0x3d, r28	; 61
    3624:	80 e0       	ldi	r24, 0x00	; 0
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	a0 e2       	ldi	r26, 0x20	; 32
    362a:	b2 e4       	ldi	r27, 0x42	; 66
    362c:	8b 87       	std	Y+11, r24	; 0x0b
    362e:	9c 87       	std	Y+12, r25	; 0x0c
    3630:	ad 87       	std	Y+13, r26	; 0x0d
    3632:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3634:	6b 85       	ldd	r22, Y+11	; 0x0b
    3636:	7c 85       	ldd	r23, Y+12	; 0x0c
    3638:	8d 85       	ldd	r24, Y+13	; 0x0d
    363a:	9e 85       	ldd	r25, Y+14	; 0x0e
    363c:	20 e0       	ldi	r18, 0x00	; 0
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	4a e7       	ldi	r20, 0x7A	; 122
    3642:	55 e4       	ldi	r21, 0x45	; 69
    3644:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3648:	dc 01       	movw	r26, r24
    364a:	cb 01       	movw	r24, r22
    364c:	8f 83       	std	Y+7, r24	; 0x07
    364e:	98 87       	std	Y+8, r25	; 0x08
    3650:	a9 87       	std	Y+9, r26	; 0x09
    3652:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3654:	6f 81       	ldd	r22, Y+7	; 0x07
    3656:	78 85       	ldd	r23, Y+8	; 0x08
    3658:	89 85       	ldd	r24, Y+9	; 0x09
    365a:	9a 85       	ldd	r25, Y+10	; 0x0a
    365c:	20 e0       	ldi	r18, 0x00	; 0
    365e:	30 e0       	ldi	r19, 0x00	; 0
    3660:	40 e8       	ldi	r20, 0x80	; 128
    3662:	5f e3       	ldi	r21, 0x3F	; 63
    3664:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    3668:	88 23       	and	r24, r24
    366a:	2c f4       	brge	.+10     	; 0x3676 <CLCD_voidInit+0x66>
		__ticks = 1;
    366c:	81 e0       	ldi	r24, 0x01	; 1
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	9e 83       	std	Y+6, r25	; 0x06
    3672:	8d 83       	std	Y+5, r24	; 0x05
    3674:	3f c0       	rjmp	.+126    	; 0x36f4 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    3676:	6f 81       	ldd	r22, Y+7	; 0x07
    3678:	78 85       	ldd	r23, Y+8	; 0x08
    367a:	89 85       	ldd	r24, Y+9	; 0x09
    367c:	9a 85       	ldd	r25, Y+10	; 0x0a
    367e:	20 e0       	ldi	r18, 0x00	; 0
    3680:	3f ef       	ldi	r19, 0xFF	; 255
    3682:	4f e7       	ldi	r20, 0x7F	; 127
    3684:	57 e4       	ldi	r21, 0x47	; 71
    3686:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    368a:	18 16       	cp	r1, r24
    368c:	4c f5       	brge	.+82     	; 0x36e0 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    368e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3690:	7c 85       	ldd	r23, Y+12	; 0x0c
    3692:	8d 85       	ldd	r24, Y+13	; 0x0d
    3694:	9e 85       	ldd	r25, Y+14	; 0x0e
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	40 e2       	ldi	r20, 0x20	; 32
    369c:	51 e4       	ldi	r21, 0x41	; 65
    369e:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    36a2:	dc 01       	movw	r26, r24
    36a4:	cb 01       	movw	r24, r22
    36a6:	bc 01       	movw	r22, r24
    36a8:	cd 01       	movw	r24, r26
    36aa:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	9e 83       	std	Y+6, r25	; 0x06
    36b4:	8d 83       	std	Y+5, r24	; 0x05
    36b6:	0f c0       	rjmp	.+30     	; 0x36d6 <CLCD_voidInit+0xc6>
    36b8:	80 e9       	ldi	r24, 0x90	; 144
    36ba:	91 e0       	ldi	r25, 0x01	; 1
    36bc:	9c 83       	std	Y+4, r25	; 0x04
    36be:	8b 83       	std	Y+3, r24	; 0x03
    36c0:	8b 81       	ldd	r24, Y+3	; 0x03
    36c2:	9c 81       	ldd	r25, Y+4	; 0x04
    36c4:	01 97       	sbiw	r24, 0x01	; 1
    36c6:	f1 f7       	brne	.-4      	; 0x36c4 <CLCD_voidInit+0xb4>
    36c8:	9c 83       	std	Y+4, r25	; 0x04
    36ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36cc:	8d 81       	ldd	r24, Y+5	; 0x05
    36ce:	9e 81       	ldd	r25, Y+6	; 0x06
    36d0:	01 97       	sbiw	r24, 0x01	; 1
    36d2:	9e 83       	std	Y+6, r25	; 0x06
    36d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36d6:	8d 81       	ldd	r24, Y+5	; 0x05
    36d8:	9e 81       	ldd	r25, Y+6	; 0x06
    36da:	00 97       	sbiw	r24, 0x00	; 0
    36dc:	69 f7       	brne	.-38     	; 0x36b8 <CLCD_voidInit+0xa8>
    36de:	14 c0       	rjmp	.+40     	; 0x3708 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36e0:	6f 81       	ldd	r22, Y+7	; 0x07
    36e2:	78 85       	ldd	r23, Y+8	; 0x08
    36e4:	89 85       	ldd	r24, Y+9	; 0x09
    36e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    36e8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    36ec:	dc 01       	movw	r26, r24
    36ee:	cb 01       	movw	r24, r22
    36f0:	9e 83       	std	Y+6, r25	; 0x06
    36f2:	8d 83       	std	Y+5, r24	; 0x05
    36f4:	8d 81       	ldd	r24, Y+5	; 0x05
    36f6:	9e 81       	ldd	r25, Y+6	; 0x06
    36f8:	9a 83       	std	Y+2, r25	; 0x02
    36fa:	89 83       	std	Y+1, r24	; 0x01
    36fc:	89 81       	ldd	r24, Y+1	; 0x01
    36fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3700:	01 97       	sbiw	r24, 0x01	; 1
    3702:	f1 f7       	brne	.-4      	; 0x3700 <CLCD_voidInit+0xf0>
    3704:	9a 83       	std	Y+2, r25	; 0x02
    3706:	89 83       	std	Y+1, r24	; 0x01
	//	delay 30 ms
	_delay_ms(40);
#if CLCD_U8_MODE == CLCD_U8_8_BIT_MODE
	//	function set
	CLCD_voidSendInstruction(0b00111000);
    3708:	88 e3       	ldi	r24, 0x38	; 56
    370a:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <CLCD_voidSendInstruction>
	CLCD_voidSetHalfPort(0b1000);
	CLCD_SendEnablePulse();

#endif
	//	Display on /off
	CLCD_voidSendInstruction(0b00001111);
    370e:	8f e0       	ldi	r24, 0x0F	; 15
    3710:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <CLCD_voidSendInstruction>

	//	clear
	CLCD_voidSendInstruction(1);
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <CLCD_voidSendInstruction>
}
    371a:	2e 96       	adiw	r28, 0x0e	; 14
    371c:	0f b6       	in	r0, 0x3f	; 63
    371e:	f8 94       	cli
    3720:	de bf       	out	0x3e, r29	; 62
    3722:	0f be       	out	0x3f, r0	; 63
    3724:	cd bf       	out	0x3d, r28	; 61
    3726:	cf 91       	pop	r28
    3728:	df 91       	pop	r29
    372a:	08 95       	ret

0000372c <CLCD_voidSendString>:



void CLCD_voidSendString(char *str ){
    372c:	df 93       	push	r29
    372e:	cf 93       	push	r28
    3730:	00 d0       	rcall	.+0      	; 0x3732 <CLCD_voidSendString+0x6>
    3732:	cd b7       	in	r28, 0x3d	; 61
    3734:	de b7       	in	r29, 0x3e	; 62
    3736:	9a 83       	std	Y+2, r25	; 0x02
    3738:	89 83       	std	Y+1, r24	; 0x01
    373a:	0b c0       	rjmp	.+22     	; 0x3752 <CLCD_voidSendString+0x26>
	while(*str != '\0')
		CLCD_voidSendData(*str++);
    373c:	e9 81       	ldd	r30, Y+1	; 0x01
    373e:	fa 81       	ldd	r31, Y+2	; 0x02
    3740:	20 81       	ld	r18, Z
    3742:	89 81       	ldd	r24, Y+1	; 0x01
    3744:	9a 81       	ldd	r25, Y+2	; 0x02
    3746:	01 96       	adiw	r24, 0x01	; 1
    3748:	9a 83       	std	Y+2, r25	; 0x02
    374a:	89 83       	std	Y+1, r24	; 0x01
    374c:	82 2f       	mov	r24, r18
    374e:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <CLCD_voidSendData>
}



void CLCD_voidSendString(char *str ){
	while(*str != '\0')
    3752:	e9 81       	ldd	r30, Y+1	; 0x01
    3754:	fa 81       	ldd	r31, Y+2	; 0x02
    3756:	80 81       	ld	r24, Z
    3758:	88 23       	and	r24, r24
    375a:	81 f7       	brne	.-32     	; 0x373c <CLCD_voidSendString+0x10>
		CLCD_voidSendData(*str++);
}
    375c:	0f 90       	pop	r0
    375e:	0f 90       	pop	r0
    3760:	cf 91       	pop	r28
    3762:	df 91       	pop	r29
    3764:	08 95       	ret

00003766 <CLCD_voidSendNUmber>:
void CLCD_voidSendNUmber(u32 Copy_u16num){
    3766:	df 93       	push	r29
    3768:	cf 93       	push	r28
    376a:	cd b7       	in	r28, 0x3d	; 61
    376c:	de b7       	in	r29, 0x3e	; 62
    376e:	27 97       	sbiw	r28, 0x07	; 7
    3770:	0f b6       	in	r0, 0x3f	; 63
    3772:	f8 94       	cli
    3774:	de bf       	out	0x3e, r29	; 62
    3776:	0f be       	out	0x3f, r0	; 63
    3778:	cd bf       	out	0x3d, r28	; 61
    377a:	9f 83       	std	Y+7, r25	; 0x07
    377c:	8e 83       	std	Y+6, r24	; 0x06
	u16 local_tmp  = 0 ,counter = 0 ;
    377e:	1d 82       	std	Y+5, r1	; 0x05
    3780:	1c 82       	std	Y+4, r1	; 0x04
    3782:	1b 82       	std	Y+3, r1	; 0x03
    3784:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u16num == 0 )
    3786:	8e 81       	ldd	r24, Y+6	; 0x06
    3788:	9f 81       	ldd	r25, Y+7	; 0x07
    378a:	00 97       	sbiw	r24, 0x00	; 0
    378c:	99 f4       	brne	.+38     	; 0x37b4 <CLCD_voidSendNUmber+0x4e>
	{
		CLCD_voidSendData('0');
    378e:	80 e3       	ldi	r24, 0x30	; 48
    3790:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <CLCD_voidSendData>
    3794:	6c c0       	rjmp	.+216    	; 0x386e <CLCD_voidSendNUmber+0x108>
		return;
	}else{

		while((Copy_u16num%10) == 0  )
		{
			Copy_u16num/=10;
    3796:	8e 81       	ldd	r24, Y+6	; 0x06
    3798:	9f 81       	ldd	r25, Y+7	; 0x07
    379a:	2a e0       	ldi	r18, 0x0A	; 10
    379c:	30 e0       	ldi	r19, 0x00	; 0
    379e:	b9 01       	movw	r22, r18
    37a0:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__udivmodhi4>
    37a4:	cb 01       	movw	r24, r22
    37a6:	9f 83       	std	Y+7, r25	; 0x07
    37a8:	8e 83       	std	Y+6, r24	; 0x06
			counter++;
    37aa:	8a 81       	ldd	r24, Y+2	; 0x02
    37ac:	9b 81       	ldd	r25, Y+3	; 0x03
    37ae:	01 96       	adiw	r24, 0x01	; 1
    37b0:	9b 83       	std	Y+3, r25	; 0x03
    37b2:	8a 83       	std	Y+2, r24	; 0x02
	{
		CLCD_voidSendData('0');
		return;
	}else{

		while((Copy_u16num%10) == 0  )
    37b4:	8e 81       	ldd	r24, Y+6	; 0x06
    37b6:	9f 81       	ldd	r25, Y+7	; 0x07
    37b8:	2a e0       	ldi	r18, 0x0A	; 10
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	b9 01       	movw	r22, r18
    37be:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__udivmodhi4>
    37c2:	00 97       	sbiw	r24, 0x00	; 0
    37c4:	41 f3       	breq	.-48     	; 0x3796 <CLCD_voidSendNUmber+0x30>
    37c6:	22 c0       	rjmp	.+68     	; 0x380c <CLCD_voidSendNUmber+0xa6>
			Copy_u16num/=10;
			counter++;
		}
		while(Copy_u16num>0 )
		{
			local_tmp = local_tmp*10 + Copy_u16num%10;
    37c8:	8c 81       	ldd	r24, Y+4	; 0x04
    37ca:	9d 81       	ldd	r25, Y+5	; 0x05
    37cc:	9c 01       	movw	r18, r24
    37ce:	22 0f       	add	r18, r18
    37d0:	33 1f       	adc	r19, r19
    37d2:	c9 01       	movw	r24, r18
    37d4:	88 0f       	add	r24, r24
    37d6:	99 1f       	adc	r25, r25
    37d8:	88 0f       	add	r24, r24
    37da:	99 1f       	adc	r25, r25
    37dc:	f9 01       	movw	r30, r18
    37de:	e8 0f       	add	r30, r24
    37e0:	f9 1f       	adc	r31, r25
    37e2:	8e 81       	ldd	r24, Y+6	; 0x06
    37e4:	9f 81       	ldd	r25, Y+7	; 0x07
    37e6:	2a e0       	ldi	r18, 0x0A	; 10
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	b9 01       	movw	r22, r18
    37ec:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__udivmodhi4>
    37f0:	8e 0f       	add	r24, r30
    37f2:	9f 1f       	adc	r25, r31
    37f4:	9d 83       	std	Y+5, r25	; 0x05
    37f6:	8c 83       	std	Y+4, r24	; 0x04
			Copy_u16num/=10;
    37f8:	8e 81       	ldd	r24, Y+6	; 0x06
    37fa:	9f 81       	ldd	r25, Y+7	; 0x07
    37fc:	2a e0       	ldi	r18, 0x0A	; 10
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	b9 01       	movw	r22, r18
    3802:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__udivmodhi4>
    3806:	cb 01       	movw	r24, r22
    3808:	9f 83       	std	Y+7, r25	; 0x07
    380a:	8e 83       	std	Y+6, r24	; 0x06
		while((Copy_u16num%10) == 0  )
		{
			Copy_u16num/=10;
			counter++;
		}
		while(Copy_u16num>0 )
    380c:	8e 81       	ldd	r24, Y+6	; 0x06
    380e:	9f 81       	ldd	r25, Y+7	; 0x07
    3810:	00 97       	sbiw	r24, 0x00	; 0
    3812:	d1 f6       	brne	.-76     	; 0x37c8 <CLCD_voidSendNUmber+0x62>
		{
			local_tmp = local_tmp*10 + Copy_u16num%10;
			Copy_u16num/=10;
		}
		Copy_u16num = local_tmp;
    3814:	8c 81       	ldd	r24, Y+4	; 0x04
    3816:	9d 81       	ldd	r25, Y+5	; 0x05
    3818:	9f 83       	std	Y+7, r25	; 0x07
    381a:	8e 83       	std	Y+6, r24	; 0x06
    381c:	14 c0       	rjmp	.+40     	; 0x3846 <CLCD_voidSendNUmber+0xe0>
		while(Copy_u16num >0 )
		{
			CLCD_voidSendData(Copy_u16num%10 +'0');
    381e:	8e 81       	ldd	r24, Y+6	; 0x06
    3820:	9f 81       	ldd	r25, Y+7	; 0x07
    3822:	2a e0       	ldi	r18, 0x0A	; 10
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	b9 01       	movw	r22, r18
    3828:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__udivmodhi4>
    382c:	80 5d       	subi	r24, 0xD0	; 208
    382e:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <CLCD_voidSendData>
			Copy_u16num/=10;
    3832:	8e 81       	ldd	r24, Y+6	; 0x06
    3834:	9f 81       	ldd	r25, Y+7	; 0x07
    3836:	2a e0       	ldi	r18, 0x0A	; 10
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	b9 01       	movw	r22, r18
    383c:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__udivmodhi4>
    3840:	cb 01       	movw	r24, r22
    3842:	9f 83       	std	Y+7, r25	; 0x07
    3844:	8e 83       	std	Y+6, r24	; 0x06
		{
			local_tmp = local_tmp*10 + Copy_u16num%10;
			Copy_u16num/=10;
		}
		Copy_u16num = local_tmp;
		while(Copy_u16num >0 )
    3846:	8e 81       	ldd	r24, Y+6	; 0x06
    3848:	9f 81       	ldd	r25, Y+7	; 0x07
    384a:	00 97       	sbiw	r24, 0x00	; 0
    384c:	41 f7       	brne	.-48     	; 0x381e <CLCD_voidSendNUmber+0xb8>
		{
			CLCD_voidSendData(Copy_u16num%10 +'0');
			Copy_u16num/=10;
		}
		for(u8 i = 0 ; i<counter ; i++)
    384e:	19 82       	std	Y+1, r1	; 0x01
    3850:	06 c0       	rjmp	.+12     	; 0x385e <CLCD_voidSendNUmber+0xf8>
		{
			CLCD_voidSendData('0');
    3852:	80 e3       	ldi	r24, 0x30	; 48
    3854:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <CLCD_voidSendData>
		while(Copy_u16num >0 )
		{
			CLCD_voidSendData(Copy_u16num%10 +'0');
			Copy_u16num/=10;
		}
		for(u8 i = 0 ; i<counter ; i++)
    3858:	89 81       	ldd	r24, Y+1	; 0x01
    385a:	8f 5f       	subi	r24, 0xFF	; 255
    385c:	89 83       	std	Y+1, r24	; 0x01
    385e:	89 81       	ldd	r24, Y+1	; 0x01
    3860:	28 2f       	mov	r18, r24
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	8a 81       	ldd	r24, Y+2	; 0x02
    3866:	9b 81       	ldd	r25, Y+3	; 0x03
    3868:	28 17       	cp	r18, r24
    386a:	39 07       	cpc	r19, r25
    386c:	90 f3       	brcs	.-28     	; 0x3852 <CLCD_voidSendNUmber+0xec>
		{
			CLCD_voidSendData('0');

		}
	}
}
    386e:	27 96       	adiw	r28, 0x07	; 7
    3870:	0f b6       	in	r0, 0x3f	; 63
    3872:	f8 94       	cli
    3874:	de bf       	out	0x3e, r29	; 62
    3876:	0f be       	out	0x3f, r0	; 63
    3878:	cd bf       	out	0x3d, r28	; 61
    387a:	cf 91       	pop	r28
    387c:	df 91       	pop	r29
    387e:	08 95       	ret

00003880 <CLCD_voidSetCursorPosition>:
void CLCD_voidSetCursorPosition(u8 Copy_u8X , u8 Copy_u8y)
{
    3880:	df 93       	push	r29
    3882:	cf 93       	push	r28
    3884:	00 d0       	rcall	.+0      	; 0x3886 <CLCD_voidSetCursorPosition+0x6>
    3886:	0f 92       	push	r0
    3888:	cd b7       	in	r28, 0x3d	; 61
    388a:	de b7       	in	r29, 0x3e	; 62
    388c:	8a 83       	std	Y+2, r24	; 0x02
    388e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8address ;

	Local_u8address = Copy_u8X + Copy_u8y * 0x40;
    3890:	8b 81       	ldd	r24, Y+3	; 0x03
    3892:	88 2f       	mov	r24, r24
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	00 24       	eor	r0, r0
    3898:	96 95       	lsr	r25
    389a:	87 95       	ror	r24
    389c:	07 94       	ror	r0
    389e:	96 95       	lsr	r25
    38a0:	87 95       	ror	r24
    38a2:	07 94       	ror	r0
    38a4:	98 2f       	mov	r25, r24
    38a6:	80 2d       	mov	r24, r0
    38a8:	98 2f       	mov	r25, r24
    38aa:	8a 81       	ldd	r24, Y+2	; 0x02
    38ac:	89 0f       	add	r24, r25
    38ae:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8address,7);
    38b0:	89 81       	ldd	r24, Y+1	; 0x01
    38b2:	80 68       	ori	r24, 0x80	; 128
    38b4:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendInstruction(Local_u8address);
    38b6:	89 81       	ldd	r24, Y+1	; 0x01
    38b8:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <CLCD_voidSendInstruction>
}
    38bc:	0f 90       	pop	r0
    38be:	0f 90       	pop	r0
    38c0:	0f 90       	pop	r0
    38c2:	cf 91       	pop	r28
    38c4:	df 91       	pop	r29
    38c6:	08 95       	ret

000038c8 <CLCD_SendSpecialCharcter>:
void CLCD_SendSpecialCharcter(u8 * Copy_buffer , u8 Copy_num , u8  Copy_u8X,u8 Copy_u8y )
{
    38c8:	df 93       	push	r29
    38ca:	cf 93       	push	r28
    38cc:	cd b7       	in	r28, 0x3d	; 61
    38ce:	de b7       	in	r29, 0x3e	; 62
    38d0:	27 97       	sbiw	r28, 0x07	; 7
    38d2:	0f b6       	in	r0, 0x3f	; 63
    38d4:	f8 94       	cli
    38d6:	de bf       	out	0x3e, r29	; 62
    38d8:	0f be       	out	0x3f, r0	; 63
    38da:	cd bf       	out	0x3d, r28	; 61
    38dc:	9c 83       	std	Y+4, r25	; 0x04
    38de:	8b 83       	std	Y+3, r24	; 0x03
    38e0:	6d 83       	std	Y+5, r22	; 0x05
    38e2:	4e 83       	std	Y+6, r20	; 0x06
    38e4:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Address , Local_u8Counter = 0 ;
    38e6:	19 82       	std	Y+1, r1	; 0x01

	Local_u8Address = Copy_num * 8 ;
    38e8:	8d 81       	ldd	r24, Y+5	; 0x05
    38ea:	88 2f       	mov	r24, r24
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	88 0f       	add	r24, r24
    38f0:	99 1f       	adc	r25, r25
    38f2:	88 0f       	add	r24, r24
    38f4:	99 1f       	adc	r25, r25
    38f6:	88 0f       	add	r24, r24
    38f8:	99 1f       	adc	r25, r25
    38fa:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(Local_u8Address , 6);
    38fc:	8a 81       	ldd	r24, Y+2	; 0x02
    38fe:	80 64       	ori	r24, 0x40	; 64
    3900:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendInstruction(Local_u8Address);
    3902:	8a 81       	ldd	r24, Y+2	; 0x02
    3904:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <CLCD_voidSendInstruction>

	for(Local_u8Counter = 0 ; Local_u8Counter<8 ; Local_u8Counter++)
    3908:	19 82       	std	Y+1, r1	; 0x01
    390a:	0e c0       	rjmp	.+28     	; 0x3928 <CLCD_SendSpecialCharcter+0x60>
	{
		CLCD_voidSendData(Copy_buffer[Local_u8Counter]);
    390c:	89 81       	ldd	r24, Y+1	; 0x01
    390e:	28 2f       	mov	r18, r24
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	8b 81       	ldd	r24, Y+3	; 0x03
    3914:	9c 81       	ldd	r25, Y+4	; 0x04
    3916:	fc 01       	movw	r30, r24
    3918:	e2 0f       	add	r30, r18
    391a:	f3 1f       	adc	r31, r19
    391c:	80 81       	ld	r24, Z
    391e:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <CLCD_voidSendData>

	Local_u8Address = Copy_num * 8 ;
	SET_BIT(Local_u8Address , 6);
	CLCD_voidSendInstruction(Local_u8Address);

	for(Local_u8Counter = 0 ; Local_u8Counter<8 ; Local_u8Counter++)
    3922:	89 81       	ldd	r24, Y+1	; 0x01
    3924:	8f 5f       	subi	r24, 0xFF	; 255
    3926:	89 83       	std	Y+1, r24	; 0x01
    3928:	89 81       	ldd	r24, Y+1	; 0x01
    392a:	88 30       	cpi	r24, 0x08	; 8
    392c:	78 f3       	brcs	.-34     	; 0x390c <CLCD_SendSpecialCharcter+0x44>
	{
		CLCD_voidSendData(Copy_buffer[Local_u8Counter]);
	}

	CLCD_voidSetCursorPosition(Copy_u8X,Copy_u8y);
    392e:	8e 81       	ldd	r24, Y+6	; 0x06
    3930:	6f 81       	ldd	r22, Y+7	; 0x07
    3932:	0e 94 40 1c 	call	0x3880	; 0x3880 <CLCD_voidSetCursorPosition>

	CLCD_voidSendData(Copy_num);
    3936:	8d 81       	ldd	r24, Y+5	; 0x05
    3938:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <CLCD_voidSendData>

}
    393c:	27 96       	adiw	r28, 0x07	; 7
    393e:	0f b6       	in	r0, 0x3f	; 63
    3940:	f8 94       	cli
    3942:	de bf       	out	0x3e, r29	; 62
    3944:	0f be       	out	0x3f, r0	; 63
    3946:	cd bf       	out	0x3d, r28	; 61
    3948:	cf 91       	pop	r28
    394a:	df 91       	pop	r29
    394c:	08 95       	ret

0000394e <CLCD_voidClearDisplay>:


void CLCD_voidClearDisplay(){
    394e:	df 93       	push	r29
    3950:	cf 93       	push	r28
    3952:	cd b7       	in	r28, 0x3d	; 61
    3954:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendInstruction(1);
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <CLCD_voidSendInstruction>
}
    395c:	cf 91       	pop	r28
    395e:	df 91       	pop	r29
    3960:	08 95       	ret

00003962 <timer1_ICU>:
	static u8 capture_count = 0 ;



void timer1_ICU()
{
    3962:	df 93       	push	r29
    3964:	cf 93       	push	r28
    3966:	cd b7       	in	r28, 0x3d	; 61
    3968:	de b7       	in	r29, 0x3e	; 62
			capture_count++;
    396a:	80 91 9f 01 	lds	r24, 0x019F
    396e:	8f 5f       	subi	r24, 0xFF	; 255
    3970:	80 93 9f 01 	sts	0x019F, r24

		if (capture_count == 1)
    3974:	80 91 9f 01 	lds	r24, 0x019F
    3978:	81 30       	cpi	r24, 0x01	; 1
    397a:	31 f4       	brne	.+12     	; 0x3988 <timer1_ICU+0x26>
		{
			ICU_ClearTimerValue();
    397c:	0e 94 ae 08 	call	0x115c	; 0x115c <ICU_ClearTimerValue>
	        TIMER_voidICUSetTriggerEdge(TIMER_u8_ICP_FALLING_EDGE);
    3980:	80 e0       	ldi	r24, 0x00	; 0
    3982:	0e 94 76 08 	call	0x10ec	; 0x10ec <TIMER_voidICUSetTriggerEdge>
    3986:	29 c0       	rjmp	.+82     	; 0x39da <timer1_ICU+0x78>
	    }
	    else if (capture_count == 2)
    3988:	80 91 9f 01 	lds	r24, 0x019F
    398c:	82 30       	cpi	r24, 0x02	; 2
    398e:	51 f4       	brne	.+20     	; 0x39a4 <timer1_ICU+0x42>
	    {

	        t1 = TIMER_u16GetICR();
    3990:	0e 94 a3 08 	call	0x1146	; 0x1146 <TIMER_u16GetICR>
    3994:	90 93 9a 01 	sts	0x019A, r25
    3998:	80 93 99 01 	sts	0x0199, r24
	        TIMER_voidICUSetTriggerEdge(TIMER_u8_ICP_RAISING_EDGE);
    399c:	81 e0       	ldi	r24, 0x01	; 1
    399e:	0e 94 76 08 	call	0x10ec	; 0x10ec <TIMER_voidICUSetTriggerEdge>
    39a2:	1b c0       	rjmp	.+54     	; 0x39da <timer1_ICU+0x78>
	    }

	    else if (capture_count == 3)
    39a4:	80 91 9f 01 	lds	r24, 0x019F
    39a8:	83 30       	cpi	r24, 0x03	; 3
    39aa:	51 f4       	brne	.+20     	; 0x39c0 <timer1_ICU+0x5e>
	    {
	        t2 = TIMER_u16GetICR();
    39ac:	0e 94 a3 08 	call	0x1146	; 0x1146 <TIMER_u16GetICR>
    39b0:	90 93 9c 01 	sts	0x019C, r25
    39b4:	80 93 9b 01 	sts	0x019B, r24
	        TIMER_voidICUSetTriggerEdge(TIMER_u8_ICP_FALLING_EDGE);
    39b8:	80 e0       	ldi	r24, 0x00	; 0
    39ba:	0e 94 76 08 	call	0x10ec	; 0x10ec <TIMER_voidICUSetTriggerEdge>
    39be:	0d c0       	rjmp	.+26     	; 0x39da <timer1_ICU+0x78>


	    }
	    else if (capture_count == 4)
    39c0:	80 91 9f 01 	lds	r24, 0x019F
    39c4:	84 30       	cpi	r24, 0x04	; 4
    39c6:	49 f4       	brne	.+18     	; 0x39da <timer1_ICU+0x78>
	    {
	    	  t3 = TIMER_u16GetICR();
    39c8:	0e 94 a3 08 	call	0x1146	; 0x1146 <TIMER_u16GetICR>
    39cc:	90 93 9e 01 	sts	0x019E, r25
    39d0:	80 93 9d 01 	sts	0x019D, r24
	    	  TIMER_voidICUSetTriggerEdge(TIMER_u8_ICP_RAISING_EDGE);
    39d4:	81 e0       	ldi	r24, 0x01	; 1
    39d6:	0e 94 76 08 	call	0x10ec	; 0x10ec <TIMER_voidICUSetTriggerEdge>
	    }
}
    39da:	cf 91       	pop	r28
    39dc:	df 91       	pop	r29
    39de:	08 95       	ret

000039e0 <main>:
int main(void)
{
    39e0:	ef 92       	push	r14
    39e2:	ff 92       	push	r15
    39e4:	0f 93       	push	r16
    39e6:	1f 93       	push	r17
    39e8:	df 93       	push	r29
    39ea:	cf 93       	push	r28
    39ec:	cd b7       	in	r28, 0x3d	; 61
    39ee:	de b7       	in	r29, 0x3e	; 62
    39f0:	6b 97       	sbiw	r28, 0x1b	; 27
    39f2:	0f b6       	in	r0, 0x3f	; 63
    39f4:	f8 94       	cli
    39f6:	de bf       	out	0x3e, r29	; 62
    39f8:	0f be       	out	0x3f, r0	; 63
    39fa:	cd bf       	out	0x3d, r28	; 61
	        u16 period  = 0 ; // t2 - t1;
    39fc:	1b 8e       	std	Y+27, r1	; 0x1b
    39fe:	1a 8e       	std	Y+26, r1	; 0x1a
	        u8	D_Cycle = 0 ; //t3 /( t2 - t1 );
    3a00:	19 8e       	std	Y+25, r1	; 0x19
	        f32 freq    = 0 ;
    3a02:	80 e0       	ldi	r24, 0x00	; 0
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	a0 e0       	ldi	r26, 0x00	; 0
    3a08:	b0 e0       	ldi	r27, 0x00	; 0
    3a0a:	8d 8b       	std	Y+21, r24	; 0x15
    3a0c:	9e 8b       	std	Y+22, r25	; 0x16
    3a0e:	af 8b       	std	Y+23, r26	; 0x17
    3a10:	b8 8f       	std	Y+24, r27	; 0x18
	        f32 TIME_ms = 0 ;
    3a12:	80 e0       	ldi	r24, 0x00	; 0
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	a0 e0       	ldi	r26, 0x00	; 0
    3a18:	b0 e0       	ldi	r27, 0x00	; 0
    3a1a:	89 8b       	std	Y+17, r24	; 0x11
    3a1c:	9a 8b       	std	Y+18, r25	; 0x12
    3a1e:	ab 8b       	std	Y+19, r26	; 0x13
    3a20:	bc 8b       	std	Y+20, r27	; 0x14
	        u16 prescaler = 1 ; // select prescaler manually until next edit
    3a22:	81 e0       	ldi	r24, 0x01	; 1
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	98 8b       	std	Y+16, r25	; 0x10
    3a28:	8f 87       	std	Y+15, r24	; 0x0f
PORT_voidInit();
    3a2a:	0e 94 43 09 	call	0x1286	; 0x1286 <PORT_voidInit>
GIE_voidEnableGlobalInterrupt();
    3a2e:	0e 94 67 09 	call	0x12ce	; 0x12ce <GIE_voidEnableGlobalInterrupt>
GLCD_Init();
    3a32:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <GLCD_Init>
GLCD_Reset(); //GLCD_ClearDisplay();
    3a36:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <GLCD_Reset>
//TIMER1_voidInit();
TIMER_voidICUInitEnable();
    3a3a:	0e 94 5f 08 	call	0x10be	; 0x10be <TIMER_voidICUInitEnable>
//TIMER_voidICUEnableInterrupt();
TIMER1_voidSetCallBack_ICI(timer1_ICU);
    3a3e:	81 eb       	ldi	r24, 0xB1	; 177
    3a40:	9c e1       	ldi	r25, 0x1C	; 28
    3a42:	0e 94 cb 08 	call	0x1196	; 0x1196 <TIMER1_voidSetCallBack_ICI>

		while(1)
		{

if(capture_count == 4)
    3a46:	80 91 9f 01 	lds	r24, 0x019F
    3a4a:	84 30       	cpi	r24, 0x04	; 4
    3a4c:	e1 f7       	brne	.-8      	; 0x3a46 <main+0x66>
	{
//		De_Init();
//		CLCD_voidSetCursorPosition(0,0);
		period = (t3-t1) ;
    3a4e:	20 91 9d 01 	lds	r18, 0x019D
    3a52:	30 91 9e 01 	lds	r19, 0x019E
    3a56:	80 91 99 01 	lds	r24, 0x0199
    3a5a:	90 91 9a 01 	lds	r25, 0x019A
    3a5e:	a9 01       	movw	r20, r18
    3a60:	48 1b       	sub	r20, r24
    3a62:	59 0b       	sbc	r21, r25
    3a64:	ca 01       	movw	r24, r20
    3a66:	9b 8f       	std	Y+27, r25	; 0x1b
    3a68:	8a 8f       	std	Y+26, r24	; 0x1a
		freq =((16000000/prescaler) / period)/1000.000; // div by 1000 for KHz
    3a6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a6c:	98 89       	ldd	r25, Y+16	; 0x10
    3a6e:	9c 01       	movw	r18, r24
    3a70:	40 e0       	ldi	r20, 0x00	; 0
    3a72:	50 e0       	ldi	r21, 0x00	; 0
    3a74:	80 e0       	ldi	r24, 0x00	; 0
    3a76:	94 e2       	ldi	r25, 0x24	; 36
    3a78:	a4 ef       	ldi	r26, 0xF4	; 244
    3a7a:	b0 e0       	ldi	r27, 0x00	; 0
    3a7c:	bc 01       	movw	r22, r24
    3a7e:	cd 01       	movw	r24, r26
    3a80:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__divmodsi4>
    3a84:	da 01       	movw	r26, r20
    3a86:	c9 01       	movw	r24, r18
    3a88:	7c 01       	movw	r14, r24
    3a8a:	8d 01       	movw	r16, r26
    3a8c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3a8e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3a90:	9c 01       	movw	r18, r24
    3a92:	40 e0       	ldi	r20, 0x00	; 0
    3a94:	50 e0       	ldi	r21, 0x00	; 0
    3a96:	c8 01       	movw	r24, r16
    3a98:	b7 01       	movw	r22, r14
    3a9a:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__divmodsi4>
    3a9e:	da 01       	movw	r26, r20
    3aa0:	c9 01       	movw	r24, r18
    3aa2:	bc 01       	movw	r22, r24
    3aa4:	cd 01       	movw	r24, r26
    3aa6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__floatsisf>
    3aaa:	dc 01       	movw	r26, r24
    3aac:	cb 01       	movw	r24, r22
    3aae:	bc 01       	movw	r22, r24
    3ab0:	cd 01       	movw	r24, r26
    3ab2:	20 e0       	ldi	r18, 0x00	; 0
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	4a e7       	ldi	r20, 0x7A	; 122
    3ab8:	54 e4       	ldi	r21, 0x44	; 68
    3aba:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    3abe:	dc 01       	movw	r26, r24
    3ac0:	cb 01       	movw	r24, r22
    3ac2:	8d 8b       	std	Y+21, r24	; 0x15
    3ac4:	9e 8b       	std	Y+22, r25	; 0x16
    3ac6:	af 8b       	std	Y+23, r26	; 0x17
    3ac8:	b8 8f       	std	Y+24, r27	; 0x18
		TIME_ms = ((float)prescaler/16000) * period ;
    3aca:	8f 85       	ldd	r24, Y+15	; 0x0f
    3acc:	98 89       	ldd	r25, Y+16	; 0x10
    3ace:	cc 01       	movw	r24, r24
    3ad0:	a0 e0       	ldi	r26, 0x00	; 0
    3ad2:	b0 e0       	ldi	r27, 0x00	; 0
    3ad4:	bc 01       	movw	r22, r24
    3ad6:	cd 01       	movw	r24, r26
    3ad8:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    3adc:	dc 01       	movw	r26, r24
    3ade:	cb 01       	movw	r24, r22
    3ae0:	bc 01       	movw	r22, r24
    3ae2:	cd 01       	movw	r24, r26
    3ae4:	20 e0       	ldi	r18, 0x00	; 0
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	4a e7       	ldi	r20, 0x7A	; 122
    3aea:	56 e4       	ldi	r21, 0x46	; 70
    3aec:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    3af0:	dc 01       	movw	r26, r24
    3af2:	cb 01       	movw	r24, r22
    3af4:	7c 01       	movw	r14, r24
    3af6:	8d 01       	movw	r16, r26
    3af8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3afa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3afc:	cc 01       	movw	r24, r24
    3afe:	a0 e0       	ldi	r26, 0x00	; 0
    3b00:	b0 e0       	ldi	r27, 0x00	; 0
    3b02:	bc 01       	movw	r22, r24
    3b04:	cd 01       	movw	r24, r26
    3b06:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    3b0a:	9b 01       	movw	r18, r22
    3b0c:	ac 01       	movw	r20, r24
    3b0e:	c8 01       	movw	r24, r16
    3b10:	b7 01       	movw	r22, r14
    3b12:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3b16:	dc 01       	movw	r26, r24
    3b18:	cb 01       	movw	r24, r22
    3b1a:	89 8b       	std	Y+17, r24	; 0x11
    3b1c:	9a 8b       	std	Y+18, r25	; 0x12
    3b1e:	ab 8b       	std	Y+19, r26	; 0x13
    3b20:	bc 8b       	std	Y+20, r27	; 0x14
		D_Cycle = ((float)(t3-t2)/(period)*100);
    3b22:	20 91 9d 01 	lds	r18, 0x019D
    3b26:	30 91 9e 01 	lds	r19, 0x019E
    3b2a:	80 91 9b 01 	lds	r24, 0x019B
    3b2e:	90 91 9c 01 	lds	r25, 0x019C
    3b32:	a9 01       	movw	r20, r18
    3b34:	48 1b       	sub	r20, r24
    3b36:	59 0b       	sbc	r21, r25
    3b38:	ca 01       	movw	r24, r20
    3b3a:	cc 01       	movw	r24, r24
    3b3c:	a0 e0       	ldi	r26, 0x00	; 0
    3b3e:	b0 e0       	ldi	r27, 0x00	; 0
    3b40:	bc 01       	movw	r22, r24
    3b42:	cd 01       	movw	r24, r26
    3b44:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    3b48:	7b 01       	movw	r14, r22
    3b4a:	8c 01       	movw	r16, r24
    3b4c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3b4e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3b50:	cc 01       	movw	r24, r24
    3b52:	a0 e0       	ldi	r26, 0x00	; 0
    3b54:	b0 e0       	ldi	r27, 0x00	; 0
    3b56:	bc 01       	movw	r22, r24
    3b58:	cd 01       	movw	r24, r26
    3b5a:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    3b5e:	9b 01       	movw	r18, r22
    3b60:	ac 01       	movw	r20, r24
    3b62:	c8 01       	movw	r24, r16
    3b64:	b7 01       	movw	r22, r14
    3b66:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	bc 01       	movw	r22, r24
    3b70:	cd 01       	movw	r24, r26
    3b72:	20 e0       	ldi	r18, 0x00	; 0
    3b74:	30 e0       	ldi	r19, 0x00	; 0
    3b76:	48 ec       	ldi	r20, 0xC8	; 200
    3b78:	52 e4       	ldi	r21, 0x42	; 66
    3b7a:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3b7e:	dc 01       	movw	r26, r24
    3b80:	cb 01       	movw	r24, r22
    3b82:	bc 01       	movw	r22, r24
    3b84:	cd 01       	movw	r24, r26
    3b86:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	cb 01       	movw	r24, r22
    3b8e:	89 8f       	std	Y+25, r24	; 0x19
		GLCD_GoToLine(0);
    3b90:	80 e0       	ldi	r24, 0x00	; 0
    3b92:	0e 94 24 19 	call	0x3248	; 0x3248 <GLCD_GoToLine>
		GLCD_String("Freq= ");
    3b96:	80 e6       	ldi	r24, 0x60	; 96
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	0e 94 1b 18 	call	0x3036	; 0x3036 <GLCD_String>
		GLCD_SendFloat(freq);
    3b9e:	8d 89       	ldd	r24, Y+21	; 0x15
    3ba0:	9e 89       	ldd	r25, Y+22	; 0x16
    3ba2:	af 89       	ldd	r26, Y+23	; 0x17
    3ba4:	b8 8d       	ldd	r27, Y+24	; 0x18
    3ba6:	bc 01       	movw	r22, r24
    3ba8:	cd 01       	movw	r24, r26
    3baa:	0e 94 97 18 	call	0x312e	; 0x312e <GLCD_SendFloat>
		GLCD_String("KHz");
    3bae:	87 e6       	ldi	r24, 0x67	; 103
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	0e 94 1b 18 	call	0x3036	; 0x3036 <GLCD_String>
		GLCD_GoToLine(1);
    3bb6:	81 e0       	ldi	r24, 0x01	; 1
    3bb8:	0e 94 24 19 	call	0x3248	; 0x3248 <GLCD_GoToLine>
		GLCD_String("Duty= ");
    3bbc:	8b e6       	ldi	r24, 0x6B	; 107
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	0e 94 1b 18 	call	0x3036	; 0x3036 <GLCD_String>
		GLCD_DisplayInteger(D_Cycle);
    3bc4:	89 8d       	ldd	r24, Y+25	; 0x19
    3bc6:	88 2f       	mov	r24, r24
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	0e 94 37 18 	call	0x306e	; 0x306e <GLCD_DisplayInteger>
		GLCD_String("%");
    3bce:	82 e7       	ldi	r24, 0x72	; 114
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	0e 94 1b 18 	call	0x3036	; 0x3036 <GLCD_String>
		GLCD_GoToLine(4);
    3bd6:	84 e0       	ldi	r24, 0x04	; 4
    3bd8:	0e 94 24 19 	call	0x3248	; 0x3248 <GLCD_GoToLine>
		GLCD_String("T=");
    3bdc:	84 e7       	ldi	r24, 0x74	; 116
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	0e 94 1b 18 	call	0x3036	; 0x3036 <GLCD_String>
		GLCD_SendFloat(TIME_ms);
    3be4:	89 89       	ldd	r24, Y+17	; 0x11
    3be6:	9a 89       	ldd	r25, Y+18	; 0x12
    3be8:	ab 89       	ldd	r26, Y+19	; 0x13
    3bea:	bc 89       	ldd	r27, Y+20	; 0x14
    3bec:	bc 01       	movw	r22, r24
    3bee:	cd 01       	movw	r24, r26
    3bf0:	0e 94 97 18 	call	0x312e	; 0x312e <GLCD_SendFloat>
		GLCD_String("ms");
    3bf4:	87 e7       	ldi	r24, 0x77	; 119
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	0e 94 1b 18 	call	0x3036	; 0x3036 <GLCD_String>
		GLCD_Draw_Pulse(D_Cycle);
    3bfc:	89 8d       	ldd	r24, Y+25	; 0x19
    3bfe:	0e 94 9e 13 	call	0x273c	; 0x273c <GLCD_Draw_Pulse>
    3c02:	80 e0       	ldi	r24, 0x00	; 0
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	aa ef       	ldi	r26, 0xFA	; 250
    3c08:	b4 e4       	ldi	r27, 0x44	; 68
    3c0a:	8b 87       	std	Y+11, r24	; 0x0b
    3c0c:	9c 87       	std	Y+12, r25	; 0x0c
    3c0e:	ad 87       	std	Y+13, r26	; 0x0d
    3c10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c12:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c14:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c16:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c18:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c1a:	20 e0       	ldi	r18, 0x00	; 0
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	4a e7       	ldi	r20, 0x7A	; 122
    3c20:	55 e4       	ldi	r21, 0x45	; 69
    3c22:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3c26:	dc 01       	movw	r26, r24
    3c28:	cb 01       	movw	r24, r22
    3c2a:	8f 83       	std	Y+7, r24	; 0x07
    3c2c:	98 87       	std	Y+8, r25	; 0x08
    3c2e:	a9 87       	std	Y+9, r26	; 0x09
    3c30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c32:	6f 81       	ldd	r22, Y+7	; 0x07
    3c34:	78 85       	ldd	r23, Y+8	; 0x08
    3c36:	89 85       	ldd	r24, Y+9	; 0x09
    3c38:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	40 e8       	ldi	r20, 0x80	; 128
    3c40:	5f e3       	ldi	r21, 0x3F	; 63
    3c42:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    3c46:	88 23       	and	r24, r24
    3c48:	2c f4       	brge	.+10     	; 0x3c54 <main+0x274>
		__ticks = 1;
    3c4a:	81 e0       	ldi	r24, 0x01	; 1
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	9e 83       	std	Y+6, r25	; 0x06
    3c50:	8d 83       	std	Y+5, r24	; 0x05
    3c52:	3f c0       	rjmp	.+126    	; 0x3cd2 <main+0x2f2>
	else if (__tmp > 65535)
    3c54:	6f 81       	ldd	r22, Y+7	; 0x07
    3c56:	78 85       	ldd	r23, Y+8	; 0x08
    3c58:	89 85       	ldd	r24, Y+9	; 0x09
    3c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c5c:	20 e0       	ldi	r18, 0x00	; 0
    3c5e:	3f ef       	ldi	r19, 0xFF	; 255
    3c60:	4f e7       	ldi	r20, 0x7F	; 127
    3c62:	57 e4       	ldi	r21, 0x47	; 71
    3c64:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    3c68:	18 16       	cp	r1, r24
    3c6a:	4c f5       	brge	.+82     	; 0x3cbe <main+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c70:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c72:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c74:	20 e0       	ldi	r18, 0x00	; 0
    3c76:	30 e0       	ldi	r19, 0x00	; 0
    3c78:	40 e2       	ldi	r20, 0x20	; 32
    3c7a:	51 e4       	ldi	r21, 0x41	; 65
    3c7c:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3c80:	dc 01       	movw	r26, r24
    3c82:	cb 01       	movw	r24, r22
    3c84:	bc 01       	movw	r22, r24
    3c86:	cd 01       	movw	r24, r26
    3c88:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3c8c:	dc 01       	movw	r26, r24
    3c8e:	cb 01       	movw	r24, r22
    3c90:	9e 83       	std	Y+6, r25	; 0x06
    3c92:	8d 83       	std	Y+5, r24	; 0x05
    3c94:	0f c0       	rjmp	.+30     	; 0x3cb4 <main+0x2d4>
    3c96:	80 e9       	ldi	r24, 0x90	; 144
    3c98:	91 e0       	ldi	r25, 0x01	; 1
    3c9a:	9c 83       	std	Y+4, r25	; 0x04
    3c9c:	8b 83       	std	Y+3, r24	; 0x03
    3c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca2:	01 97       	sbiw	r24, 0x01	; 1
    3ca4:	f1 f7       	brne	.-4      	; 0x3ca2 <main+0x2c2>
    3ca6:	9c 83       	std	Y+4, r25	; 0x04
    3ca8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3caa:	8d 81       	ldd	r24, Y+5	; 0x05
    3cac:	9e 81       	ldd	r25, Y+6	; 0x06
    3cae:	01 97       	sbiw	r24, 0x01	; 1
    3cb0:	9e 83       	std	Y+6, r25	; 0x06
    3cb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    3cb8:	00 97       	sbiw	r24, 0x00	; 0
    3cba:	69 f7       	brne	.-38     	; 0x3c96 <main+0x2b6>
    3cbc:	14 c0       	rjmp	.+40     	; 0x3ce6 <main+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cbe:	6f 81       	ldd	r22, Y+7	; 0x07
    3cc0:	78 85       	ldd	r23, Y+8	; 0x08
    3cc2:	89 85       	ldd	r24, Y+9	; 0x09
    3cc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3cca:	dc 01       	movw	r26, r24
    3ccc:	cb 01       	movw	r24, r22
    3cce:	9e 83       	std	Y+6, r25	; 0x06
    3cd0:	8d 83       	std	Y+5, r24	; 0x05
    3cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd6:	9a 83       	std	Y+2, r25	; 0x02
    3cd8:	89 83       	std	Y+1, r24	; 0x01
    3cda:	89 81       	ldd	r24, Y+1	; 0x01
    3cdc:	9a 81       	ldd	r25, Y+2	; 0x02
    3cde:	01 97       	sbiw	r24, 0x01	; 1
    3ce0:	f1 f7       	brne	.-4      	; 0x3cde <main+0x2fe>
    3ce2:	9a 83       	std	Y+2, r25	; 0x02
    3ce4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		GLCD_ClearDisplay();
    3ce6:	0e 94 43 19 	call	0x3286	; 0x3286 <GLCD_ClearDisplay>

		capture_count = 0 ;
    3cea:	10 92 9f 01 	sts	0x019F, r1
    3cee:	ab ce       	rjmp	.-682    	; 0x3a46 <main+0x66>

00003cf0 <__udivmodhi4>:
    3cf0:	aa 1b       	sub	r26, r26
    3cf2:	bb 1b       	sub	r27, r27
    3cf4:	51 e1       	ldi	r21, 0x11	; 17
    3cf6:	07 c0       	rjmp	.+14     	; 0x3d06 <__udivmodhi4_ep>

00003cf8 <__udivmodhi4_loop>:
    3cf8:	aa 1f       	adc	r26, r26
    3cfa:	bb 1f       	adc	r27, r27
    3cfc:	a6 17       	cp	r26, r22
    3cfe:	b7 07       	cpc	r27, r23
    3d00:	10 f0       	brcs	.+4      	; 0x3d06 <__udivmodhi4_ep>
    3d02:	a6 1b       	sub	r26, r22
    3d04:	b7 0b       	sbc	r27, r23

00003d06 <__udivmodhi4_ep>:
    3d06:	88 1f       	adc	r24, r24
    3d08:	99 1f       	adc	r25, r25
    3d0a:	5a 95       	dec	r21
    3d0c:	a9 f7       	brne	.-22     	; 0x3cf8 <__udivmodhi4_loop>
    3d0e:	80 95       	com	r24
    3d10:	90 95       	com	r25
    3d12:	bc 01       	movw	r22, r24
    3d14:	cd 01       	movw	r24, r26
    3d16:	08 95       	ret

00003d18 <__divmodhi4>:
    3d18:	97 fb       	bst	r25, 7
    3d1a:	09 2e       	mov	r0, r25
    3d1c:	07 26       	eor	r0, r23
    3d1e:	0a d0       	rcall	.+20     	; 0x3d34 <__divmodhi4_neg1>
    3d20:	77 fd       	sbrc	r23, 7
    3d22:	04 d0       	rcall	.+8      	; 0x3d2c <__divmodhi4_neg2>
    3d24:	e5 df       	rcall	.-54     	; 0x3cf0 <__udivmodhi4>
    3d26:	06 d0       	rcall	.+12     	; 0x3d34 <__divmodhi4_neg1>
    3d28:	00 20       	and	r0, r0
    3d2a:	1a f4       	brpl	.+6      	; 0x3d32 <__divmodhi4_exit>

00003d2c <__divmodhi4_neg2>:
    3d2c:	70 95       	com	r23
    3d2e:	61 95       	neg	r22
    3d30:	7f 4f       	sbci	r23, 0xFF	; 255

00003d32 <__divmodhi4_exit>:
    3d32:	08 95       	ret

00003d34 <__divmodhi4_neg1>:
    3d34:	f6 f7       	brtc	.-4      	; 0x3d32 <__divmodhi4_exit>
    3d36:	90 95       	com	r25
    3d38:	81 95       	neg	r24
    3d3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d3c:	08 95       	ret

00003d3e <__divmodsi4>:
    3d3e:	97 fb       	bst	r25, 7
    3d40:	09 2e       	mov	r0, r25
    3d42:	05 26       	eor	r0, r21
    3d44:	0e d0       	rcall	.+28     	; 0x3d62 <__divmodsi4_neg1>
    3d46:	57 fd       	sbrc	r21, 7
    3d48:	04 d0       	rcall	.+8      	; 0x3d52 <__divmodsi4_neg2>
    3d4a:	14 d0       	rcall	.+40     	; 0x3d74 <__udivmodsi4>
    3d4c:	0a d0       	rcall	.+20     	; 0x3d62 <__divmodsi4_neg1>
    3d4e:	00 1c       	adc	r0, r0
    3d50:	38 f4       	brcc	.+14     	; 0x3d60 <__divmodsi4_exit>

00003d52 <__divmodsi4_neg2>:
    3d52:	50 95       	com	r21
    3d54:	40 95       	com	r20
    3d56:	30 95       	com	r19
    3d58:	21 95       	neg	r18
    3d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d5c:	4f 4f       	sbci	r20, 0xFF	; 255
    3d5e:	5f 4f       	sbci	r21, 0xFF	; 255

00003d60 <__divmodsi4_exit>:
    3d60:	08 95       	ret

00003d62 <__divmodsi4_neg1>:
    3d62:	f6 f7       	brtc	.-4      	; 0x3d60 <__divmodsi4_exit>
    3d64:	90 95       	com	r25
    3d66:	80 95       	com	r24
    3d68:	70 95       	com	r23
    3d6a:	61 95       	neg	r22
    3d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    3d6e:	8f 4f       	sbci	r24, 0xFF	; 255
    3d70:	9f 4f       	sbci	r25, 0xFF	; 255
    3d72:	08 95       	ret

00003d74 <__udivmodsi4>:
    3d74:	a1 e2       	ldi	r26, 0x21	; 33
    3d76:	1a 2e       	mov	r1, r26
    3d78:	aa 1b       	sub	r26, r26
    3d7a:	bb 1b       	sub	r27, r27
    3d7c:	fd 01       	movw	r30, r26
    3d7e:	0d c0       	rjmp	.+26     	; 0x3d9a <__udivmodsi4_ep>

00003d80 <__udivmodsi4_loop>:
    3d80:	aa 1f       	adc	r26, r26
    3d82:	bb 1f       	adc	r27, r27
    3d84:	ee 1f       	adc	r30, r30
    3d86:	ff 1f       	adc	r31, r31
    3d88:	a2 17       	cp	r26, r18
    3d8a:	b3 07       	cpc	r27, r19
    3d8c:	e4 07       	cpc	r30, r20
    3d8e:	f5 07       	cpc	r31, r21
    3d90:	20 f0       	brcs	.+8      	; 0x3d9a <__udivmodsi4_ep>
    3d92:	a2 1b       	sub	r26, r18
    3d94:	b3 0b       	sbc	r27, r19
    3d96:	e4 0b       	sbc	r30, r20
    3d98:	f5 0b       	sbc	r31, r21

00003d9a <__udivmodsi4_ep>:
    3d9a:	66 1f       	adc	r22, r22
    3d9c:	77 1f       	adc	r23, r23
    3d9e:	88 1f       	adc	r24, r24
    3da0:	99 1f       	adc	r25, r25
    3da2:	1a 94       	dec	r1
    3da4:	69 f7       	brne	.-38     	; 0x3d80 <__udivmodsi4_loop>
    3da6:	60 95       	com	r22
    3da8:	70 95       	com	r23
    3daa:	80 95       	com	r24
    3dac:	90 95       	com	r25
    3dae:	9b 01       	movw	r18, r22
    3db0:	ac 01       	movw	r20, r24
    3db2:	bd 01       	movw	r22, r26
    3db4:	cf 01       	movw	r24, r30
    3db6:	08 95       	ret

00003db8 <__prologue_saves__>:
    3db8:	2f 92       	push	r2
    3dba:	3f 92       	push	r3
    3dbc:	4f 92       	push	r4
    3dbe:	5f 92       	push	r5
    3dc0:	6f 92       	push	r6
    3dc2:	7f 92       	push	r7
    3dc4:	8f 92       	push	r8
    3dc6:	9f 92       	push	r9
    3dc8:	af 92       	push	r10
    3dca:	bf 92       	push	r11
    3dcc:	cf 92       	push	r12
    3dce:	df 92       	push	r13
    3dd0:	ef 92       	push	r14
    3dd2:	ff 92       	push	r15
    3dd4:	0f 93       	push	r16
    3dd6:	1f 93       	push	r17
    3dd8:	cf 93       	push	r28
    3dda:	df 93       	push	r29
    3ddc:	cd b7       	in	r28, 0x3d	; 61
    3dde:	de b7       	in	r29, 0x3e	; 62
    3de0:	ca 1b       	sub	r28, r26
    3de2:	db 0b       	sbc	r29, r27
    3de4:	0f b6       	in	r0, 0x3f	; 63
    3de6:	f8 94       	cli
    3de8:	de bf       	out	0x3e, r29	; 62
    3dea:	0f be       	out	0x3f, r0	; 63
    3dec:	cd bf       	out	0x3d, r28	; 61
    3dee:	09 94       	ijmp

00003df0 <__epilogue_restores__>:
    3df0:	2a 88       	ldd	r2, Y+18	; 0x12
    3df2:	39 88       	ldd	r3, Y+17	; 0x11
    3df4:	48 88       	ldd	r4, Y+16	; 0x10
    3df6:	5f 84       	ldd	r5, Y+15	; 0x0f
    3df8:	6e 84       	ldd	r6, Y+14	; 0x0e
    3dfa:	7d 84       	ldd	r7, Y+13	; 0x0d
    3dfc:	8c 84       	ldd	r8, Y+12	; 0x0c
    3dfe:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e00:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e02:	b9 84       	ldd	r11, Y+9	; 0x09
    3e04:	c8 84       	ldd	r12, Y+8	; 0x08
    3e06:	df 80       	ldd	r13, Y+7	; 0x07
    3e08:	ee 80       	ldd	r14, Y+6	; 0x06
    3e0a:	fd 80       	ldd	r15, Y+5	; 0x05
    3e0c:	0c 81       	ldd	r16, Y+4	; 0x04
    3e0e:	1b 81       	ldd	r17, Y+3	; 0x03
    3e10:	aa 81       	ldd	r26, Y+2	; 0x02
    3e12:	b9 81       	ldd	r27, Y+1	; 0x01
    3e14:	ce 0f       	add	r28, r30
    3e16:	d1 1d       	adc	r29, r1
    3e18:	0f b6       	in	r0, 0x3f	; 63
    3e1a:	f8 94       	cli
    3e1c:	de bf       	out	0x3e, r29	; 62
    3e1e:	0f be       	out	0x3f, r0	; 63
    3e20:	cd bf       	out	0x3d, r28	; 61
    3e22:	ed 01       	movw	r28, r26
    3e24:	08 95       	ret

00003e26 <_exit>:
    3e26:	f8 94       	cli

00003e28 <__stop_program>:
    3e28:	ff cf       	rjmp	.-2      	; 0x3e28 <__stop_program>
